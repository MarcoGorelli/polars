Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.combine", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.combine", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 87, 102, 115, 118, 213, 215, 233, 245, 532, 608], "refer": [0, 89, 90, 92, 209, 233, 401, 458, 532, 787, 849, 887], "input": [0, 55, 80, 89, 90, 92, 233, 378, 386, 481, 499, 507, 508, 511, 532, 541, 769, 887], "output": [0, 25, 27, 28, 65, 92, 109, 118, 140, 141, 152, 162, 167, 170, 179, 205, 233, 241, 245, 380, 381, 385, 476, 481, 507, 518, 532, 541, 562, 563, 572, 577, 606, 608, 614, 623, 875, 887], "seri": [0, 1, 20, 46, 56, 57, 58, 59, 60, 63, 64, 65, 78, 79, 82, 87, 108, 109, 111, 115, 118, 124, 132, 134, 136, 137, 142, 145, 146, 148, 150, 158, 159, 163, 175, 176, 182, 190, 194, 199, 200, 209, 210, 214, 233, 244, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 261, 266, 267, 274, 275, 278, 279, 280, 283, 289, 290, 294, 295, 307, 308, 311, 314, 317, 319, 321, 324, 328, 330, 333, 334, 337, 338, 346, 347, 353, 357, 359, 361, 362, 363, 364, 365, 367, 368, 369, 379, 380, 397, 401, 402, 403, 404, 405, 407, 419, 420, 423, 426, 427, 434, 452, 458, 462, 467, 468, 469, 470, 475, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 499, 500, 502, 504, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 519, 520, 521, 522, 523, 532, 541, 558, 586, 602, 603, 614, 879, 881, 883, 886, 890, 891, 892], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 44, 46, 55, 56, 57, 58, 59, 60, 62, 63, 64, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 109, 110, 231, 232, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 489, 490, 493, 496, 497, 498, 499, 501, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 532, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 614, 622, 642, 660, 669, 684, 832, 834, 845, 846, 856, 857, 866, 867, 875, 887], "lazyfram": [0, 1, 43, 45, 55, 56, 57, 58, 59, 62, 63, 100, 101, 102, 103, 104, 105, 107, 111, 156, 169, 233, 280, 350, 532, 541, 613, 893], "express": [0, 60, 62, 65, 109, 111, 112, 118, 130, 132, 139, 165, 170, 178, 188, 210, 213, 215, 233, 241, 242, 244, 245, 262, 280, 291, 292, 293, 296, 302, 304, 309, 325, 344, 347, 350, 357, 359, 363, 366, 371, 374, 379, 380, 381, 385, 386, 397, 398, 399, 404, 418, 419, 420, 422, 424, 429, 435, 443, 458, 464, 467, 473, 475, 478, 482, 485, 486, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 506, 507, 508, 511, 513, 515, 516, 517, 518, 520, 521, 524, 531, 541, 547, 555, 558, 580, 588, 589, 590, 591, 593, 602, 603, 604, 607, 608, 614, 642, 673, 674, 675, 683, 692, 712, 735, 805, 812, 826, 834, 887], "extend": [0, 80, 233, 347, 532, 541, 622, 735, 887], "function": [0, 56, 57, 58, 59, 60, 64, 89, 90, 92, 100, 110, 118, 127, 134, 161, 168, 169, 170, 201, 204, 215, 233, 242, 245, 280, 302, 328, 341, 342, 343, 380, 381, 395, 407, 408, 409, 410, 411, 412, 414, 415, 416, 428, 471, 479, 481, 491, 492, 499, 500, 502, 507, 515, 532, 541, 572, 576, 579, 608, 614, 623, 660, 683, 715, 729, 730, 731, 732, 793, 807, 808, 814, 819, 887], "data": [0, 1, 13, 16, 30, 46, 55, 56, 58, 63, 69, 70, 75, 76, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 107, 108, 110, 111, 112, 119, 120, 129, 138, 140, 152, 153, 154, 156, 169, 173, 178, 179, 180, 186, 193, 197, 198, 209, 210, 212, 231, 233, 288, 307, 329, 337, 358, 365, 367, 401, 417, 418, 428, 458, 471, 473, 485, 518, 532, 541, 545, 546, 555, 562, 579, 590, 591, 602, 603, 607, 614, 622, 667, 672, 676, 688, 690, 724, 787, 803, 804, 814, 819, 849, 868, 869, 871, 873, 877, 886, 887], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 69, 78, 79, 80, 81, 82, 83, 87, 89, 90, 91, 92, 100, 101, 106, 107, 108, 111, 114, 115, 118, 128, 134, 138, 140, 141, 142, 153, 193, 197, 198, 200, 202, 203, 233, 245, 267, 280, 288, 289, 291, 292, 293, 308, 311, 314, 317, 319, 321, 324, 330, 338, 344, 355, 359, 361, 363, 364, 404, 453, 454, 455, 458, 471, 481, 486, 494, 495, 496, 498, 499, 506, 532, 541, 547, 555, 562, 563, 580, 589, 590, 591, 598, 599, 614, 647, 660, 667, 669, 673, 674, 675, 691, 694, 697, 703, 705, 708, 711, 717, 725, 743, 814, 844, 845, 846, 868, 869, 871, 878, 887], "config": [0, 55, 210, 233, 541, 603, 614], "except": [0, 143, 155, 191, 233, 541, 568, 614, 869, 877, 887], "test": [0, 92, 541, 564, 571, 614], "util": [0, 502, 541, 555, 614], "sql": [0, 43, 99, 154, 233, 541], "These": [1, 116, 333, 531, 720], "allow": [1, 46, 69, 100, 102, 103, 104, 105, 111, 112, 152, 155, 156, 178, 179, 180, 212, 233, 325, 403, 418, 458, 532, 567, 568, 572, 590, 591, 604, 614, 712, 789, 804, 806, 849, 887], "you": [1, 29, 55, 78, 79, 80, 81, 83, 87, 89, 90, 92, 97, 100, 107, 115, 118, 125, 129, 152, 155, 165, 197, 201, 215, 233, 245, 262, 291, 292, 293, 344, 350, 380, 403, 408, 409, 410, 411, 412, 414, 415, 416, 444, 447, 458, 482, 491, 500, 532, 547, 552, 564, 568, 571, 589, 591, 608, 614, 622, 642, 673, 674, 675, 789, 835, 838, 849, 869, 877, 887], "regist": [1, 56, 57, 58, 59], "custom": [1, 56, 57, 58, 59, 118, 215, 233, 245, 280, 380, 407, 481, 507, 532, 572, 608, 614, 623, 660, 793, 887], "dedic": [1, 152, 179, 233], "namespac": [1, 232, 531, 541, 613], "underli": [1, 66, 73, 78, 79, 80, 81, 83, 97, 111, 112, 129, 152, 153, 179, 193, 233, 284, 307, 308, 309, 310, 313, 315, 316, 318, 320, 322, 323, 326, 327, 329, 335, 336, 337, 339, 403, 417, 435, 437, 532, 622, 663, 690, 691, 692, 693, 696, 698, 702, 704, 707, 709, 710, 713, 714, 716, 722, 723, 724, 726, 789, 803, 814, 826, 828, 865, 869, 887], "polar": [1, 233, 531, 532, 541, 614, 887, 893, 894], "class": [1, 2, 3, 4, 6, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 82, 109, 110, 197, 198, 233, 532, 541, 614, 868, 869, 887, 893], "without": [1, 64, 91, 94, 98, 101, 102, 204, 233, 302, 328, 408, 409, 410, 411, 412, 414, 415, 416, 517, 532, 683, 688, 715, 887], "requir": [1, 29, 82, 107, 108, 167, 168, 198, 210, 233, 341, 342, 343, 423, 458, 473, 532, 591, 603, 614, 730, 731, 732, 813, 849, 869, 873, 887], "subclass": [1, 233], "mixin": 1, "expr": [1, 55, 56, 57, 58, 59, 60, 63, 65, 128, 130, 132, 139, 140, 141, 154, 165, 170, 178, 182, 188, 209, 210, 213, 233, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 532, 533, 536, 537, 538, 554, 556, 558, 561, 562, 563, 567, 581, 586, 588, 593, 602, 603, 607, 614, 642, 683, 692, 736, 812, 860, 887], "ar": [1, 9, 15, 29, 46, 65, 71, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 97, 100, 101, 102, 103, 104, 107, 108, 110, 111, 114, 116, 118, 125, 127, 130, 134, 140, 141, 152, 155, 156, 161, 162, 168, 178, 179, 194, 198, 205, 233, 242, 280, 298, 300, 301, 305, 306, 328, 333, 340, 359, 361, 363, 364, 365, 367, 368, 369, 372, 401, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 425, 428, 430, 431, 444, 447, 465, 482, 483, 488, 518, 525, 526, 528, 531, 532, 533, 536, 537, 538, 541, 552, 556, 562, 563, 564, 568, 571, 572, 576, 577, 580, 583, 590, 591, 604, 614, 620, 622, 660, 681, 682, 715, 720, 728, 729, 742, 751, 754, 755, 756, 757, 758, 759, 765, 787, 791, 793, 799, 816, 819, 835, 838, 858, 869, 877, 879, 881, 883, 887, 890, 891, 892], "all": [1, 6, 12, 15, 20, 23, 30, 62, 63, 65, 78, 80, 82, 83, 84, 89, 90, 91, 92, 93, 97, 100, 101, 103, 104, 109, 110, 112, 125, 131, 143, 148, 150, 152, 153, 156, 161, 164, 165, 173, 178, 179, 187, 191, 196, 202, 205, 233, 243, 244, 262, 267, 277, 280, 282, 296, 302, 344, 354, 355, 358, 361, 364, 368, 369, 371, 374, 376, 380, 381, 390, 394, 398, 401, 406, 423, 429, 436, 442, 443, 446, 448, 449, 451, 457, 464, 476, 486, 498, 520, 532, 541, 547, 550, 552, 555, 557, 572, 576, 580, 589, 592, 598, 604, 614, 642, 647, 657, 660, 683, 749, 762, 787, 820, 827, 833, 834, 837, 839, 840, 842, 848, 887], "support": [1, 29, 63, 78, 79, 80, 81, 82, 83, 91, 92, 99, 101, 109, 112, 116, 153, 187, 210, 233, 275, 429, 452, 458, 532, 592, 603, 614, 655, 820, 843, 849, 887], "target": [1, 61, 441, 458, 832, 849], "thi": [1, 6, 23, 25, 27, 29, 45, 46, 55, 60, 62, 63, 64, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 91, 92, 93, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 118, 125, 127, 129, 134, 139, 140, 141, 142, 146, 148, 150, 152, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 173, 178, 179, 180, 182, 185, 187, 189, 190, 193, 195, 197, 198, 201, 202, 204, 205, 206, 207, 209, 210, 211, 213, 215, 232, 233, 242, 244, 245, 254, 256, 262, 267, 280, 289, 296, 302, 307, 308, 315, 325, 328, 334, 337, 344, 346, 357, 358, 359, 363, 374, 379, 380, 385, 386, 392, 393, 395, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 420, 422, 423, 424, 429, 430, 431, 445, 446, 450, 451, 457, 458, 461, 462, 472, 473, 474, 475, 476, 479, 482, 487, 489, 491, 493, 498, 499, 500, 502, 517, 521, 532, 541, 542, 544, 547, 552, 555, 561, 562, 563, 565, 568, 572, 576, 577, 580, 583, 586, 588, 589, 590, 591, 592, 598, 602, 603, 604, 605, 606, 608, 613, 614, 622, 623, 632, 635, 642, 647, 669, 683, 688, 690, 691, 692, 698, 712, 715, 721, 724, 729, 734, 741, 742, 747, 748, 753, 754, 760, 763, 766, 770, 771, 772, 773, 775, 776, 778, 779, 781, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 797, 800, 801, 802, 804, 807, 808, 809, 812, 813, 814, 815, 820, 821, 823, 836, 837, 841, 842, 848, 849, 852, 853, 856, 857, 858, 865, 867, 868, 869, 870, 872, 873, 876, 877, 887], "featur": [1, 29, 46, 61, 233], "i": [1, 12, 25, 27, 28, 46, 55, 61, 62, 63, 64, 65, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 86, 89, 90, 91, 93, 97, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 118, 125, 127, 135, 138, 139, 140, 141, 142, 146, 147, 149, 151, 152, 153, 155, 156, 159, 161, 162, 165, 167, 169, 170, 178, 179, 180, 187, 190, 193, 195, 201, 202, 204, 205, 210, 213, 215, 232, 233, 242, 243, 244, 245, 262, 265, 275, 279, 280, 302, 309, 325, 328, 333, 341, 342, 343, 346, 355, 357, 359, 372, 380, 386, 395, 401, 403, 405, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 424, 425, 428, 429, 430, 431, 435, 436, 441, 442, 443, 445, 446, 450, 451, 452, 455, 457, 458, 461, 476, 482, 483, 487, 489, 491, 492, 493, 500, 506, 517, 521, 532, 547, 552, 555, 561, 562, 563, 566, 568, 570, 572, 576, 577, 580, 589, 590, 591, 592, 598, 603, 606, 608, 614, 621, 622, 623, 642, 645, 655, 659, 683, 692, 712, 715, 720, 729, 730, 731, 732, 734, 742, 743, 746, 747, 748, 750, 760, 761, 763, 764, 765, 787, 789, 791, 804, 805, 806, 807, 808, 809, 815, 816, 819, 820, 823, 826, 827, 832, 833, 834, 836, 837, 841, 842, 843, 846, 848, 849, 852, 865, 869, 875, 876, 877, 887], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 29, 46, 55, 65, 78, 80, 81, 83, 85, 87, 89, 90, 91, 92, 93, 97, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 115, 118, 130, 131, 134, 140, 141, 152, 153, 155, 159, 161, 164, 165, 169, 170, 178, 180, 188, 190, 201, 202, 205, 209, 210, 213, 215, 233, 240, 245, 262, 280, 284, 285, 289, 302, 305, 306, 337, 340, 341, 342, 343, 344, 349, 350, 358, 359, 372, 380, 384, 401, 403, 405, 408, 409, 410, 411, 412, 414, 415, 416, 418, 420, 423, 424, 428, 430, 431, 437, 438, 439, 444, 445, 450, 452, 454, 456, 458, 481, 482, 483, 486, 488, 491, 493, 500, 502, 506, 508, 511, 516, 521, 531, 532, 541, 547, 550, 556, 557, 561, 562, 563, 564, 568, 570, 571, 576, 591, 593, 598, 602, 603, 608, 614, 623, 642, 660, 663, 664, 669, 683, 724, 728, 730, 731, 732, 736, 737, 742, 765, 787, 789, 791, 804, 807, 808, 809, 813, 815, 819, 823, 828, 829, 835, 836, 841, 843, 845, 849, 860, 868, 869, 876, 877, 887], "librari": [1, 66, 73, 380, 532, 894], "author": 1, "domain": 1, "specif": [1, 23, 78, 79, 81, 83, 91, 99, 101, 111, 152, 233, 407, 458, 520, 532, 793, 849, 887], "capabl": 1, "which": [1, 15, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 80, 89, 90, 91, 92, 99, 100, 101, 107, 125, 129, 140, 141, 152, 188, 202, 233, 242, 280, 347, 359, 361, 364, 365, 367, 368, 369, 386, 408, 409, 410, 411, 412, 414, 415, 416, 532, 552, 562, 563, 590, 591, 598, 606, 614, 622, 735, 751, 755, 756, 757, 758, 759, 807, 887], "mai": [1, 29, 63, 64, 78, 79, 80, 81, 83, 89, 91, 93, 101, 102, 103, 118, 127, 129, 155, 184, 185, 204, 233, 274, 279, 280, 302, 307, 315, 328, 344, 408, 409, 410, 411, 412, 414, 415, 416, 421, 422, 458, 491, 492, 500, 515, 532, 568, 572, 587, 588, 591, 605, 608, 614, 622, 654, 659, 683, 690, 698, 715, 729, 811, 812, 849, 887], "exist": [1, 78, 91, 101, 111, 209, 210, 233, 309, 602, 603, 614, 692], "belong": [1, 140, 233, 562, 614], "core": [1, 82, 198, 233], "cannot": [1, 89, 90, 107, 118, 180, 215, 233, 245, 284, 418, 437, 454, 532, 589, 608, 614, 663, 804, 828, 845, 887], "overrid": [1, 78, 79, 80, 81, 82, 83, 109, 110, 112, 210, 233, 603, 614], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 32, 40, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 64, 65, 78, 79, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 109, 110, 111, 112, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 136, 138, 139, 140, 141, 143, 145, 152, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 240, 241, 245, 259, 260, 265, 266, 267, 275, 278, 280, 304, 308, 325, 328, 331, 333, 334, 338, 344, 346, 347, 348, 350, 352, 357, 363, 366, 381, 385, 387, 395, 398, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 422, 423, 430, 431, 462, 463, 464, 467, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 532, 536, 547, 548, 549, 550, 551, 552, 554, 555, 558, 560, 561, 562, 563, 565, 567, 568, 576, 577, 580, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 598, 599, 604, 605, 606, 608, 609, 610, 614, 619, 640, 647, 660, 667, 684, 691, 712, 715, 718, 720, 721, 725, 734, 735, 737, 770, 773, 778, 779, 790, 807, 808, 853, 855, 867, 887, 890], "dt": [1, 55, 141, 233, 458, 538, 563, 614, 849, 892], "attempt": [1, 197, 233, 869, 887], "do": [1, 55, 62, 100, 129, 155, 193, 201, 204, 233, 262, 302, 446, 451, 457, 479, 532, 547, 568, 572, 580, 589, 590, 591, 614, 622, 642, 683, 837, 842, 848, 869, 877, 887], "so": [1, 46, 99, 100, 101, 138, 140, 141, 170, 233, 265, 446, 451, 457, 483, 562, 563, 614, 645, 837, 842, 848], "rais": [1, 11, 15, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 107, 108, 178, 233, 279, 284, 385, 397, 435, 437, 458, 506, 532, 659, 663, 826, 828, 849, 869, 877, 887], "an": [1, 56, 58, 59, 62, 65, 66, 69, 70, 73, 78, 89, 90, 91, 92, 97, 99, 100, 101, 103, 110, 111, 112, 118, 119, 120, 127, 130, 132, 134, 140, 141, 152, 153, 155, 165, 167, 170, 176, 178, 193, 197, 204, 215, 233, 241, 242, 245, 262, 265, 279, 280, 284, 288, 291, 292, 293, 297, 298, 299, 300, 301, 302, 309, 337, 347, 350, 371, 380, 381, 386, 399, 407, 408, 409, 410, 411, 412, 414, 415, 416, 435, 437, 442, 458, 467, 482, 486, 497, 502, 506, 515, 517, 532, 541, 545, 546, 547, 550, 555, 558, 562, 563, 568, 572, 580, 589, 593, 604, 608, 614, 642, 645, 659, 663, 667, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 692, 724, 729, 735, 793, 794, 795, 796, 797, 798, 800, 801, 802, 807, 808, 826, 828, 833, 849, 869, 877, 887], "attributeerror": 1, "howev": [1, 80, 127, 233, 729, 887], "can": [1, 55, 65, 70, 80, 89, 90, 92, 93, 100, 102, 103, 110, 111, 112, 118, 126, 134, 139, 140, 165, 170, 188, 201, 204, 210, 213, 215, 233, 245, 262, 280, 298, 301, 302, 325, 333, 344, 347, 358, 390, 403, 408, 409, 410, 411, 412, 414, 415, 416, 420, 423, 425, 428, 443, 446, 451, 457, 476, 479, 482, 486, 493, 498, 502, 508, 521, 531, 532, 547, 562, 593, 603, 605, 608, 614, 623, 642, 660, 683, 712, 720, 735, 774, 789, 807, 808, 809, 813, 816, 819, 834, 837, 842, 848, 887], "other": [1, 15, 65, 89, 90, 92, 100, 107, 108, 125, 129, 135, 154, 155, 161, 162, 178, 231, 233, 244, 259, 291, 292, 293, 304, 363, 431, 471, 532, 541, 552, 567, 568, 576, 577, 604, 614, 622, 639, 673, 674, 675, 686, 754, 806, 871, 878, 886, 887], "onli": [1, 15, 23, 46, 55, 61, 63, 89, 90, 91, 92, 93, 97, 100, 101, 103, 104, 105, 111, 112, 116, 118, 125, 139, 152, 155, 159, 188, 190, 233, 240, 290, 291, 292, 293, 325, 353, 403, 474, 516, 520, 532, 547, 552, 564, 568, 571, 593, 614, 670, 673, 674, 675, 712, 740, 789, 865, 887], "gener": [1, 99, 109, 110, 111, 112, 180, 201, 209, 233, 280, 418, 424, 532, 602, 614, 660, 804, 815, 887], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 532, 542, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 614, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 646, 647, 649, 654, 655, 658, 660, 667, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 729, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 767, 770, 771, 772, 773, 774, 775, 776, 782, 783, 784, 786, 787, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 815, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 887], "register_expr_namespac": [1, 56, 58, 59], "greet": 1, "def": [1, 56, 57, 58, 59, 110, 111, 112, 169, 201, 233, 579, 614], "__init__": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 109], "self": [1, 56, 57, 58, 59, 62, 395, 532, 547, 555, 580, 589, 614, 622, 807, 808, 878, 887], "_expr": [1, 57], "hello": [1, 446, 451, 457, 479, 647, 837, 842, 848], "return": [1, 23, 25, 27, 28, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 71, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 115, 118, 119, 123, 125, 126, 127, 128, 130, 131, 134, 143, 145, 151, 152, 153, 154, 156, 157, 164, 165, 167, 168, 169, 170, 178, 179, 180, 191, 192, 198, 201, 202, 209, 210, 212, 213, 215, 218, 222, 227, 233, 242, 243, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 260, 263, 265, 266, 267, 278, 279, 283, 285, 294, 295, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 339, 346, 356, 359, 361, 362, 363, 364, 365, 367, 368, 369, 375, 379, 386, 390, 404, 405, 418, 419, 425, 426, 427, 434, 436, 438, 440, 441, 442, 443, 444, 445, 447, 450, 452, 453, 454, 455, 461, 466, 467, 468, 469, 470, 472, 474, 475, 476, 481, 482, 486, 494, 495, 496, 502, 504, 506, 507, 517, 522, 524, 532, 547, 550, 552, 553, 555, 564, 570, 571, 572, 579, 580, 589, 590, 591, 597, 598, 602, 603, 606, 609, 610, 614, 619, 620, 621, 623, 630, 631, 633, 634, 637, 638, 640, 643, 645, 646, 647, 658, 659, 662, 664, 684, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 726, 729, 734, 742, 744, 749, 751, 752, 754, 755, 756, 757, 758, 759, 762, 764, 767, 774, 791, 792, 804, 805, 806, 808, 816, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 838, 841, 843, 844, 845, 846, 849, 852, 859, 861, 872, 874, 878, 887], "lit": [1, 87, 115, 283, 371, 491, 493, 500, 521, 524, 532, 662, 737, 887], "alia": [1, 55, 57, 59, 140, 141, 157, 203, 210, 233, 245, 256, 262, 291, 292, 293, 297, 298, 299, 300, 301, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 350, 352, 357, 362, 363, 371, 374, 375, 388, 395, 396, 403, 419, 435, 436, 439, 442, 444, 447, 452, 454, 455, 456, 471, 472, 478, 484, 485, 487, 488, 493, 496, 497, 501, 516, 520, 521, 532, 562, 563, 565, 571, 599, 603, 607, 614, 635, 642, 690, 691, 695, 712, 719, 724, 725, 767, 845, 846, 887], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 446, 451, 457, 647, 837, 842, 848], "select": [1, 55, 56, 57, 58, 60, 88, 89, 90, 91, 93, 97, 99, 100, 102, 118, 151, 155, 165, 169, 178, 187, 199, 203, 205, 233, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 280, 281, 282, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 351, 353, 354, 355, 357, 358, 360, 361, 363, 364, 366, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 445, 446, 450, 451, 453, 454, 455, 457, 459, 460, 462, 463, 464, 465, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 481, 482, 484, 486, 487, 489, 490, 493, 496, 498, 499, 501, 502, 504, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 532, 548, 565, 568, 579, 592, 599, 604, 606, 614, 642, 660, 807, 808, 820, 832, 834, 860, 887], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 76, 78, 79, 80, 81, 82, 83, 84, 87, 100, 102, 111, 112, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 154, 155, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 180, 182, 184, 185, 187, 188, 189, 190, 191, 192, 194, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 488, 489, 490, 493, 496, 497, 498, 499, 501, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 532, 545, 547, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 608, 609, 610, 614, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 641, 642, 643, 646, 647, 649, 654, 655, 658, 660, 667, 669, 670, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 749, 751, 754, 755, 756, 757, 758, 759, 762, 764, 767, 774, 782, 783, 784, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 815, 816, 817, 818, 820, 821, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 857, 859, 860, 861, 862, 863, 866, 867, 871, 873, 874, 875, 878, 887], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 92, 99, 100, 102, 106, 107, 108, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 240, 241, 242, 245, 254, 255, 256, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 322, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 374, 376, 377, 378, 379, 381, 390, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 430, 431, 432, 435, 438, 439, 441, 444, 447, 452, 453, 454, 455, 456, 462, 463, 464, 466, 467, 468, 472, 474, 475, 476, 478, 479, 484, 485, 486, 487, 488, 489, 490, 493, 497, 498, 499, 501, 504, 506, 508, 509, 510, 511, 513, 517, 518, 519, 520, 521, 522, 523, 524, 532, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 614, 619, 622, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 641, 642, 643, 646, 649, 654, 655, 658, 660, 667, 669, 670, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 694, 695, 696, 699, 700, 701, 703, 705, 706, 707, 709, 711, 713, 715, 716, 719, 720, 723, 724, 725, 729, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 782, 783, 784, 786, 787, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 815, 817, 818, 819, 820, 821, 823, 829, 830, 832, 835, 838, 843, 847, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 873, 874, 875, 876, 878, 887], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90, 91, 99, 100, 101, 102, 106, 107, 108, 109, 111, 112, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 532, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 614, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 645, 646, 649, 654, 655, 658, 660, 667, 669, 670, 671, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 730, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 766, 767, 770, 771, 772, 773, 774, 775, 776, 782, 783, 784, 786, 787, 790, 791, 792, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 832, 834, 845, 846, 849, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 887], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 78, 79, 80, 81, 82, 83, 84, 99, 100, 102, 106, 107, 108, 111, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 243, 244, 245, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 304, 308, 309, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 333, 334, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 434, 436, 439, 442, 443, 444, 446, 447, 448, 449, 451, 452, 454, 455, 456, 457, 459, 460, 462, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 484, 485, 486, 487, 488, 489, 490, 493, 496, 497, 498, 499, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 532, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 614, 619, 622, 623, 625, 629, 630, 631, 632, 633, 634, 641, 642, 643, 646, 647, 649, 654, 655, 658, 660, 669, 670, 671, 676, 677, 680, 681, 682, 683, 684, 686, 692, 696, 700, 701, 707, 709, 714, 715, 716, 720, 723, 726, 728, 729, 730, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 782, 783, 784, 786, 787, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 815, 817, 819, 820, 821, 822, 823, 825, 827, 833, 834, 837, 838, 839, 840, 842, 845, 846, 848, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 887], "column_0": [1, 78, 118, 201, 233], "register_dataframe_namespac": [1, 57, 58, 59], "split": [1, 56, 153, 167, 213, 233, 454, 455, 845, 846], "splitfram": [1, 56], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 56, 57, 60, 78, 79, 80, 81, 82, 83, 84, 90, 100, 110, 111, 112, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 489, 490, 493, 496, 497, 498, 499, 501, 502, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 532, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 592, 593, 594, 595, 596, 598, 599, 600, 605, 606, 608, 609, 610, 614, 642, 660, 669, 832, 834, 840, 845, 846, 867, 887], "_df": [1, 56], "by_alternate_row": 1, "list": [1, 32, 55, 56, 58, 62, 64, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 93, 97, 99, 100, 101, 110, 111, 112, 121, 126, 127, 128, 132, 137, 140, 145, 152, 164, 167, 178, 179, 188, 194, 195, 201, 202, 203, 204, 210, 214, 233, 240, 259, 261, 262, 263, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 344, 346, 352, 380, 386, 387, 395, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 422, 430, 431, 442, 453, 462, 463, 467, 486, 487, 493, 497, 508, 511, 520, 521, 532, 548, 551, 552, 553, 554, 558, 562, 576, 598, 599, 603, 604, 614, 636, 639, 641, 642, 643, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 729, 734, 738, 741, 754, 791, 793, 794, 795, 796, 797, 798, 800, 801, 802, 805, 833, 844, 855, 860, 868, 887], "with_row_count": [1, 233, 614, 808, 887], "name": [1, 13, 17, 19, 27, 45, 56, 57, 58, 59, 64, 65, 68, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 103, 104, 105, 108, 109, 110, 111, 112, 118, 121, 124, 125, 133, 136, 138, 152, 154, 155, 161, 170, 174, 178, 179, 181, 194, 200, 201, 203, 209, 210, 211, 212, 233, 241, 245, 280, 328, 333, 344, 371, 381, 385, 387, 398, 462, 463, 464, 479, 480, 486, 490, 493, 498, 504, 505, 508, 511, 513, 514, 516, 518, 521, 522, 532, 548, 551, 567, 568, 576, 583, 585, 593, 599, 603, 605, 606, 607, 614, 619, 660, 672, 715, 720, 790, 853, 855, 867, 870, 887], "n": [1, 10, 12, 20, 28, 32, 33, 56, 57, 58, 59, 65, 86, 87, 89, 90, 100, 115, 118, 129, 140, 143, 153, 157, 167, 180, 191, 192, 198, 218, 227, 233, 261, 266, 278, 302, 303, 307, 309, 312, 332, 337, 347, 356, 375, 396, 404, 418, 428, 454, 455, 466, 468, 472, 502, 504, 516, 522, 532, 547, 562, 564, 571, 596, 597, 609, 610, 614, 622, 641, 646, 658, 683, 685, 690, 692, 695, 719, 724, 735, 744, 767, 782, 804, 819, 823, 845, 846, 859, 861, 872, 876, 887], "filter": [1, 56, 91, 100, 101, 102, 125, 149, 215, 233, 439, 456, 478, 482, 532, 552, 555, 565, 608, 614, 807, 887], "col": [1, 25, 55, 56, 57, 58, 60, 81, 83, 100, 110, 111, 118, 132, 139, 140, 141, 149, 151, 165, 169, 178, 182, 188, 203, 210, 213, 233, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 276, 277, 280, 281, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 350, 351, 352, 353, 357, 358, 359, 360, 362, 363, 365, 366, 367, 370, 371, 372, 373, 377, 378, 379, 382, 383, 384, 389, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 487, 488, 493, 496, 499, 501, 502, 503, 508, 511, 514, 520, 521, 524, 532, 558, 561, 562, 563, 565, 579, 586, 593, 599, 603, 604, 607, 614, 642, 660, 669, 712, 791, 807, 808, 832, 834, 849, 887], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 29, 55, 56, 57, 59, 60, 64, 84, 89, 90, 92, 93, 97, 99, 100, 102, 103, 104, 105, 106, 109, 110, 111, 112, 115, 118, 119, 120, 122, 123, 126, 130, 131, 134, 135, 137, 138, 140, 142, 146, 151, 152, 153, 154, 156, 158, 159, 160, 163, 164, 165, 166, 168, 171, 172, 176, 180, 181, 182, 185, 187, 188, 189, 190, 196, 199, 201, 204, 205, 206, 209, 210, 211, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 262, 265, 271, 280, 288, 290, 292, 293, 294, 295, 297, 302, 305, 306, 313, 316, 317, 319, 320, 324, 329, 330, 341, 342, 343, 345, 346, 348, 349, 353, 355, 358, 361, 364, 365, 367, 368, 369, 371, 372, 377, 378, 380, 382, 383, 384, 389, 392, 393, 394, 396, 397, 400, 401, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 423, 425, 426, 427, 428, 432, 433, 441, 461, 465, 469, 470, 471, 477, 482, 484, 485, 487, 490, 491, 493, 497, 500, 509, 510, 513, 514, 518, 521, 523, 524, 532, 545, 546, 551, 553, 556, 557, 562, 567, 570, 575, 580, 581, 585, 586, 588, 589, 591, 593, 594, 600, 602, 603, 604, 605, 608, 614, 624, 625, 626, 627, 628, 629, 630, 632, 634, 642, 645, 667, 670, 672, 677, 678, 683, 684, 686, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 716, 717, 728, 730, 731, 732, 734, 736, 740, 743, 751, 753, 755, 756, 757, 758, 759, 764, 765, 771, 772, 782, 786, 787, 793, 795, 796, 798, 799, 800, 802, 804, 816, 817, 818, 822, 823, 825, 832, 834, 852, 862, 863, 866, 870, 871, 876, 877, 887], "drop": [1, 80, 118, 124, 125, 202, 233, 261, 303, 305, 306, 532, 552, 598, 614, 641, 685, 687, 887], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 12, 13, 16, 17, 19, 27, 46, 55, 56, 63, 64, 65, 68, 72, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 101, 103, 104, 105, 107, 111, 118, 123, 124, 125, 126, 128, 133, 136, 138, 139, 140, 141, 145, 146, 152, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 178, 179, 181, 182, 188, 189, 190, 194, 196, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211, 213, 233, 242, 243, 245, 254, 256, 259, 263, 279, 280, 309, 310, 313, 315, 316, 318, 320, 322, 323, 326, 327, 329, 335, 336, 339, 344, 346, 350, 352, 371, 385, 387, 395, 398, 402, 404, 408, 409, 410, 411, 412, 414, 415, 416, 423, 430, 431, 440, 454, 455, 458, 464, 478, 479, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 532, 551, 552, 553, 554, 561, 562, 563, 567, 568, 572, 573, 574, 575, 576, 578, 579, 581, 583, 585, 586, 593, 594, 595, 598, 599, 600, 602, 603, 604, 605, 606, 614, 620, 621, 639, 643, 659, 693, 696, 698, 702, 704, 707, 709, 710, 713, 714, 716, 722, 723, 726, 734, 813, 831, 845, 846, 857, 867, 887], "txt": 1, "utf8": [1, 8, 15, 46, 80, 89, 90, 100, 109, 126, 127, 134, 181, 197, 233, 267, 346, 434, 438, 441, 442, 443, 444, 452, 453, 454, 455, 458, 486, 488, 532, 553, 585, 614, 647, 718, 734, 763, 825, 829, 832, 833, 834, 835, 843, 844, 845, 846, 849, 869, 887], "register_lazyframe_namespac": [1, 56, 57, 59], "dtypeoper": [1, 58], "ldf": [1, 58, 544, 546, 551, 552, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 583, 584, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 614], "_ldf": [1, 58], "upcast_integer_typ": [1, 58], "with_column": [1, 58, 141, 169, 233, 245, 262, 288, 289, 291, 292, 293, 298, 301, 355, 358, 359, 362, 365, 367, 368, 369, 371, 395, 396, 439, 444, 447, 448, 449, 452, 454, 455, 456, 458, 461, 463, 471, 482, 485, 487, 488, 493, 497, 520, 521, 524, 532, 563, 579, 614, 642, 669, 849], "tp": [1, 58], "cast": [1, 57, 58, 78, 114, 134, 140, 141, 169, 198, 233, 244, 289, 300, 301, 307, 308, 403, 443, 461, 465, 471, 488, 532, 562, 563, 579, 614, 669, 681, 682, 690, 691, 789, 834, 858, 867, 871, 887], "int64": [1, 27, 57, 58, 87, 115, 126, 134, 140, 141, 169, 181, 193, 233, 300, 301, 311, 314, 317, 319, 321, 324, 330, 344, 403, 465, 471, 482, 486, 498, 532, 553, 562, 563, 579, 585, 606, 614, 681, 682, 694, 697, 703, 705, 708, 711, 717, 789, 806, 858, 869, 870, 871, 887], "int8": [1, 58, 134, 233, 300, 301, 465, 532, 681, 682, 792, 858, 887], "int16": [1, 58, 300, 301, 465, 532, 681, 682, 858, 887], "int32": [1, 58, 80, 111, 112, 140, 141, 153, 233, 288, 315, 339, 471, 532, 562, 563, 614, 698, 726, 871, 887], "b": [1, 24, 25, 26, 29, 46, 58, 63, 78, 79, 80, 81, 82, 83, 84, 92, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 241, 244, 245, 255, 259, 262, 267, 269, 282, 288, 289, 296, 304, 305, 306, 344, 348, 349, 350, 352, 354, 355, 358, 361, 364, 365, 366, 367, 368, 369, 371, 374, 376, 381, 390, 394, 398, 406, 423, 429, 440, 448, 462, 463, 464, 474, 476, 478, 479, 484, 485, 486, 488, 489, 490, 493, 497, 498, 499, 501, 504, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 532, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 567, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 609, 610, 614, 622, 642, 669, 684, 686, 728, 729, 737, 754, 763, 790, 806, 831, 839, 857, 874, 887], "4": [1, 12, 20, 24, 25, 26, 29, 46, 55, 56, 57, 58, 59, 60, 63, 65, 78, 79, 80, 81, 82, 83, 84, 100, 106, 107, 108, 112, 118, 119, 120, 122, 125, 128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 161, 164, 165, 167, 169, 170, 171, 175, 179, 182, 183, 191, 192, 193, 194, 195, 196, 200, 201, 203, 204, 205, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 244, 245, 255, 261, 262, 263, 266, 274, 275, 278, 282, 288, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 309, 310, 314, 320, 321, 322, 326, 327, 328, 329, 330, 333, 335, 336, 339, 345, 348, 349, 352, 353, 354, 356, 357, 358, 359, 368, 369, 371, 374, 376, 378, 381, 395, 397, 398, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 421, 422, 425, 429, 430, 431, 432, 435, 444, 445, 447, 450, 452, 454, 455, 458, 464, 466, 467, 468, 471, 472, 484, 485, 486, 488, 489, 490, 493, 497, 499, 504, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 524, 532, 545, 546, 547, 550, 552, 554, 555, 556, 557, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 605, 608, 609, 610, 614, 622, 625, 632, 641, 642, 643, 646, 654, 655, 658, 670, 671, 673, 683, 684, 686, 696, 697, 702, 704, 707, 708, 709, 710, 714, 715, 716, 717, 718, 720, 722, 723, 736, 737, 746, 749, 754, 756, 757, 758, 759, 762, 775, 782, 783, 784, 787, 796, 798, 799, 800, 801, 802, 804, 806, 816, 820, 821, 826, 835, 836, 838, 841, 843, 845, 846, 849, 857, 860, 861, 871, 878, 887], "c": [1, 24, 25, 26, 29, 46, 56, 58, 80, 82, 92, 100, 110, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 133, 134, 135, 137, 138, 139, 140, 143, 145, 146, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 174, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 193, 197, 198, 199, 201, 204, 206, 207, 210, 216, 217, 218, 219, 220, 221, 223, 226, 227, 233, 245, 259, 267, 269, 371, 423, 454, 458, 474, 476, 479, 484, 485, 486, 488, 489, 490, 493, 499, 501, 504, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 532, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 561, 562, 567, 570, 576, 580, 583, 584, 585, 586, 589, 592, 593, 603, 604, 609, 610, 614, 684, 763, 845, 849, 874, 887], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 29, 55, 56, 58, 59, 60, 63, 64, 78, 80, 81, 82, 83, 86, 87, 90, 106, 111, 112, 115, 118, 119, 120, 122, 128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 155, 156, 157, 159, 161, 164, 165, 170, 171, 172, 175, 179, 183, 191, 192, 193, 194, 195, 200, 204, 205, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 240, 262, 263, 266, 271, 277, 278, 288, 289, 290, 291, 292, 293, 302, 304, 308, 309, 311, 329, 330, 331, 334, 335, 338, 343, 344, 347, 353, 356, 359, 362, 365, 367, 368, 369, 371, 376, 395, 396, 398, 400, 401, 405, 406, 407, 408, 409, 411, 415, 417, 419, 425, 436, 443, 444, 447, 461, 464, 466, 468, 472, 484, 487, 489, 490, 493, 496, 497, 498, 499, 504, 508, 509, 510, 511, 512, 513, 518, 519, 521, 522, 523, 532, 545, 546, 547, 550, 554, 555, 556, 557, 559, 561, 562, 563, 564, 566, 568, 569, 570, 571, 574, 575, 576, 580, 587, 588, 589, 592, 594, 595, 596, 597, 601, 603, 605, 608, 609, 610, 614, 622, 625, 629, 632, 642, 643, 646, 649, 658, 669, 671, 673, 679, 683, 684, 686, 691, 692, 693, 694, 716, 717, 722, 723, 725, 732, 735, 746, 775, 782, 783, 784, 786, 787, 793, 794, 795, 797, 798, 801, 804, 806, 816, 822, 827, 834, 835, 872, 878, 887], "6": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 78, 80, 81, 82, 83, 84, 118, 121, 123, 124, 125, 126, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 151, 152, 154, 157, 158, 159, 160, 161, 163, 166, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 203, 204, 205, 206, 207, 210, 211, 213, 218, 226, 227, 233, 245, 263, 282, 288, 300, 301, 304, 309, 325, 327, 329, 340, 348, 349, 354, 356, 358, 376, 395, 399, 401, 402, 405, 408, 409, 410, 411, 412, 414, 415, 416, 419, 430, 431, 436, 440, 444, 447, 466, 468, 479, 493, 497, 520, 521, 532, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 561, 562, 563, 564, 566, 567, 569, 571, 572, 576, 580, 583, 585, 586, 587, 588, 589, 592, 593, 596, 597, 599, 601, 603, 605, 606, 609, 610, 614, 622, 643, 671, 677, 681, 682, 684, 686, 712, 723, 775, 787, 796, 798, 799, 800, 802, 806, 827, 831, 835, 858, 887], "7": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 65, 121, 122, 123, 124, 126, 128, 132, 133, 135, 140, 141, 143, 145, 147, 154, 158, 159, 160, 163, 166, 168, 172, 174, 176, 178, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 197, 198, 199, 204, 205, 206, 207, 233, 301, 308, 309, 310, 326, 328, 333, 336, 339, 345, 356, 358, 395, 405, 409, 415, 466, 468, 520, 521, 532, 548, 551, 553, 554, 558, 562, 563, 564, 566, 567, 571, 581, 583, 585, 586, 593, 596, 597, 606, 614, 629, 692, 693, 698, 715, 720, 723, 801, 887], "float32": [1, 25, 58, 134, 233, 750, 887], "lazi": [1, 58, 63, 65, 87, 100, 111, 115, 155, 169, 213, 233, 245, 280, 395, 482, 502, 532, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 608, 614], "i16": [1, 58, 423, 532], "i32": [1, 58, 80, 111, 182, 233, 288, 315, 339, 423, 524, 532, 586, 614, 698, 726], "f32": [1, 58, 233, 262, 401, 423, 497, 532, 642, 787, 887], "i64": [1, 12, 16, 56, 57, 58, 59, 63, 78, 79, 80, 81, 82, 83, 87, 100, 112, 115, 118, 119, 120, 121, 123, 125, 126, 128, 129, 131, 132, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 151, 154, 155, 157, 158, 161, 163, 167, 169, 170, 171, 174, 175, 176, 177, 180, 182, 184, 185, 187, 188, 190, 191, 192, 194, 199, 201, 202, 203, 204, 205, 207, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 223, 226, 227, 233, 241, 244, 245, 261, 262, 263, 264, 265, 266, 268, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 289, 291, 292, 293, 298, 299, 300, 301, 303, 304, 311, 312, 314, 317, 319, 321, 324, 330, 332, 344, 347, 349, 350, 351, 352, 354, 356, 357, 358, 359, 362, 365, 367, 368, 369, 371, 373, 376, 379, 380, 381, 390, 395, 396, 398, 399, 402, 403, 405, 406, 418, 420, 421, 423, 424, 425, 429, 430, 448, 449, 463, 464, 465, 466, 467, 468, 472, 473, 475, 478, 479, 486, 488, 493, 497, 498, 499, 504, 508, 511, 517, 520, 521, 522, 524, 532, 545, 547, 551, 552, 554, 555, 557, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 576, 578, 579, 580, 583, 584, 586, 587, 588, 592, 593, 595, 596, 597, 598, 599, 603, 605, 608, 609, 610, 614, 622, 623, 641, 642, 643, 646, 654, 655, 658, 669, 673, 676, 679, 680, 681, 682, 684, 691, 694, 695, 697, 703, 705, 708, 711, 717, 719, 735, 737, 738, 744, 746, 754, 767, 774, 790, 794, 797, 801, 804, 807, 808, 811, 815, 816, 820, 821, 857, 859, 860, 861, 867, 873, 875, 878, 887], "register_series_namespac": [1, 56, 57, 58], "math": [1, 59, 677, 817, 862, 887], "mathshortcut": [1, 59], "": [1, 25, 59, 64, 89, 90, 112, 123, 125, 127, 139, 140, 146, 154, 155, 175, 176, 192, 213, 233, 261, 266, 267, 274, 275, 278, 312, 331, 344, 372, 386, 390, 392, 393, 395, 396, 403, 407, 431, 444, 445, 447, 450, 452, 453, 455, 458, 461, 463, 493, 496, 498, 501, 502, 508, 511, 513, 521, 532, 552, 561, 562, 568, 597, 607, 608, 614, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 641, 643, 646, 647, 649, 654, 655, 658, 667, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 686, 691, 692, 695, 715, 720, 729, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 778, 779, 782, 783, 784, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 815, 816, 817, 818, 820, 821, 823, 826, 827, 829, 830, 831, 833, 835, 836, 837, 838, 839, 841, 842, 843, 846, 847, 848, 849, 852, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 887], "_": [1, 55, 59, 454, 845], "squar": [1, 59, 215, 372, 432, 532, 608, 765, 822, 887], "cube": [1, 59], "s2": [1, 108, 134, 233, 622, 671, 686, 754, 775, 806, 878, 887], "renam": [1, 80, 89, 90, 233, 241, 381, 388, 463, 532, 614, 855, 867, 887], "n2": 1, "in_plac": [1, 145, 186, 207, 233, 788, 790, 814, 821, 887], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 60, 62, 63, 65, 78, 82, 86, 89, 90, 91, 92, 93, 97, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 116, 119, 120, 122, 131, 134, 135, 137, 138, 140, 146, 148, 149, 150, 152, 155, 156, 159, 164, 165, 167, 170, 171, 178, 179, 188, 194, 201, 202, 203, 204, 205, 210, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 240, 242, 243, 244, 245, 260, 279, 284, 288, 297, 298, 299, 300, 301, 328, 329, 333, 340, 341, 342, 343, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 403, 413, 418, 423, 428, 430, 431, 435, 437, 439, 443, 453, 454, 456, 458, 462, 463, 467, 472, 473, 476, 481, 482, 489, 516, 518, 520, 524, 532, 545, 546, 547, 549, 550, 555, 557, 561, 562, 567, 568, 570, 572, 580, 589, 590, 591, 593, 598, 599, 603, 614, 620, 621, 622, 623, 633, 659, 663, 667, 671, 672, 715, 716, 720, 728, 730, 731, 732, 738, 742, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 775, 783, 784, 789, 799, 806, 819, 821, 826, 828, 830, 834, 844, 845, 847, 849, 869, 872, 877, 878, 887], "s3": [1, 91, 101, 102, 887], "n3": 1, "8": [1, 24, 25, 26, 27, 28, 29, 39, 52, 54, 55, 56, 58, 59, 63, 106, 110, 111, 118, 121, 122, 123, 124, 125, 126, 128, 132, 133, 135, 138, 143, 145, 154, 158, 159, 160, 163, 168, 172, 174, 176, 178, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 197, 198, 199, 204, 206, 207, 210, 233, 244, 255, 261, 262, 296, 298, 301, 302, 305, 306, 309, 358, 374, 395, 397, 398, 405, 406, 409, 410, 412, 414, 416, 423, 429, 445, 450, 458, 464, 468, 484, 489, 490, 493, 497, 499, 504, 508, 509, 510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 532, 548, 551, 552, 553, 554, 558, 564, 567, 571, 572, 580, 583, 585, 586, 593, 596, 597, 603, 606, 614, 641, 642, 683, 698, 782, 793, 796, 798, 799, 800, 802, 836, 841, 849, 887], "9": [1, 24, 25, 26, 29, 55, 63, 118, 134, 141, 143, 147, 168, 182, 191, 204, 207, 210, 213, 226, 233, 244, 255, 273, 276, 296, 298, 301, 305, 306, 309, 310, 326, 335, 336, 358, 363, 371, 374, 395, 405, 407, 409, 415, 425, 429, 468, 485, 487, 520, 532, 563, 564, 566, 571, 586, 593, 596, 603, 614, 693, 702, 704, 710, 715, 716, 720, 722, 754, 793, 801, 803, 816, 887], "27": [1, 59, 226, 301, 315, 327, 339, 397, 532], "16": [1, 36, 49, 57, 106, 140, 141, 210, 233, 298, 301, 346, 358, 409, 496, 497, 532, 562, 563, 589, 603, 614, 715, 720, 734, 782, 817, 862, 887], "64": [1, 29, 35, 38, 51, 57, 59, 233, 397, 532, 591, 614, 782, 887], "25": [1, 59, 65, 140, 141, 155, 205, 210, 233, 315, 328, 333, 339, 502, 562, 563, 568, 574, 600, 603, 614, 715, 720, 728, 782, 887], "125": [1, 59, 782, 887], "arg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 169, 198, 233, 501, 579, 614, 623, 869, 887], "ani": [2, 3, 4, 6, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 61, 78, 79, 80, 81, 83, 89, 90, 91, 92, 93, 97, 100, 101, 103, 105, 109, 111, 112, 116, 118, 125, 129, 131, 132, 134, 151, 152, 153, 167, 168, 169, 178, 179, 194, 195, 197, 198, 204, 210, 233, 245, 259, 262, 288, 329, 349, 363, 380, 388, 405, 407, 419, 422, 430, 458, 467, 481, 499, 506, 518, 532, 552, 557, 579, 603, 614, 622, 623, 639, 642, 686, 716, 737, 754, 764, 791, 793, 805, 808, 849, 860, 868, 869, 887], "kwarg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 168, 169, 198, 210, 233, 579, 603, 614, 869, 887], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 532, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 887, 893], "method": [2, 3, 4, 6, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 89, 90, 92, 109, 125, 147, 152, 165, 172, 179, 202, 209, 210, 225, 233, 242, 334, 358, 400, 401, 408, 409, 410, 411, 412, 414, 415, 416, 474, 514, 525, 526, 528, 532, 533, 536, 537, 538, 541, 552, 566, 581, 598, 602, 603, 614, 623, 721, 746, 786, 787, 798, 871, 879, 881, 883, 887, 890, 891, 892], "A": [4, 25, 43, 62, 65, 84, 89, 90, 97, 99, 100, 101, 134, 140, 155, 167, 170, 179, 194, 196, 204, 205, 233, 239, 280, 309, 311, 314, 317, 319, 321, 324, 330, 347, 361, 364, 365, 367, 380, 381, 386, 398, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 435, 436, 441, 442, 443, 461, 464, 486, 487, 497, 501, 532, 562, 568, 583, 593, 614, 660, 692, 694, 697, 703, 705, 708, 711, 717, 735, 793, 794, 795, 797, 800, 801, 802, 826, 827, 832, 833, 834, 839, 840, 849, 852, 887], "encod": [4, 54, 89, 90, 100, 196, 233, 284, 437, 663, 828], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 27, 28, 56, 65, 80, 83, 89, 90, 92, 93, 97, 100, 103, 104, 105, 107, 108, 110, 111, 112, 116, 121, 142, 152, 155, 161, 180, 187, 201, 233, 245, 275, 279, 280, 337, 338, 344, 355, 363, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 424, 428, 429, 446, 451, 452, 457, 486, 498, 532, 548, 567, 568, 572, 576, 590, 591, 592, 606, 608, 614, 622, 623, 655, 659, 660, 724, 725, 743, 754, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 808, 815, 819, 820, 837, 842, 843, 848, 869, 887], "string": [4, 5, 7, 10, 11, 15, 25, 27, 28, 32, 46, 54, 65, 89, 90, 100, 109, 110, 112, 114, 134, 140, 141, 155, 188, 204, 205, 233, 267, 286, 289, 325, 328, 333, 346, 352, 408, 409, 410, 411, 412, 414, 415, 416, 434, 435, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 486, 488, 501, 508, 511, 532, 549, 550, 560, 562, 563, 568, 606, 614, 647, 665, 669, 712, 715, 720, 734, 824, 825, 826, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 887], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 560, 582, 614], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 116], "previous": 5, "save": [5, 541], "share": [5, 46, 127, 233, 729, 887], "option": [5, 6, 7, 15, 55, 65, 89, 91, 92, 93, 97, 101, 103, 105, 106, 109, 110, 111, 112, 125, 155, 161, 165, 194, 196, 201, 205, 210, 233, 372, 407, 408, 409, 410, 411, 412, 414, 415, 416, 428, 452, 479, 481, 482, 506, 507, 520, 532, 541, 567, 568, 576, 603, 614, 765, 793, 794, 795, 796, 797, 798, 800, 801, 802, 808, 819, 843, 867, 887], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 40, 43, 45, 47, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 115, 118, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 152, 153, 154, 155, 157, 159, 161, 162, 164, 165, 167, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 182, 184, 185, 187, 188, 189, 190, 191, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 218, 225, 227, 233, 241, 244, 245, 254, 256, 259, 260, 261, 262, 265, 266, 267, 274, 275, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 312, 325, 328, 332, 333, 334, 337, 338, 340, 341, 342, 343, 344, 347, 349, 350, 354, 355, 356, 358, 359, 363, 372, 375, 377, 380, 381, 395, 396, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 466, 467, 472, 473, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 500, 501, 502, 504, 506, 507, 508, 513, 514, 515, 516, 517, 518, 520, 521, 522, 532, 547, 550, 551, 552, 555, 556, 557, 558, 560, 561, 562, 563, 564, 567, 568, 571, 572, 576, 577, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 596, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614, 619, 622, 623, 632, 635, 639, 640, 641, 642, 645, 646, 647, 654, 655, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 679, 680, 681, 682, 683, 685, 686, 690, 691, 692, 695, 712, 715, 719, 720, 721, 724, 725, 728, 729, 730, 731, 732, 735, 736, 737, 738, 743, 744, 746, 761, 765, 767, 782, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 815, 819, 820, 821, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 855, 859, 860, 867, 868, 869, 872, 873, 875, 876, 877, 878, 887], "json": [5, 7, 27, 28, 95, 96, 104, 233, 443, 541, 560, 582, 606, 614, 834], "produc": [5, 111, 112, 385, 507], "reset": [6, 116], "default": [6, 23, 24, 25, 26, 27, 28, 29, 78, 79, 80, 81, 82, 83, 87, 89, 90, 97, 100, 109, 110, 111, 112, 115, 127, 139, 141, 142, 152, 155, 161, 170, 178, 179, 180, 202, 211, 233, 275, 279, 280, 289, 340, 355, 377, 392, 393, 396, 401, 418, 424, 441, 446, 451, 452, 457, 458, 482, 483, 502, 506, 518, 532, 550, 561, 563, 568, 576, 591, 598, 606, 614, 655, 659, 660, 669, 728, 729, 743, 778, 779, 782, 787, 804, 815, 823, 832, 837, 842, 843, 848, 876, 887], "state": [6, 62, 73, 491, 541, 547, 555, 580, 589, 614], "note": [6, 15, 55, 65, 78, 79, 81, 83, 87, 89, 91, 97, 99, 101, 110, 111, 112, 115, 116, 118, 130, 139, 140, 141, 152, 154, 155, 165, 168, 169, 178, 195, 197, 201, 205, 209, 210, 233, 262, 279, 300, 301, 305, 306, 325, 328, 333, 365, 367, 408, 409, 410, 411, 412, 414, 415, 416, 428, 444, 446, 447, 451, 457, 458, 465, 491, 500, 515, 532, 547, 555, 556, 562, 563, 564, 568, 571, 583, 589, 602, 603, 614, 642, 659, 681, 682, 712, 720, 807, 808, 814, 819, 835, 837, 838, 842, 848, 849, 858, 869, 887], "oper": [6, 46, 63, 69, 70, 78, 79, 80, 81, 82, 83, 89, 97, 118, 129, 134, 139, 146, 156, 162, 165, 167, 169, 173, 193, 197, 198, 201, 204, 212, 213, 233, 240, 280, 297, 298, 299, 300, 301, 302, 371, 388, 401, 403, 479, 480, 497, 532, 555, 561, 564, 567, 571, 577, 614, 622, 679, 680, 681, 682, 683, 787, 789, 865, 868, 869, 877, 887], "remov": [6, 123, 209, 233, 344, 346, 446, 451, 457, 498, 532, 551, 602, 614, 734, 837, 842, 848, 887], "from": [6, 25, 55, 65, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 122, 123, 127, 129, 138, 140, 141, 152, 153, 155, 156, 161, 174, 178, 180, 182, 201, 202, 204, 205, 233, 297, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 344, 358, 372, 392, 393, 396, 418, 430, 431, 441, 458, 474, 476, 485, 486, 494, 495, 496, 498, 506, 518, 531, 532, 551, 555, 560, 562, 563, 568, 576, 582, 583, 586, 598, 604, 614, 622, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 729, 748, 765, 778, 779, 780, 782, 804, 832, 875, 878, 887], "environ": [6, 23], "local": [6, 91, 101, 334, 721, 783, 784, 887], "flag": [6, 109, 210, 233, 420, 532, 550, 572, 603, 614, 809, 887], "back": [6, 55, 129, 233, 622, 887], "valu": [6, 9, 10, 23, 25, 27, 40, 41, 53, 55, 63, 64, 80, 82, 89, 90, 99, 100, 102, 107, 108, 109, 110, 111, 112, 114, 116, 118, 125, 129, 130, 131, 135, 138, 140, 141, 142, 143, 147, 152, 158, 159, 160, 161, 163, 165, 167, 170, 171, 172, 174, 178, 179, 180, 184, 185, 188, 189, 190, 191, 194, 204, 205, 206, 216, 217, 219, 220, 221, 223, 224, 233, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 264, 265, 266, 268, 270, 271, 272, 274, 277, 278, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 301, 302, 303, 305, 306, 309, 310, 322, 326, 335, 341, 342, 343, 345, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 373, 374, 378, 379, 380, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 400, 401, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 448, 449, 452, 454, 455, 456, 461, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 485, 488, 489, 491, 492, 493, 499, 500, 506, 508, 509, 510, 511, 512, 515, 516, 521, 524, 532, 552, 556, 557, 562, 563, 565, 566, 573, 574, 575, 576, 578, 581, 583, 587, 588, 593, 594, 595, 600, 606, 607, 614, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 641, 644, 645, 646, 648, 650, 651, 652, 654, 658, 661, 663, 664, 665, 666, 669, 670, 673, 674, 675, 677, 678, 683, 684, 685, 687, 688, 692, 693, 709, 713, 722, 729, 730, 731, 732, 735, 736, 737, 740, 742, 743, 746, 749, 751, 752, 754, 755, 756, 757, 758, 759, 762, 770, 771, 773, 774, 776, 778, 779, 780, 781, 782, 785, 786, 787, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 816, 817, 818, 819, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 838, 839, 840, 843, 845, 846, 847, 852, 858, 860, 861, 862, 863, 871, 874, 875, 877, 878, 887], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 86, 87, 90, 91, 92, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 487, 488, 489, 490, 493, 496, 497, 498, 499, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 532, 541, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 614, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 641, 642, 643, 646, 647, 649, 654, 655, 658, 660, 667, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 729, 731, 732, 735, 736, 737, 738, 740, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 767, 770, 771, 772, 773, 774, 775, 776, 782, 783, 784, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 811, 815, 816, 817, 818, 820, 821, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 887], "current": [7, 23, 119, 120, 210, 233, 280, 328, 396, 532, 541, 545, 546, 603, 614, 672, 676, 715, 782, 887], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 262, 642], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 40, 55, 60, 62, 63, 78, 82, 89, 90, 93, 97, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 119, 120, 131, 132, 134, 135, 137, 138, 139, 140, 145, 146, 148, 149, 150, 155, 167, 170, 180, 186, 188, 194, 198, 201, 202, 203, 205, 207, 210, 217, 219, 220, 223, 233, 242, 243, 244, 245, 254, 256, 260, 262, 276, 279, 284, 288, 297, 298, 299, 300, 301, 302, 329, 340, 341, 342, 343, 347, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 380, 401, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 422, 423, 428, 430, 431, 435, 437, 439, 448, 449, 453, 454, 456, 458, 462, 463, 472, 473, 476, 481, 482, 483, 485, 491, 506, 516, 518, 520, 524, 532, 545, 547, 549, 550, 555, 557, 558, 561, 562, 567, 568, 572, 580, 589, 590, 591, 593, 598, 599, 603, 614, 620, 621, 622, 623, 632, 635, 640, 642, 656, 659, 663, 667, 672, 679, 680, 681, 682, 683, 716, 728, 730, 731, 732, 735, 738, 742, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 783, 784, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 808, 809, 814, 819, 821, 826, 828, 830, 839, 840, 844, 845, 847, 849, 868, 869, 872, 873, 875, 877, 887], "ascii": [8, 15, 445, 447, 450, 461, 836, 838, 841, 852], "charact": [8, 10, 15, 21, 25, 89, 90, 100, 233, 325, 440, 444, 445, 446, 450, 451, 453, 454, 457, 461, 580, 614, 712, 831, 835, 836, 837, 841, 842, 844, 845, 848, 852], "print": [8, 10, 12, 14, 20, 90, 106, 126, 138, 139, 153, 156, 212, 233, 357, 532, 565, 614, 754, 793, 887], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 45, 78, 89, 90, 91, 100, 101, 170, 193, 198, 204, 233], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 29, 55, 60, 62, 65, 89, 90, 92, 93, 97, 100, 104, 105, 107, 108, 109, 110, 111, 112, 119, 120, 122, 134, 135, 137, 138, 139, 140, 145, 146, 148, 149, 150, 152, 155, 156, 159, 164, 165, 167, 170, 171, 178, 179, 180, 186, 188, 194, 198, 201, 205, 207, 210, 216, 217, 219, 220, 221, 223, 226, 233, 242, 243, 245, 254, 256, 260, 262, 276, 279, 297, 298, 299, 300, 301, 302, 329, 340, 341, 342, 343, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 380, 401, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 420, 423, 428, 430, 431, 435, 439, 448, 449, 453, 454, 456, 458, 472, 473, 476, 482, 483, 491, 506, 516, 518, 520, 524, 532, 545, 546, 547, 549, 550, 555, 561, 562, 567, 568, 570, 572, 580, 589, 590, 591, 593, 603, 614, 622, 632, 635, 642, 656, 659, 667, 671, 672, 679, 680, 681, 682, 683, 716, 728, 730, 731, 732, 738, 747, 749, 751, 754, 755, 756, 757, 758, 759, 761, 762, 765, 775, 783, 784, 787, 788, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 809, 814, 819, 821, 826, 830, 839, 840, 844, 845, 847, 849, 868, 869, 872, 873, 875, 877, 878, 887], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 448, 839], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 436, 442, 827, 833, 867, 887], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 55, 57, 59, 64, 80, 102, 111, 119, 120, 122, 123, 125, 126, 130, 131, 134, 137, 138, 146, 154, 155, 159, 160, 168, 171, 172, 187, 188, 189, 206, 210, 217, 219, 220, 221, 222, 223, 225, 226, 233, 239, 246, 247, 248, 249, 250, 251, 271, 288, 290, 294, 295, 302, 305, 306, 329, 340, 341, 342, 343, 344, 345, 353, 358, 365, 367, 368, 369, 371, 372, 377, 378, 382, 383, 384, 389, 392, 393, 396, 397, 400, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 426, 427, 428, 432, 433, 469, 470, 477, 484, 485, 487, 490, 498, 509, 510, 513, 518, 519, 523, 532, 545, 551, 552, 556, 557, 567, 568, 574, 575, 581, 593, 594, 600, 603, 604, 614, 624, 625, 626, 627, 628, 629, 670, 677, 678, 683, 684, 716, 731, 732, 736, 740, 782, 793, 795, 796, 798, 799, 800, 802, 803, 817, 818, 822, 862, 863, 887], "fmt": [9, 331, 357, 458, 501, 532, 565, 614, 718, 849], "mix": [9, 458, 684, 849, 887], "control": [9, 110, 550, 614], "how": [9, 46, 63, 80, 83, 99, 125, 154, 204, 233, 261, 289, 303, 358, 404, 532, 552, 567, 614, 641, 669, 685, 887], "float": [9, 34, 35, 40, 64, 102, 107, 108, 109, 111, 112, 127, 130, 155, 172, 180, 185, 225, 233, 260, 290, 291, 292, 293, 305, 306, 329, 340, 341, 342, 343, 347, 348, 353, 358, 359, 361, 364, 365, 367, 368, 369, 377, 382, 389, 392, 393, 397, 400, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 484, 485, 493, 508, 509, 510, 511, 514, 516, 519, 521, 523, 532, 556, 568, 581, 588, 589, 614, 640, 667, 670, 673, 674, 675, 686, 716, 728, 729, 730, 731, 732, 735, 736, 740, 753, 765, 768, 770, 771, 772, 773, 778, 779, 785, 786, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 807, 808, 819, 823, 858, 876, 887], "point": [9, 34, 35, 101, 111, 112, 130, 140, 156, 180, 233, 290, 305, 306, 329, 348, 353, 365, 367, 417, 418, 532, 556, 562, 572, 583, 614, 670, 716, 736, 740, 753, 803, 804, 887], "displai": [9, 14, 18], "full": [9, 32, 61, 89, 90, 91, 100, 101], "format": [9, 11, 15, 25, 88, 89, 90, 100, 102, 128, 161, 231, 233, 328, 331, 458, 554, 560, 576, 606, 614, 718, 849, 886], "number": [9, 10, 12, 20, 21, 25, 29, 55, 74, 78, 79, 81, 83, 86, 87, 89, 90, 92, 100, 104, 110, 111, 115, 127, 128, 130, 131, 143, 152, 153, 156, 157, 164, 165, 180, 184, 185, 191, 204, 216, 218, 227, 233, 261, 266, 274, 278, 280, 282, 296, 302, 303, 313, 315, 320, 322, 329, 335, 336, 339, 341, 342, 343, 347, 349, 354, 356, 365, 367, 374, 375, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 421, 422, 424, 444, 447, 454, 455, 466, 472, 489, 504, 518, 522, 532, 554, 555, 556, 557, 564, 571, 580, 587, 588, 591, 596, 609, 610, 614, 641, 646, 654, 658, 660, 683, 685, 696, 698, 707, 709, 716, 722, 723, 726, 729, 730, 731, 732, 735, 737, 744, 753, 767, 775, 776, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 811, 812, 815, 823, 835, 838, 845, 846, 859, 872, 876, 887], "int": [10, 12, 20, 21, 25, 29, 40, 57, 80, 83, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 103, 104, 105, 109, 110, 111, 112, 113, 115, 118, 127, 130, 131, 133, 142, 143, 144, 146, 152, 153, 155, 157, 158, 159, 163, 164, 165, 176, 178, 180, 183, 184, 185, 187, 189, 190, 191, 192, 199, 204, 206, 208, 211, 218, 227, 233, 260, 261, 265, 266, 274, 275, 278, 279, 280, 282, 291, 292, 293, 302, 303, 341, 342, 343, 347, 348, 349, 354, 355, 356, 359, 375, 396, 397, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 429, 433, 441, 445, 450, 452, 454, 455, 461, 462, 463, 466, 467, 468, 472, 477, 482, 485, 489, 493, 494, 495, 496, 502, 504, 508, 510, 511, 512, 513, 516, 518, 519, 520, 521, 522, 523, 532, 555, 556, 557, 564, 568, 571, 580, 587, 588, 591, 592, 594, 596, 597, 600, 601, 605, 609, 610, 614, 630, 631, 640, 641, 645, 646, 654, 655, 658, 659, 660, 667, 671, 673, 674, 675, 683, 685, 729, 730, 731, 732, 735, 736, 737, 743, 744, 766, 767, 770, 771, 773, 775, 776, 778, 779, 780, 781, 782, 785, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 812, 815, 820, 823, 832, 836, 841, 843, 845, 846, 852, 858, 859, 860, 861, 872, 876, 887], "liter": [11, 15, 60, 65, 92, 112, 152, 158, 159, 163, 164, 167, 178, 179, 182, 190, 194, 233, 242, 243, 309, 347, 371, 402, 435, 448, 449, 482, 494, 495, 502, 506, 516, 520, 524, 532, 557, 586, 614, 620, 621, 692, 735, 807, 808, 826, 839, 840, 887], "left": [11, 65, 107, 108, 140, 141, 154, 155, 233, 341, 342, 343, 358, 359, 408, 409, 410, 411, 412, 414, 415, 416, 419, 445, 461, 471, 485, 491, 492, 500, 515, 532, 562, 563, 567, 568, 614, 730, 731, 732, 805, 836, 852, 871, 887], "center": [11, 341, 342, 343, 407, 408, 409, 410, 411, 412, 414, 415, 416, 532, 730, 731, 732, 793, 794, 795, 796, 797, 798, 800, 801, 802, 887], "right": [11, 13, 65, 89, 90, 107, 108, 140, 141, 154, 155, 233, 341, 342, 343, 359, 408, 409, 410, 411, 412, 414, 415, 416, 419, 428, 450, 485, 532, 562, 563, 567, 568, 614, 730, 731, 732, 805, 819, 841, 887], "cell": 11, "align": [11, 55, 461, 852], "keyerror": [11, 15], "recognis": [11, 15, 109], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 27, 28, 29, 46, 61, 64, 65, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 97, 100, 101, 103, 104, 105, 118, 129, 140, 141, 152, 155, 161, 165, 167, 180, 187, 197, 198, 201, 233, 245, 275, 280, 291, 292, 293, 309, 350, 372, 380, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 428, 429, 430, 431, 444, 446, 447, 451, 452, 453, 454, 455, 457, 458, 472, 479, 481, 482, 483, 489, 491, 500, 506, 518, 532, 562, 563, 567, 568, 572, 576, 583, 591, 592, 606, 608, 614, 622, 623, 655, 673, 674, 675, 692, 725, 742, 765, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 809, 815, 819, 820, 835, 837, 838, 842, 843, 844, 845, 846, 848, 849, 865, 869, 872, 877, 887], "rang": [12, 64, 65, 99, 127, 140, 153, 233, 310, 322, 326, 327, 328, 333, 335, 358, 482, 487, 494, 495, 532, 562, 614, 693, 709, 713, 714, 715, 720, 722, 729, 782, 887], "100": [12, 80, 83, 89, 90, 100, 104, 233, 461, 482, 794, 795, 797, 887], "98": [12, 146, 233, 430, 431, 467, 472, 532], "99": [12, 130, 131, 146, 149, 233, 240, 347, 349, 430, 431, 467, 472, 485, 532, 556, 557, 614, 728, 735, 887], "10": [12, 24, 25, 26, 29, 55, 63, 64, 65, 99, 100, 106, 111, 112, 120, 129, 137, 140, 141, 143, 145, 146, 147, 164, 169, 171, 175, 176, 182, 191, 210, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 244, 252, 253, 254, 255, 256, 261, 266, 274, 275, 278, 291, 296, 298, 301, 303, 305, 306, 309, 328, 333, 337, 355, 356, 358, 363, 371, 374, 375, 378, 396, 409, 429, 461, 466, 497, 502, 504, 522, 532, 547, 562, 563, 564, 566, 571, 579, 580, 586, 591, 595, 596, 603, 614, 623, 641, 646, 654, 655, 658, 673, 692, 720, 724, 728, 744, 754, 767, 769, 782, 807, 808, 859, 887], "95": [12, 240, 532], "96": [12, 240, 532], "97": [12, 146, 233, 240, 532], "move": [13, 334, 341, 342, 343, 408, 409, 411, 415, 532, 721, 730, 731, 732, 794, 795, 797, 801, 887], "inlin": 13, "parenthes": 13, "below": [14, 91, 101, 125, 139, 233, 358, 524, 532, 552, 614], "when": [14, 18, 29, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 89, 90, 91, 93, 97, 100, 101, 103, 104, 111, 112, 114, 118, 126, 127, 129, 131, 134, 140, 169, 178, 182, 233, 291, 292, 293, 341, 342, 343, 349, 380, 386, 446, 451, 457, 458, 491, 500, 532, 557, 562, 586, 591, 614, 622, 673, 674, 675, 729, 730, 731, 732, 737, 807, 808, 837, 842, 848, 887], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 55], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 436, 441, 442, 443, 827, 832, 833, 834], "none": [15, 23, 24, 25, 26, 27, 28, 29, 32, 41, 45, 55, 64, 65, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 118, 119, 122, 125, 130, 131, 138, 140, 141, 142, 147, 154, 155, 156, 159, 161, 165, 166, 178, 180, 185, 187, 194, 196, 201, 202, 203, 204, 205, 210, 233, 241, 244, 245, 255, 265, 275, 280, 282, 291, 292, 293, 296, 298, 301, 305, 306, 328, 333, 338, 341, 342, 343, 344, 347, 348, 349, 354, 355, 358, 359, 365, 366, 367, 368, 369, 374, 380, 394, 396, 402, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 425, 429, 434, 435, 438, 439, 443, 444, 445, 446, 447, 450, 451, 452, 454, 455, 456, 457, 458, 461, 462, 463, 471, 479, 481, 482, 485, 488, 489, 495, 496, 498, 499, 506, 507, 516, 519, 520, 523, 532, 545, 546, 552, 556, 557, 562, 563, 566, 567, 568, 570, 572, 576, 588, 589, 590, 591, 592, 593, 598, 599, 603, 604, 606, 608, 614, 623, 630, 631, 645, 655, 660, 672, 673, 684, 686, 715, 720, 725, 727, 728, 730, 731, 732, 735, 736, 737, 739, 742, 743, 745, 746, 758, 759, 765, 777, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 810, 812, 815, 816, 819, 820, 823, 825, 826, 829, 830, 834, 835, 836, 837, 838, 841, 842, 843, 845, 846, 847, 848, 849, 864, 867, 871, 876, 877, 887], "rounded_corn": 15, "style": [15, 170, 233], "border": 15, "line": [15, 89, 90, 92, 100, 138, 233], "includ": [15, 23, 25, 61, 91, 101, 111, 127, 140, 201, 204, 233, 329, 359, 453, 454, 491, 532, 562, 614, 716, 729, 844, 845, 877, 887], "row": [15, 20, 25, 27, 29, 55, 56, 58, 71, 74, 77, 80, 81, 83, 89, 90, 92, 93, 97, 100, 103, 104, 105, 107, 110, 111, 118, 125, 129, 132, 134, 138, 140, 142, 143, 148, 150, 152, 153, 155, 156, 157, 161, 165, 187, 191, 192, 195, 202, 204, 211, 215, 218, 227, 233, 245, 263, 346, 356, 375, 396, 405, 429, 440, 466, 491, 492, 500, 504, 508, 511, 515, 522, 532, 547, 552, 555, 558, 559, 562, 564, 568, 569, 571, 572, 576, 591, 592, 596, 597, 598, 605, 608, 609, 610, 614, 622, 643, 734, 744, 767, 782, 791, 820, 831, 859, 887], "divid": [15, 328, 333, 341, 342, 343, 372, 532, 715, 720, 730, 731, 732, 765, 887], "same": [15, 46, 55, 62, 110, 118, 202, 215, 233, 239, 244, 245, 346, 407, 408, 409, 410, 411, 412, 414, 415, 416, 486, 532, 598, 608, 614, 618, 622, 623, 692, 734, 793, 794, 795, 796, 797, 798, 800, 801, 802, 878, 887], "dens": [15, 138, 233, 401, 532, 787, 887], "space": 15, "horizont": [15, 63, 134, 145, 204, 233, 488, 491, 492, 493, 497, 500, 508, 511, 515, 521], "markdown": 15, "compat": [15, 29, 99, 101, 233, 591, 614], "No": 15, "appli": [15, 25, 60, 63, 100, 109, 111, 112, 134, 169, 213, 233, 310, 313, 315, 316, 318, 320, 322, 323, 326, 327, 329, 335, 336, 339, 342, 343, 380, 395, 407, 408, 409, 411, 415, 458, 479, 482, 491, 492, 500, 507, 515, 532, 564, 571, 572, 579, 614, 693, 696, 698, 702, 704, 707, 709, 710, 713, 714, 716, 722, 723, 726, 731, 732, 793, 794, 795, 797, 801, 849, 887], "round": [15, 57, 290, 353, 469, 532, 670, 740, 887], "corner": 15, "op": [15, 112, 404, 532], "The": [15, 29, 40, 47, 55, 61, 78, 79, 80, 81, 83, 86, 89, 97, 99, 100, 101, 118, 140, 141, 142, 147, 152, 155, 162, 178, 179, 203, 205, 215, 233, 245, 279, 280, 282, 283, 284, 285, 310, 322, 325, 326, 328, 333, 335, 347, 354, 355, 380, 401, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 425, 428, 431, 434, 437, 438, 444, 445, 446, 450, 451, 457, 461, 483, 502, 525, 526, 528, 532, 533, 536, 537, 538, 545, 561, 562, 563, 564, 566, 568, 571, 572, 577, 580, 591, 599, 608, 614, 659, 662, 663, 664, 672, 693, 709, 712, 713, 715, 720, 722, 735, 743, 746, 787, 793, 794, 795, 796, 797, 798, 800, 801, 802, 816, 819, 825, 828, 829, 835, 836, 837, 841, 842, 848, 852, 879, 881, 883, 887, 890, 891, 892], "one": [15, 55, 71, 78, 79, 80, 81, 82, 83, 112, 131, 132, 138, 140, 141, 152, 161, 170, 178, 179, 196, 200, 213, 214, 233, 240, 349, 371, 407, 430, 431, 462, 467, 479, 508, 511, 520, 521, 532, 551, 557, 558, 562, 563, 576, 604, 614, 622, 737, 793, 853, 887], "more": [15, 27, 29, 55, 77, 78, 79, 80, 81, 82, 83, 91, 97, 101, 111, 112, 118, 139, 152, 156, 161, 165, 168, 178, 179, 180, 202, 209, 215, 233, 245, 291, 292, 293, 371, 372, 380, 418, 428, 473, 508, 511, 521, 532, 561, 576, 591, 598, 602, 608, 614, 623, 673, 674, 675, 765, 804, 819, 873, 887, 894], "semigraph": 15, "box": [15, 118, 233], "draw": [15, 20, 21], "found": [15, 25, 72, 80, 126, 233, 419, 443, 458, 463, 532, 805, 834, 887], "unicod": 15, "block": [15, 583, 605, 614, 807, 808, 887], "http": [15, 99, 441, 832, 894], "en": 15, "wikipedia": 15, "org": 15, "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19], "etc": [16, 78, 89, 91, 93, 97, 101, 103, 105, 482, 807, 808, 887], "inform": [18, 61, 91, 101, 168, 233, 291, 292, 293, 372, 428, 532, 580, 614, 673, 674, 675, 765, 819, 887], "separ": [19, 25, 201, 233, 263, 267, 440, 488, 491, 492, 643, 647, 831, 857], "between": [19, 63, 109, 110, 111, 112, 172, 225, 233, 267, 288, 304, 359, 396, 400, 412, 434, 490, 513, 514, 518, 532, 581, 614, 647, 667, 686, 782, 786, 798, 825, 887], "set_tbl_column_data_type_inlin": 19, "max": [20, 29, 111, 112, 122, 131, 140, 141, 170, 233, 291, 292, 298, 349, 395, 401, 408, 420, 455, 532, 557, 562, 563, 591, 607, 614, 660, 673, 674, 679, 684, 737, 787, 794, 809, 846, 887], "both": [20, 25, 46, 65, 140, 141, 154, 155, 162, 178, 233, 244, 359, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 567, 568, 577, 614], "element": [20, 87, 112, 115, 246, 247, 248, 249, 250, 251, 262, 263, 294, 295, 297, 298, 299, 300, 301, 302, 345, 355, 363, 378, 396, 401, 404, 419, 425, 426, 427, 432, 454, 455, 469, 470, 472, 532, 623, 624, 625, 626, 627, 628, 629, 642, 643, 677, 678, 679, 680, 681, 682, 683, 733, 738, 754, 769, 782, 787, 805, 816, 817, 818, 822, 823, 845, 846, 862, 863, 872, 873, 876, 887], "width": [21, 89, 90, 233, 445, 450, 461, 614, 836, 841, 852], "char": [21, 46, 447, 838], "enabl": [22, 420, 532, 809, 887], "addit": [22, 80, 91, 101, 109, 110, 347, 532, 735, 887], "verbos": 22, "debug": [22, 547, 555, 572, 614], "log": [22, 57, 340, 472, 532, 728, 872, 887], "if_set": 23, "dict": [23, 29, 56, 58, 61, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 103, 105, 111, 152, 167, 168, 174, 178, 179, 181, 194, 195, 233, 520, 583, 585, 614], "show": [23, 125, 138, 156, 166, 233, 552, 580, 589, 614], "variabl": [23, 84, 161, 196, 233, 576, 614, 866, 887], "chang": [23, 55, 64, 89, 90, 102, 204, 205, 233, 302, 328, 396, 408, 409, 410, 411, 412, 414, 415, 416, 532, 683, 691, 715, 782, 814, 887], "restrict": [23, 455, 846], "dictionari": [23, 78, 79, 80, 81, 83, 89, 90, 94, 98, 100, 152, 167, 178, 179, 194, 195, 233, 684, 887], "those": [23, 401, 532, 787, 887], "_have_": 23, "been": [23, 401, 532, 787, 887], "set_stat": 23, "all_stat": 23, "file": [24, 25, 26, 27, 28, 29, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 129, 233, 555, 582, 590, 591, 606, 614, 622, 887], "binaryio": [24, 26, 88, 89, 92, 93, 94, 97, 98, 233], "bytesio": [24, 25, 26, 29, 88, 89, 90, 92, 93, 97, 233], "path": [24, 25, 26, 27, 28, 29, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 233, 420, 443, 532, 582, 590, 591, 606, 614, 809, 834, 887], "compress": [24, 26, 29, 233, 590, 591, 614], "avrocompress": [24, 233], "uncompress": [24, 26, 29, 93, 103, 233, 591, 614], "write": [24, 25, 26, 27, 29, 90, 233, 291, 292, 293, 532, 570, 589, 591, 606, 614, 673, 674, 675, 887], "apach": [24, 29, 88, 233], "avro": [24, 88, 233, 541], "should": [24, 25, 26, 27, 28, 29, 78, 79, 81, 83, 87, 91, 101, 109, 110, 112, 115, 118, 140, 152, 155, 215, 233, 240, 245, 262, 289, 302, 337, 365, 367, 407, 408, 409, 410, 411, 412, 414, 415, 416, 419, 428, 458, 506, 532, 551, 562, 567, 568, 572, 589, 590, 591, 606, 608, 614, 623, 642, 669, 683, 724, 793, 794, 795, 796, 797, 798, 800, 801, 802, 805, 819, 849, 887], "written": [24, 25, 26, 27, 28, 29, 233, 590, 591, 606, 614], "snappi": [24, 29, 233, 591, 614], "deflat": [24, 233], "import": [24, 25, 26, 29, 32, 65, 78, 81, 82, 100, 101, 102, 107, 108, 109, 110, 111, 112, 122, 138, 140, 153, 155, 198, 204, 205, 233, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 496, 506, 562, 568, 572, 614, 677, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 748, 751, 755, 756, 757, 793, 817, 862, 887], "pathlib": [24, 25, 26, 27, 28, 29, 88, 92, 93, 95, 96, 100, 103, 104, 233, 582, 606, 614], "foo": [24, 25, 26, 27, 28, 29, 84, 118, 121, 123, 124, 125, 126, 129, 132, 133, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 149, 154, 157, 158, 159, 160, 163, 166, 167, 168, 170, 172, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 208, 212, 213, 233, 241, 260, 264, 265, 268, 269, 291, 292, 293, 325, 356, 357, 397, 405, 421, 422, 434, 436, 438, 440, 442, 446, 451, 453, 455, 457, 459, 460, 466, 468, 479, 482, 484, 486, 489, 490, 499, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 522, 523, 524, 532, 548, 551, 552, 553, 558, 565, 566, 567, 583, 585, 586, 593, 598, 599, 601, 604, 606, 614, 647, 673, 712, 827, 829, 831, 833, 846, 887], "bar": [24, 25, 26, 27, 28, 29, 84, 118, 121, 123, 124, 125, 126, 129, 132, 133, 134, 135, 136, 137, 143, 145, 146, 147, 149, 154, 157, 158, 159, 160, 163, 166, 167, 168, 170, 172, 174, 175, 176, 178, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 202, 203, 206, 207, 212, 213, 233, 241, 269, 357, 428, 438, 440, 453, 455, 479, 484, 486, 489, 490, 499, 504, 508, 509, 510, 511, 512, 513, 517, 518, 519, 522, 523, 524, 532, 548, 551, 552, 553, 558, 565, 566, 567, 583, 585, 586, 593, 598, 599, 601, 606, 614, 647, 819, 829, 831, 846, 887], "ham": [24, 25, 26, 29, 84, 121, 123, 124, 125, 126, 132, 133, 135, 142, 143, 145, 154, 158, 159, 160, 163, 166, 168, 172, 174, 176, 178, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 196, 197, 198, 199, 202, 206, 207, 233, 486, 548, 551, 552, 553, 558, 567, 583, 585, 586, 593, 598, 604, 614], "d": [24, 25, 26, 29, 46, 63, 80, 102, 122, 138, 142, 143, 146, 154, 157, 191, 193, 204, 207, 210, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 312, 331, 423, 436, 442, 454, 458, 485, 502, 532, 567, 593, 603, 614, 695, 718, 827, 833, 845, 849], "e": [24, 25, 26, 29, 46, 89, 90, 92, 93, 97, 103, 105, 122, 138, 143, 157, 191, 193, 204, 210, 233, 340, 344, 377, 420, 423, 428, 498, 532, 570, 583, 603, 614, 728, 806, 809, 819, 869, 887], "dirpath": [24, 25, 26, 29, 100, 233], "new_fil": [24, 25, 26, 29, 233], "has_head": [25, 89, 90, 92, 100, 233], "sep": [25, 86, 89, 90, 100, 233, 488], "quot": [25, 89, 90, 100, 233], "batch_siz": [25, 89, 90, 104, 233], "1024": [25, 29, 89, 90, 104, 233, 591, 614], "datetime_format": [25, 233], "date_format": [25, 233, 331], "time_format": [25, 233], "float_precis": [25, 233], "null_valu": [25, 89, 90, 100, 233], "_io": [25, 88, 92, 93, 233], "comma": [25, 233], "csv": [25, 89, 90, 92, 100, 233, 541, 590, 591, 607, 614], "result": [25, 27, 28, 55, 78, 81, 83, 91, 99, 100, 101, 102, 103, 105, 112, 129, 140, 151, 165, 185, 213, 233, 341, 342, 343, 372, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 420, 422, 453, 454, 482, 491, 492, 493, 507, 521, 532, 544, 562, 572, 580, 588, 590, 591, 606, 614, 622, 725, 730, 731, 732, 765, 791, 793, 794, 795, 796, 797, 798, 800, 801, 802, 809, 812, 844, 845, 869, 887], "instead": [25, 27, 28, 87, 97, 111, 115, 118, 140, 152, 165, 167, 178, 179, 233, 254, 256, 444, 446, 451, 457, 482, 532, 556, 561, 562, 606, 614, 632, 635, 807, 808, 835, 837, 842, 848, 887], "whether": [25, 60, 65, 81, 83, 112, 233], "header": [25, 29, 89, 90, 92, 100, 126, 170, 201, 233, 591, 614], "field": [25, 47, 80, 203, 233, 280, 454, 455, 463, 491, 492, 520, 599, 614, 660, 845, 846, 855, 857], "symbol": [25, 233], "byte": [25, 40, 89, 90, 92, 93, 94, 97, 98, 100, 127, 233, 283, 286, 287, 444, 447, 591, 614, 662, 665, 666, 729, 835, 838, 887], "process": [25, 233, 590, 591, 614], "per": [25, 110, 111, 138, 165, 166, 222, 224, 225, 233, 262, 265, 279, 642, 645, 659], "thread": [25, 86, 89, 90, 99, 113, 233, 262, 642], "specifi": [25, 55, 65, 72, 78, 111, 127, 131, 178, 233, 341, 342, 343, 349, 404, 445, 450, 532, 557, 614, 729, 730, 731, 732, 737, 836, 841, 887], "defin": [25, 32, 65, 109, 110, 111, 118, 140, 141, 165, 169, 215, 233, 245, 279, 359, 408, 409, 410, 411, 412, 414, 415, 416, 481, 506, 520, 532, 562, 563, 579, 608, 614, 623, 659, 887], "chrono": [25, 233, 331, 458, 718, 849], "rust": [25, 29, 73, 93, 97, 118, 215, 233, 245, 532, 608], "crate": [25, 233], "fraction": [25, 107, 108, 180, 233, 329, 396, 418, 458, 532, 716, 782, 804, 887], "second": [25, 65, 140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 458, 483, 495, 496, 532, 562, 563, 568, 614, 712, 715, 720], "precis": [25, 233, 307, 458, 690], "infer": [25, 78, 79, 80, 81, 82, 83, 89, 90, 92, 100, 104, 109, 118, 233, 405, 458, 532, 791, 887], "maximum": [25, 89, 90, 100, 110, 111, 112, 158, 233, 257, 291, 292, 382, 392, 401, 508, 532, 573, 614, 637, 673, 674, 699, 770, 778, 783, 787, 887], "timeunit": [25, 32, 33, 65, 233, 307, 309, 332, 337, 690, 692, 719, 724], "frame": [25, 55, 80, 92, 107, 111, 118, 152, 153, 162, 165, 169, 178, 179, 198, 204, 233, 577, 579, 614], "datetim": [25, 40, 65, 82, 122, 138, 140, 141, 153, 155, 205, 233, 260, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 359, 408, 409, 410, 411, 412, 414, 415, 416, 458, 471, 485, 496, 502, 506, 511, 532, 562, 563, 568, 614, 640, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 748, 770, 773, 778, 779, 808, 849, 871, 887], "decim": [25, 40, 233, 417, 532, 803, 887], "place": [25, 124, 145, 146, 175, 184, 185, 188, 207, 233, 254, 256, 267, 274, 421, 422, 532, 587, 588, 593, 614, 632, 635, 647, 654, 788, 790, 811, 812, 821, 887], "float64": [25, 80, 87, 111, 115, 126, 127, 134, 181, 233, 246, 247, 248, 249, 250, 251, 288, 294, 295, 329, 344, 365, 367, 426, 427, 469, 470, 485, 486, 498, 532, 553, 585, 614, 716], "datatyp": [25, 27, 40, 47, 53, 78, 79, 80, 81, 83, 85, 87, 92, 94, 98, 112, 115, 134, 181, 233, 263, 288, 423, 440, 458, 471, 481, 482, 486, 498, 506, 507, 520, 532, 541, 585, 606, 614, 623, 643, 667, 684, 748, 760, 763, 813, 831, 849, 871, 887], "repres": [25, 41, 53, 65, 78, 79, 81, 82, 83, 233, 365, 367, 486, 506, 532, 808, 823, 876, 887], "null": [25, 55, 63, 80, 89, 90, 100, 102, 122, 125, 131, 134, 135, 147, 154, 159, 160, 166, 172, 184, 185, 188, 189, 190, 194, 203, 206, 233, 241, 244, 245, 254, 256, 261, 264, 265, 268, 274, 279, 280, 282, 284, 291, 292, 293, 296, 298, 301, 303, 305, 306, 311, 314, 317, 319, 321, 324, 330, 341, 342, 343, 344, 347, 348, 349, 350, 354, 358, 365, 366, 367, 368, 369, 374, 394, 396, 402, 407, 408, 409, 410, 411, 412, 414, 415, 416, 421, 422, 423, 425, 430, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 450, 452, 454, 455, 456, 461, 471, 478, 479, 485, 487, 488, 498, 506, 520, 532, 552, 557, 566, 567, 587, 588, 593, 599, 604, 606, 614, 623, 632, 635, 641, 654, 659, 660, 663, 673, 685, 688, 694, 697, 703, 705, 708, 711, 717, 730, 731, 732, 735, 737, 742, 758, 759, 781, 782, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 811, 812, 816, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 841, 843, 845, 846, 847, 869, 871, 877, 887], "empti": [25, 70, 80, 89, 90, 92, 100, 119, 120, 149, 161, 233, 517, 545, 546, 576, 614, 672, 676, 750, 887], "ipccompress": [26, 233], "arrow": [26, 66, 78, 93, 103, 193, 233, 590, 614, 865, 869, 887], "ipc": [26, 93, 94, 102, 103, 233, 541], "binari": [26, 233, 283, 285, 286, 287, 662, 664, 665, 666], "stream": [26, 62, 233, 547, 549, 555, 580, 589, 590, 591, 614], "feather": [26, 93, 103, 233, 541], "lz4": [26, 29, 233, 590, 591, 614], "zstd": [26, 29, 233, 590, 591, 614], "pretti": [27, 233], "row_ori": [27, 233], "io": [27, 28, 95, 96, 233, 582, 606, 614, 894], "iobas": [27, 28, 95, 96, 233, 582, 606, 614], "serial": [27, 28, 233], "represent": [27, 28, 233, 289, 310, 313, 315, 316, 318, 320, 322, 323, 326, 327, 329, 335, 336, 339, 471, 532, 549, 550, 570, 614, 669, 693, 696, 698, 702, 704, 707, 709, 710, 713, 714, 716, 722, 723, 726, 871, 887], "orient": [27, 56, 58, 81, 83, 233], "slower": [27, 81, 83, 118, 167, 205, 215, 233, 245, 532, 608], "common": [27, 233], "write_ndjson": [27, 233], "newlin": [28, 96, 104, 233], "delimit": [28, 89, 90, 96, 100, 104, 233, 434, 825], "parquetcompress": [29, 233], "compression_level": [29, 233, 591, 614], "statist": [29, 89, 90, 122, 233, 342, 343, 372, 408, 409, 410, 411, 412, 413, 414, 415, 416, 428, 532, 591, 614, 684, 731, 732, 765, 799, 819, 887], "row_group_s": [29, 233, 591, 614], "use_pyarrow": [29, 89, 93, 97, 233, 591, 614, 868, 887], "pyarrow_opt": [29, 91, 97, 101, 233], "object": [29, 65, 79, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 110, 111, 112, 156, 198, 233, 506, 541, 546, 561, 565, 570, 582, 614, 636, 668, 689, 824, 865, 887], "parquet": [29, 97, 98, 105, 233, 541, 591, 614], "gzip": [29, 233, 591, 614], "lzo": [29, 233, 591, 614], "brotli": [29, 233, 591, 614], "choos": [29, 233, 590, 591, 614], "good": [29, 152, 233, 590, 591, 614], "perform": [29, 70, 89, 90, 93, 97, 100, 103, 104, 105, 118, 140, 141, 155, 173, 215, 233, 245, 532, 562, 563, 568, 590, 591, 605, 608, 614], "fast": [29, 233, 420, 532, 590, 591, 614, 809, 887], "decompress": [29, 233, 590, 591, 614], "backward": [29, 131, 155, 233, 282, 349, 532, 557, 568, 591, 614, 737, 887], "guarante": [29, 89, 90, 233, 555, 591, 614], "deal": [29, 233, 401, 458, 532, 591, 614, 787, 849, 887], "older": [29, 233, 591, 614], "reader": [29, 86, 89, 90, 93, 97, 233, 542, 591, 614], "level": [29, 100, 103, 104, 105, 111, 118, 134, 165, 233, 350, 532, 564, 571, 591, 614], "higher": [29, 172, 225, 233, 400, 412, 514, 532, 581, 591, 614, 786, 798, 887], "mean": [29, 84, 89, 90, 97, 100, 122, 131, 170, 196, 233, 346, 349, 409, 428, 441, 484, 532, 557, 591, 614, 684, 734, 737, 742, 795, 819, 832, 887], "smaller": [29, 127, 233, 555, 591, 614, 729, 887], "disk": [29, 233, 589, 590, 591, 614], "min": [29, 111, 112, 122, 131, 140, 141, 170, 233, 291, 293, 299, 349, 401, 411, 517, 532, 557, 562, 563, 591, 614, 673, 675, 680, 684, 737, 787, 797, 887], "11": [29, 139, 141, 233, 305, 306, 315, 325, 328, 333, 358, 396, 415, 429, 461, 486, 521, 532, 547, 561, 563, 564, 571, 580, 591, 596, 614, 623, 712, 715, 720, 793, 887], "22": [29, 233, 328, 333, 337, 458, 486, 591, 614, 715, 720, 724, 849], "extra": [29, 89, 91, 92, 93, 97, 101, 103, 105, 129, 167, 233, 591, 614, 622, 887], "comput": [29, 62, 63, 67, 127, 155, 202, 225, 233, 239, 246, 247, 248, 249, 250, 251, 270, 271, 272, 294, 295, 297, 298, 299, 300, 301, 304, 340, 345, 372, 377, 378, 390, 396, 399, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 425, 426, 427, 428, 432, 469, 470, 490, 497, 513, 518, 532, 565, 567, 568, 591, 598, 604, 614, 618, 624, 625, 626, 627, 628, 629, 650, 651, 652, 677, 678, 679, 680, 681, 682, 686, 728, 729, 733, 765, 768, 769, 774, 782, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 816, 817, 818, 819, 822, 862, 863, 887], "size": [29, 89, 90, 110, 111, 112, 113, 127, 140, 204, 233, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 482, 532, 562, 591, 614, 729, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 887], "group": [29, 90, 139, 140, 141, 153, 165, 167, 170, 204, 205, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233, 240, 245, 262, 352, 395, 430, 431, 441, 467, 481, 532, 561, 562, 563, 591, 607, 608, 609, 610, 614, 642, 832], "chunk": [29, 86, 89, 90, 100, 103, 104, 105, 111, 112, 129, 153, 164, 233, 244, 402, 532, 591, 614, 622, 671, 741, 775, 788, 865, 887], "reduc": [29, 89, 90, 97, 100, 103, 104, 105, 220, 221, 223, 226, 233, 423, 500, 532, 591, 614, 771, 785, 813, 858, 887], "memori": [29, 63, 78, 81, 82, 83, 89, 90, 93, 97, 100, 103, 104, 105, 118, 129, 186, 215, 233, 245, 402, 423, 532, 591, 608, 614, 622, 788, 813, 814, 887], "pressur": [29, 97, 104, 105, 233, 423, 532, 591, 614, 813, 887], "improv": [29, 93, 103, 233, 591, 614], "speed": [29, 233, 591, 614], "minimum": [29, 110, 111, 112, 134, 163, 233, 291, 293, 341, 342, 343, 389, 393, 401, 511, 532, 578, 591, 614, 673, 675, 706, 730, 731, 732, 779, 784, 787, 887], "implement": [29, 101, 118, 215, 233, 245, 532, 608, 807, 808, 887], "v": [29, 64, 127, 233, 419, 532, 805, 887], "At": [29, 233], "moment": [29, 168, 233, 372, 428, 532, 765, 819, 887], "argument": [29, 89, 91, 97, 101, 140, 141, 159, 168, 169, 170, 190, 198, 205, 233, 328, 333, 359, 408, 409, 410, 411, 412, 414, 415, 416, 446, 451, 457, 532, 562, 563, 579, 614, 715, 720, 837, 842, 848, 887], "pass": [29, 55, 65, 79, 92, 101, 110, 111, 112, 168, 169, 210, 233, 245, 312, 347, 357, 446, 451, 457, 502, 532, 565, 572, 579, 589, 603, 614, 623, 695, 725, 735, 837, 842, 848, 887], "pyarrow": [29, 78, 82, 89, 91, 93, 97, 101, 102, 106, 153, 193, 197, 198, 233, 542, 865, 868, 869, 887], "write_t": [29, 233], "base": [30, 125, 132, 140, 141, 233, 340, 377, 378, 508, 511, 532, 541, 552, 558, 562, 563, 614, 728, 768, 769, 878, 887], "calendar": [31, 32, 140, 141, 155, 205, 233, 315, 325, 328, 333, 339, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 698, 712, 715, 720, 726], "date": [32, 40, 55, 65, 89, 90, 99, 100, 102, 122, 138, 140, 141, 153, 155, 198, 233, 260, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 347, 359, 408, 409, 410, 411, 412, 414, 415, 416, 458, 471, 485, 502, 511, 532, 541, 562, 563, 568, 614, 640, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 735, 748, 770, 773, 778, 779, 808, 849, 871, 887], "time": [32, 33, 40, 61, 62, 65, 100, 129, 140, 141, 155, 205, 233, 259, 260, 280, 307, 308, 309, 312, 325, 332, 334, 337, 338, 359, 458, 471, 472, 487, 488, 494, 495, 496, 502, 516, 532, 541, 547, 562, 563, 568, 580, 614, 622, 639, 690, 691, 692, 695, 712, 719, 721, 724, 725, 849, 871, 872, 887], "time_unit": [32, 33, 65, 337, 724], "u": [32, 33, 65, 307, 309, 312, 332, 337, 458, 502, 516, 690, 692, 695, 719, 724], "time_zon": [32, 65], "m": [32, 33, 65, 167, 233, 307, 309, 312, 331, 332, 337, 458, 496, 502, 690, 692, 695, 718, 719, 724, 849], "unit": [32, 33, 65, 111, 112, 127, 233, 307, 309, 312, 332, 337, 379, 386, 475, 502, 532, 580, 614, 690, 692, 695, 719, 724, 729, 887], "timezon": [32, 65, 458, 725, 849], "zoneinfo": 32, "run": [32, 62, 118, 156, 215, 233, 245, 262, 302, 516, 517, 532, 547, 555, 580, 589, 590, 591, 608, 614, 642, 683, 887, 893], "available_timezon": 32, "attribut": [32, 33, 40, 109, 233, 525, 526, 528, 533, 536, 537, 538, 614, 879, 881, 883, 890, 891, 892], "delta": [33, 91, 101, 513, 518, 541, 823, 876, 887], "32": [34, 37, 50, 57, 106, 141, 151, 233, 423, 532, 563, 614, 686, 713, 782, 798, 887], "bit": [34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 403, 435, 532, 789, 826, 887], "sign": [36, 37, 38, 39, 325, 403, 461, 532, 712, 789, 852, 887], "integ": [36, 37, 38, 39, 49, 50, 51, 52, 110, 111, 140, 141, 233, 290, 329, 353, 403, 408, 409, 410, 411, 412, 413, 414, 415, 416, 482, 502, 506, 532, 562, 563, 614, 630, 631, 670, 716, 740, 789, 799, 808, 887], "inner": [40, 46, 154, 233, 267, 304, 532, 567, 606, 614, 647, 686, 887], "union": [40, 47, 55, 62, 63, 85, 123, 125, 128, 139, 158, 159, 161, 163, 165, 167, 174, 182, 188, 190, 201, 203, 205, 210, 213, 233, 363, 479, 480, 481, 482, 483, 485, 486, 487, 488, 492, 493, 498, 502, 506, 507, 508, 511, 515, 517, 520, 521, 532, 547, 554, 555, 561, 580, 586, 589, 593, 603, 607, 614, 686, 754, 808, 887], "datatypeclass": [40, 47, 85, 481, 482, 486, 498, 506, 507, 520], "timedelta": [40, 65, 140, 141, 205, 233, 310, 312, 313, 315, 320, 322, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 339, 408, 409, 410, 411, 412, 414, 415, 416, 485, 532, 562, 563, 614, 699, 701, 706, 712, 715, 720, 770, 773, 778, 779, 887], "tupl": [40, 99, 118, 152, 178, 179, 183, 212, 233, 405, 532, 580, 589, 614, 791, 887], "nest": [40, 46, 127, 233, 541, 729, 887], "arrai": [40, 78, 81, 89, 90, 127, 193, 197, 233, 259, 269, 270, 271, 272, 273, 276, 277, 285, 291, 292, 293, 297, 298, 299, 300, 301, 378, 408, 409, 411, 414, 415, 416, 420, 436, 438, 441, 442, 443, 487, 497, 532, 639, 649, 650, 651, 652, 653, 656, 657, 664, 673, 674, 675, 679, 680, 681, 682, 686, 729, 769, 794, 795, 797, 800, 801, 802, 809, 814, 827, 829, 832, 833, 834, 865, 869, 877, 887], "within": [40, 107, 108, 155, 233, 568, 614], "wrap": [42, 101], "arbitrari": [42, 111], "python": [42, 65, 89, 90, 106, 118, 215, 233, 245, 309, 380, 481, 532, 608, 623, 692, 699, 700, 701, 706, 868, 887], "queri": [43, 62, 93, 99, 100, 103, 104, 105, 129, 156, 169, 233, 280, 443, 547, 549, 550, 555, 564, 571, 580, 589, 605, 608, 614, 622, 834, 887, 893], "pars": [43, 89, 90, 92, 100, 103, 104, 458, 502, 849], "given": [43, 45, 55, 64, 65, 78, 79, 80, 81, 83, 87, 89, 90, 100, 109, 110, 111, 112, 115, 118, 127, 169, 178, 184, 185, 233, 260, 274, 332, 340, 347, 377, 401, 404, 405, 408, 409, 411, 414, 415, 416, 419, 421, 422, 442, 458, 472, 479, 532, 579, 587, 588, 608, 614, 623, 640, 654, 719, 728, 729, 735, 768, 780, 787, 791, 794, 795, 797, 800, 801, 802, 805, 811, 812, 833, 849, 872, 878, 887], "transform": [43, 118, 233, 380, 459, 460, 532], "lf": [45, 553, 558, 585, 601, 614], "under": [45, 56, 57, 58, 59, 525, 526, 528, 533, 536, 537, 538, 879, 881, 883, 890, 891, 892], "add": [45, 90, 118, 129, 140, 211, 233, 398, 464, 496, 524, 532, 562, 567, 604, 605, 614, 622, 887], "context": [46, 165, 233, 240, 245, 262, 350, 385, 430, 431, 476, 481, 489, 499, 502, 517, 531, 532, 541, 604, 614, 642], "manag": [46, 541], "categor": [46, 84, 114, 154, 233, 289, 471, 532, 668, 669, 871, 887], "temporarili": [46, 140, 141, 233, 562, 563, 614], "cach": [46, 62, 93, 100, 103, 105, 114, 408, 409, 410, 411, 412, 414, 415, 416, 458, 532, 547, 555, 580, 589, 614, 849], "categori": [46, 64, 114, 289, 669], "until": [46, 156, 233], "finish": [46, 67, 129, 233, 622, 887], "global": [46, 111, 114], "invalid": [46, 89, 90, 100, 443, 834], "outermost": 46, "exit": [46, 116], "df1": [46, 55, 63, 107, 129, 135, 207, 233], "color": [46, 215, 608], "red": [46, 215, 608], "green": [46, 215, 608], "blue": 46, "orang": [46, 121, 216, 217, 219, 220, 221, 223, 225, 226, 233], "uint8": [46, 109, 300, 301, 465, 532, 681, 682, 858, 887], "df2": [46, 55, 63, 107, 129, 135, 207, 233], "yellow": 46, "black": [46, 118, 233], "join": [46, 55, 62, 155, 233, 358, 395, 532, 547, 555, 568, 580, 589, 604, 614], "succe": [46, 89, 90, 100], "df_join": 46, "cat": [46, 64, 435, 459, 460, 471, 488, 528, 532, 826, 883], "u8": [46, 84, 196, 233, 866, 887], "sequenc": [47, 55, 62, 63, 78, 79, 80, 81, 83, 86, 110, 111, 112, 123, 125, 128, 129, 139, 140, 141, 154, 155, 161, 165, 167, 169, 170, 188, 196, 201, 202, 203, 204, 205, 210, 213, 233, 344, 363, 380, 479, 480, 481, 483, 485, 486, 487, 488, 491, 492, 493, 498, 500, 502, 507, 508, 511, 515, 517, 520, 521, 532, 554, 561, 562, 563, 567, 568, 579, 593, 598, 603, 607, 614, 622, 686, 754, 808, 887], "map": [47, 79, 80, 89, 90, 93, 94, 97, 98, 100, 103, 118, 126, 152, 174, 178, 179, 194, 233, 328, 333, 381, 476, 481, 520, 532, 553, 583, 614, 715, 720], "composit": 47, "make": [47, 63, 78, 82, 89, 90, 93, 97, 99, 103, 105, 139, 140, 141, 162, 165, 173, 205, 233, 334, 342, 343, 404, 454, 461, 532, 561, 562, 563, 577, 614, 721, 725, 731, 732, 845, 852, 887], "up": [47, 99, 155, 233, 290, 461, 532, 567, 568, 572, 614, 670, 852, 887], "dai": [48, 65, 140, 141, 153, 155, 205, 233, 312, 315, 322, 325, 326, 327, 328, 332, 333, 335, 336, 339, 408, 409, 410, 411, 412, 414, 415, 416, 494, 495, 496, 532, 562, 563, 568, 614, 712, 713, 715, 720, 723], "unsign": [49, 50, 51, 52, 403, 532, 789, 887], "could": [53, 67, 125, 140, 233, 288, 491, 500, 532, 552, 562, 614, 667, 887], "determin": [53, 55, 63, 80, 83, 89, 90, 92, 97, 105, 118, 134, 140, 141, 152, 153, 201, 205, 233, 280, 289, 385, 404, 408, 409, 410, 411, 412, 414, 415, 416, 428, 483, 532, 562, 563, 614, 660, 669, 819, 887], "static": [53, 608], "utf": 54, "intern": [55, 60, 65, 92, 152, 178, 194, 233, 352, 482, 493, 502, 508, 511, 516, 520, 521, 532, 636, 668, 689, 805, 824, 887], "revers": [55, 127, 188, 233, 254, 256, 276, 297, 298, 299, 300, 301, 381, 398, 401, 420, 430, 431, 464, 472, 483, 532, 593, 614, 632, 635, 656, 679, 680, 681, 682, 761, 787, 809, 821, 872, 887], "uniqu": [55, 109, 110, 112, 150, 165, 224, 233, 255, 362, 370, 391, 458, 474, 476, 512, 532, 614, 634, 684, 752, 762, 776, 849, 874, 875, 887], "kei": [55, 61, 140, 155, 162, 167, 170, 174, 177, 233, 562, 568, 577, 583, 584, 614], "contain": [55, 61, 79, 82, 91, 101, 107, 153, 165, 170, 233, 245, 363, 436, 439, 441, 442, 443, 455, 456, 532, 580, 614, 775, 827, 830, 832, 833, 834, 846, 847, 865, 887], "have": [55, 89, 90, 92, 111, 112, 114, 129, 173, 233, 302, 341, 342, 343, 386, 401, 458, 532, 589, 605, 614, 622, 683, 691, 730, 731, 732, 742, 787, 849, 887], "inject": 55, "fill": [55, 63, 87, 115, 130, 131, 185, 204, 233, 282, 298, 301, 347, 348, 349, 354, 358, 408, 409, 411, 414, 415, 416, 422, 445, 450, 461, 501, 532, 556, 557, 588, 604, 614, 735, 736, 737, 780, 794, 795, 797, 800, 801, 802, 812, 836, 841, 852, 887], "non": [55, 153, 161, 233, 396, 407, 408, 409, 410, 411, 412, 414, 415, 416, 436, 442, 485, 488, 532, 576, 614, 660, 782, 793, 794, 795, 796, 797, 798, 800, 801, 802, 827, 833, 869, 887], "each": [55, 90, 104, 107, 108, 110, 118, 138, 153, 155, 212, 215, 216, 218, 227, 233, 245, 266, 278, 328, 333, 401, 442, 454, 455, 481, 532, 568, 580, 608, 609, 610, 614, 646, 658, 671, 715, 720, 787, 833, 845, 846, 857, 887], "sort": [55, 56, 107, 139, 140, 141, 155, 162, 167, 169, 170, 205, 213, 218, 227, 233, 254, 256, 289, 350, 420, 431, 476, 478, 483, 532, 550, 562, 563, 568, 577, 579, 580, 589, 609, 610, 614, 632, 635, 669, 761, 809, 873, 875, 887], "origin": [55, 89, 90, 202, 233, 371, 403, 436, 441, 442, 443, 445, 450, 461, 532, 598, 614, 827, 832, 833, 834, 836, 841, 852], "order": [55, 80, 107, 139, 140, 141, 167, 169, 170, 180, 202, 205, 233, 254, 256, 289, 401, 418, 419, 420, 430, 431, 463, 473, 474, 483, 532, 561, 562, 563, 590, 591, 593, 598, 614, 632, 635, 669, 761, 787, 792, 804, 805, 809, 855, 873, 874, 887], "unless": [55, 79, 233, 877, 887], "case": [55, 78, 79, 80, 81, 83, 105, 118, 129, 140, 141, 152, 233, 380, 385, 386, 524, 532, 562, 563, 614, 622, 887], "final": [55, 105, 555, 614], "doe": [55, 74, 78, 79, 80, 81, 83, 89, 90, 91, 92, 100, 101, 102, 107, 108, 129, 153, 178, 179, 209, 210, 233, 334, 337, 463, 474, 499, 532, 555, 561, 572, 602, 603, 614, 622, 721, 724, 742, 814, 877, 887], "receiv": [55, 118, 169, 233, 579, 614], "now": [55, 141, 233, 563, 614], "ha": [55, 101, 205, 233, 245, 302, 371, 386, 472, 481, 532, 545, 608, 614, 672, 683, 742, 753, 872, 887], "whose": [55, 155, 170, 233, 344, 498, 532, 568, 614], "post": 55, "constrain": 55, "newli": 55, "descend": [55, 188, 233, 254, 256, 420, 532, 593, 614, 632, 635, 761, 809, 887], "singl": [55, 63, 89, 90, 99, 100, 110, 125, 129, 136, 178, 188, 210, 213, 233, 279, 325, 350, 380, 402, 405, 434, 478, 481, 486, 507, 516, 532, 552, 593, 603, 607, 614, 622, 659, 712, 788, 791, 825, 865, 887], "boolean": [55, 60, 132, 134, 210, 233, 242, 243, 260, 283, 350, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 478, 532, 558, 603, 614, 620, 621, 633, 640, 662, 738, 747, 749, 751, 752, 754, 755, 756, 757, 758, 759, 762, 783, 784, 807, 826, 878, 887], "associ": 55, "2022": [55, 65, 106, 122, 138, 233, 309, 458, 496, 502, 692, 698, 849], "x": [55, 89, 90, 99, 100, 110, 111, 127, 145, 148, 150, 154, 161, 233, 245, 259, 267, 355, 380, 404, 425, 428, 454, 471, 493, 521, 532, 567, 572, 576, 592, 614, 619, 623, 737, 763, 816, 819, 845, 871, 887], "y": [55, 110, 111, 127, 148, 150, 154, 161, 233, 259, 267, 331, 404, 458, 493, 521, 532, 567, 576, 592, 614, 619, 718, 849, 887], "12": [55, 64, 65, 140, 141, 155, 205, 233, 300, 309, 313, 315, 322, 327, 328, 333, 339, 396, 423, 494, 495, 532, 562, 563, 564, 568, 571, 589, 596, 614, 623, 692, 709, 715, 720, 803, 887], "df3": [55, 233], "set_tbl_format": 55, "09": [55, 141, 233, 309, 315, 563, 614, 693], "01": [55, 65, 122, 138, 140, 141, 205, 233, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 458, 496, 562, 563, 614, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 849], "02": [55, 65, 138, 140, 141, 205, 233, 307, 309, 312, 313, 314, 320, 321, 322, 329, 330, 332, 335, 337, 417, 496, 532, 562, 563, 614, 690, 692, 695, 696, 697, 699, 700, 701, 702, 704, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725], "03": [55, 65, 140, 141, 205, 233, 307, 308, 309, 311, 312, 314, 321, 322, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 562, 563, 614, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 706, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725], "af1": 55, "af2": 55, "af3": 55, "keep": [55, 89, 90, 100, 167, 202, 205, 233, 371, 485, 532, 598, 614], "easili": 55, "calcul": [55, 140, 233, 261, 303, 341, 342, 343, 372, 379, 413, 428, 475, 532, 562, 614, 641, 685, 730, 731, 732, 765, 799, 819, 823, 876, 887], "wise": [55, 134, 233, 246, 247, 248, 249, 250, 251, 294, 295, 345, 378, 425, 426, 427, 469, 470, 491, 492, 500, 515, 532, 624, 625, 626, 627, 628, 629, 677, 678, 733, 769, 816, 817, 818, 862, 863, 887], "dot": [55, 532, 589, 614, 887], "product": [55, 168, 233, 300, 304, 532, 681, 686, 887], "fill_nul": [55, 130, 233, 458, 532, 556, 604, 614, 849, 887], "sum": [55, 127, 134, 139, 141, 151, 170, 213, 233, 245, 280, 300, 301, 340, 350, 395, 408, 409, 411, 414, 415, 416, 478, 479, 491, 493, 500, 508, 511, 532, 547, 550, 555, 561, 563, 580, 589, 614, 681, 682, 728, 729, 794, 795, 797, 800, 801, 802, 887], "167": 55, "47": 55, "callabl": [56, 57, 58, 59, 100, 118, 134, 169, 215, 233, 245, 280, 380, 381, 407, 481, 491, 492, 500, 507, 515, 532, 572, 579, 608, 614, 623, 660, 793, 887], "decor": [56, 57, 58, 59, 111, 112], "access": [56, 57, 58, 59, 152, 178, 179, 233, 604, 614], "by_first_letter_of_column_nam": 56, "f": [56, 90, 101, 118, 122, 138, 153, 157, 193, 201, 204, 215, 233, 245, 280, 380, 381, 423, 440, 458, 481, 487, 491, 492, 500, 507, 515, 532, 572, 608, 614, 660, 831, 849], "fromkei": [56, 58], "by_first_letter_of_column_valu": 56, "starts_with": [56, 435, 439, 830], "slice": [56, 62, 127, 143, 153, 191, 233, 266, 278, 407, 408, 409, 410, 411, 412, 414, 415, 416, 532, 547, 555, 572, 580, 589, 590, 591, 614, 646, 658, 729, 793, 794, 795, 796, 797, 798, 800, 801, 802, 887], "to_seri": [56, 60, 233, 280, 660], "xx": [56, 58], "xy": [56, 58], "yy": [56, 58], "yz": [56, 58], "schema": [56, 57, 58, 63, 75, 78, 79, 80, 81, 83, 89, 90, 94, 98, 100, 104, 110, 111, 118, 119, 120, 126, 127, 162, 165, 233, 280, 385, 485, 520, 545, 546, 553, 572, 577, 606, 608, 614, 676, 887], "a1": [56, 58], "a2": [56, 58], "b1": [56, 58], "b2": [56, 58], "pow_n": 57, "powersofn": 57, "next": [57, 282, 401, 532, 787, 887], "p": [57, 169, 233, 579, 614], "ceil": [57, 532, 887], "previou": [57, 116, 396, 532, 782, 887], "floor": [57, 532, 887], "nearest": [57, 155, 172, 225, 233, 290, 353, 400, 412, 514, 532, 568, 581, 614, 670, 740, 746, 786, 798, 887], "24": [57, 118, 127, 141, 233, 300, 302, 314, 532, 563, 614, 683, 697, 887], "55": 57, "001": [57, 316, 317, 319, 324, 496, 703, 705, 711], "next_pow2": 57, "prev_pow2": 57, "nearest_pow2": 57, "128": [57, 782, 887], "split_by_column_dtyp": 58, "dtype": [58, 78, 79, 81, 83, 87, 89, 90, 100, 109, 110, 111, 112, 115, 140, 141, 155, 198, 233, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 267, 279, 288, 291, 292, 293, 294, 295, 300, 301, 311, 314, 317, 319, 321, 324, 330, 337, 344, 346, 379, 380, 403, 404, 408, 409, 410, 411, 412, 414, 415, 416, 423, 426, 427, 434, 452, 465, 467, 469, 470, 471, 475, 476, 481, 482, 486, 487, 489, 498, 502, 506, 507, 520, 532, 562, 563, 568, 614, 637, 638, 639, 647, 659, 667, 672, 673, 674, 675, 681, 682, 694, 697, 703, 705, 708, 711, 717, 724, 729, 734, 750, 792, 806, 813, 825, 843, 849, 858, 869, 870, 871, 887], "collect": [58, 62, 101, 102, 156, 193, 233, 245, 395, 482, 487, 502, 516, 520, 532, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 564, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 581, 583, 584, 586, 587, 588, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 605, 608, 614], "31": [59, 106, 309, 310, 311, 322, 335, 458, 494, 495, 502, 692, 693, 694, 849], "42": [59, 141, 142, 233, 563, 614, 743, 887], "961": 59, "1764": 59, "4160": 59, "condit": [60, 125, 132, 178, 233, 439, 456, 552, 558, 614], "eager": [60, 140, 204, 233, 482, 502, 506, 516, 520, 531, 541, 562, 614], "indic": [60, 84, 88, 89, 90, 93, 97, 100, 109, 110, 112, 140, 141, 233, 279, 361, 364, 365, 367, 368, 369, 408, 409, 410, 411, 412, 414, 415, 416, 419, 425, 467, 532, 562, 563, 614, 659, 751, 755, 756, 757, 758, 759, 805, 816, 860, 887], "where": [60, 99, 125, 129, 152, 161, 179, 209, 233, 336, 340, 419, 428, 518, 524, 532, 552, 576, 614, 622, 633, 723, 728, 805, 819, 823, 876, 878, 887], "evalu": [60, 130, 132, 155, 210, 233, 302, 357, 359, 363, 480, 482, 497, 520, 532, 558, 565, 567, 568, 602, 603, 614, 633, 683, 878, 887], "eagerli": [60, 516], "oppos": 60, "lazili": [60, 89, 90, 100, 101, 103, 104, 105], "u32": [60, 140, 166, 211, 216, 224, 226, 233, 240, 252, 253, 254, 255, 256, 257, 258, 269, 296, 297, 310, 313, 316, 320, 322, 326, 327, 329, 335, 336, 374, 391, 394, 401, 419, 436, 444, 447, 471, 474, 489, 512, 532, 562, 605, 614, 632, 633, 634, 649, 667, 693, 696, 702, 704, 707, 709, 710, 713, 714, 716, 722, 723, 787, 827, 835, 838, 871, 874, 875, 887], "build": 61, "wa": 61, "compil": [61, 257, 258, 637, 638], "gate": 61, "info": [61, 91, 101, 106], "otherwis": [61, 162, 182, 233, 284, 291, 292, 293, 341, 342, 343, 403, 435, 437, 524, 532, 577, 586, 614, 623, 663, 673, 674, 675, 730, 731, 732, 789, 807, 808, 826, 828, 887], "version": [61, 91, 101, 106, 209, 233, 346, 515, 532, 602, 614, 734, 887], "follow": [61, 89, 90, 91, 100, 101, 118, 140, 141, 155, 169, 205, 233, 245, 325, 328, 333, 401, 408, 409, 410, 411, 412, 414, 415, 416, 481, 525, 526, 528, 532, 533, 536, 537, 538, 561, 562, 563, 568, 579, 614, 712, 715, 720, 787, 807, 808, 879, 881, 883, 887, 890, 891, 892, 894], "depend": [61, 106, 245, 257, 258, 385, 401, 481, 499, 502, 532, 637, 638, 787, 887], "host": [61, 89, 93, 97, 103, 105], "git": 61, "lazy_fram": 62, "type_coercion": [62, 547, 549, 555, 580, 589, 590, 591, 614], "predicate_pushdown": [62, 547, 549, 555, 572, 580, 589, 590, 591, 614], "projection_pushdown": [62, 547, 549, 555, 572, 580, 589, 590, 591, 614], "simplify_express": [62, 547, 549, 555, 580, 589, 590, 591, 614], "no_optim": [62, 547, 555, 572, 580, 590, 591, 614], "slice_pushdown": [62, 547, 549, 555, 572, 580, 589, 590, 591, 614], "common_subplan_elimin": [62, 547, 549, 555, 580, 589, 614], "multipl": [62, 63, 89, 90, 100, 103, 105, 110, 112, 127, 129, 132, 140, 145, 153, 167, 170, 188, 210, 213, 233, 279, 344, 386, 390, 405, 408, 409, 410, 411, 412, 414, 415, 416, 431, 483, 491, 492, 498, 500, 507, 515, 524, 532, 551, 558, 562, 593, 603, 607, 614, 622, 659, 729, 774, 791, 887], "graph": [62, 156, 233, 565, 604, 614], "parallel": [62, 63, 86, 97, 99, 105, 140, 155, 156, 169, 233, 262, 302, 532, 541, 562, 567, 568, 614, 642, 683, 887], "threadpool": 62, "coercion": [62, 404, 532, 547, 555, 580, 589, 590, 591, 614], "optim": [62, 97, 100, 103, 104, 105, 152, 156, 169, 173, 179, 233, 547, 549, 550, 555, 572, 580, 589, 590, 591, 605, 614], "predic": [62, 100, 102, 103, 104, 105, 132, 178, 233, 350, 478, 524, 532, 547, 555, 558, 572, 580, 583, 589, 590, 591, 605, 614, 738, 807, 808, 887], "pushdown": [62, 547, 555, 572, 580, 583, 589, 590, 591, 605, 614, 807, 808, 887], "project": [62, 100, 101, 103, 104, 105, 245, 430, 431, 532, 547, 555, 572, 580, 583, 589, 590, 591, 606, 614], "simplifi": [62, 547, 555, 580, 589, 590, 591, 614], "turn": [62, 89, 90, 100, 114, 476, 532, 547, 555, 572, 580, 590, 591, 614], "off": [62, 89, 90, 100, 114, 476, 532, 547, 555, 572, 580, 590, 591, 614], "Will": [62, 201, 233, 508, 511, 547, 555, 580, 589, 614, 887], "try": [62, 75, 76, 89, 90, 92, 93, 97, 100, 103, 105, 458, 547, 555, 580, 589, 614, 849], "branch": [62, 547, 555, 580, 589, 614], "subplan": [62, 547, 555, 580, 589, 614], "occur": [62, 390, 401, 532, 547, 555, 580, 589, 614, 774, 787, 887], "part": [62, 78, 454, 455, 547, 555, 580, 589, 604, 614, 693, 696, 702, 704, 707, 709, 710, 716, 726, 845, 846], "fashion": [62, 154, 233, 547, 555, 580, 589, 614], "alpha": [62, 341, 342, 343, 532, 547, 555, 580, 589, 614, 730, 731, 732, 887], "item": [63, 90, 180, 233, 260, 265, 267, 346, 418, 455, 532, 640, 645, 647, 734, 804, 846, 887], "rechunk": [63, 78, 82, 89, 90, 93, 97, 100, 103, 104, 105, 129, 233, 532, 622, 671, 775, 887], "concatmethod": 63, "vertic": [63, 129, 204, 207, 233, 434, 508, 825], "aggreg": [63, 89, 90, 134, 139, 140, 158, 159, 160, 163, 165, 170, 171, 172, 189, 190, 204, 206, 213, 214, 217, 219, 233, 240, 350, 376, 380, 395, 407, 408, 409, 410, 411, 412, 414, 415, 416, 476, 491, 492, 493, 500, 505, 508, 511, 515, 521, 532, 562, 572, 573, 574, 575, 578, 581, 594, 595, 600, 607, 614, 793, 794, 795, 797, 800, 801, 802, 887], "concaten": [63, 134, 169, 233, 579, 614, 671, 775, 887], "sure": [63, 78, 82, 89, 90, 93, 99, 139, 173, 233, 482, 561, 614], "contigu": [63, 78, 82, 89, 90, 93, 100, 103, 104, 105, 173, 233], "diagon": [63, 201, 233], "strategi": [63, 89, 109, 110, 111, 112, 131, 140, 154, 155, 164, 233, 280, 349, 532, 557, 562, 567, 568, 614, 660, 737, 887], "vstack": [63, 129, 233], "find": [63, 133, 233, 419, 483, 532, 805, 887], "miss": [63, 78, 89, 90, 100, 130, 233, 282, 354, 358, 365, 367, 518, 532, 556, 614, 877, 887], "stack": [63, 145, 207, 233], "length": [63, 64, 87, 110, 115, 140, 141, 187, 233, 275, 302, 328, 333, 386, 407, 408, 409, 410, 411, 412, 414, 415, 416, 429, 445, 447, 450, 452, 461, 482, 532, 562, 563, 580, 592, 614, 655, 660, 671, 683, 692, 715, 720, 766, 780, 793, 794, 795, 796, 797, 798, 800, 801, 802, 820, 836, 838, 841, 843, 852, 887], "don": [63, 204, 233, 245, 262, 302, 481, 532, 642, 683, 806, 877, 887], "t": [63, 92, 100, 118, 169, 204, 233, 245, 262, 302, 340, 341, 342, 343, 446, 451, 457, 458, 481, 524, 532, 579, 614, 642, 683, 728, 730, 731, 732, 806, 837, 842, 848, 849, 877, 887], "match": [63, 74, 78, 79, 80, 81, 83, 107, 108, 131, 155, 178, 233, 435, 436, 439, 442, 443, 446, 448, 449, 451, 456, 457, 458, 557, 568, 614, 826, 827, 830, 833, 834, 837, 839, 840, 842, 847, 848, 849], "relev": 63, "execut": [63, 156, 233, 262, 544, 580, 614, 642], "df_h1": 63, "l1": 63, "l2": 63, "df_h2": 63, "r1": 63, "r2": 63, "r3": 63, "df_d1": 63, "df_d2": 63, "bin": [64, 526, 881], "label": [64, 78, 407, 408, 409, 410, 411, 412, 414, 415, 416, 532, 580, 614, 793, 794, 795, 796, 797, 798, 800, 801, 802, 887], "break_point_label": 64, "break_point": 64, "category_label": 64, "discret": [64, 261, 303, 340, 532, 641, 685, 728, 887], "creat": [64, 65, 78, 81, 83, 101, 110, 111, 112, 119, 120, 140, 141, 166, 170, 205, 209, 210, 233, 309, 328, 333, 402, 452, 476, 482, 487, 494, 495, 496, 532, 545, 546, 549, 550, 562, 563, 602, 603, 614, 672, 676, 688, 692, 715, 720, 780, 788, 843, 869, 887], "assign": [64, 110, 140, 233, 401, 454, 455, 532, 562, 614, 787, 845, 846, 887], "must": [64, 78, 79, 91, 101, 140, 141, 155, 162, 178, 233, 280, 344, 380, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 572, 577, 614, 887], "len": [64, 110, 111, 153, 233, 297, 405, 445, 450, 461, 532, 791, 836, 841, 852, 887], "breakpoint": 64, "experiment": [64, 102, 204, 210, 233, 302, 328, 408, 409, 410, 411, 412, 414, 415, 416, 532, 603, 614, 683, 715, 887], "being": [64, 89, 90, 100, 102, 204, 233, 302, 328, 408, 409, 410, 411, 412, 414, 415, 416, 497, 524, 532, 683, 715, 887], "consid": [64, 89, 90, 100, 102, 125, 135, 161, 202, 204, 210, 213, 233, 291, 292, 293, 302, 328, 408, 409, 410, 411, 412, 414, 415, 416, 430, 491, 500, 532, 552, 564, 571, 576, 598, 603, 614, 673, 674, 675, 683, 715, 806, 807, 808, 887], "break": [64, 102, 204, 233, 302, 328, 408, 409, 410, 411, 412, 414, 415, 416, 532, 683, 715, 887], "30": [64, 129, 140, 145, 169, 175, 176, 194, 210, 233, 252, 253, 254, 256, 303, 309, 311, 315, 327, 328, 333, 339, 355, 423, 532, 562, 579, 603, 614, 692, 694, 715, 720], "inf": [64, 111, 112, 251, 361, 364, 532, 629, 751, 755, 782, 887], "low": [65, 140, 233, 329, 482, 562, 614], "high": [65, 140, 233, 329, 482, 562, 614], "interv": [65, 140, 141, 205, 233, 328, 329, 333, 359, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 614, 693, 695, 696, 702, 704, 707, 709, 710, 713, 714, 715, 716, 718, 719, 720, 722, 723, 726], "close": [65, 140, 141, 233, 359, 408, 409, 410, 411, 412, 414, 415, 416, 428, 532, 562, 563, 614, 819, 887], "closedinterv": [65, 140, 141, 233, 359, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 614], "lower": [65, 100, 140, 172, 225, 233, 359, 379, 400, 403, 412, 482, 514, 532, 555, 562, 581, 614, 786, 789, 798, 887], "bound": [65, 89, 90, 127, 140, 233, 265, 279, 359, 379, 475, 482, 532, 562, 614, 645, 659, 729, 887], "upper": [65, 89, 90, 127, 140, 233, 359, 475, 482, 532, 562, 614, 729, 887], "period": [65, 140, 141, 184, 185, 233, 274, 328, 333, 341, 342, 343, 396, 421, 422, 532, 562, 563, 587, 588, 614, 654, 715, 720, 730, 731, 732, 782, 811, 812, 887], "It": [65, 118, 162, 169, 215, 233, 245, 280, 334, 385, 532, 572, 577, 608, 614, 721, 807, 808, 887], "like": [65, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 154, 233, 262, 388, 401, 508, 511, 521, 532, 555, 582, 614, 642, 787, 887], "durat": [65, 155, 205, 233, 311, 314, 317, 319, 321, 324, 330, 337, 471, 532, 568, 614, 694, 697, 703, 705, 708, 711, 717, 724, 871, 887], "3d12h4m25": [65, 140, 141, 155, 205, 233, 328, 333, 562, 563, 568, 614, 715, 720], "hour": [65, 140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 495, 496, 532, 562, 563, 568, 614, 712, 715, 720], "minut": [65, 140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 495, 496, 532, 562, 563, 568, 614, 712, 715, 720], "tempor": [65, 140, 141, 233, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 614], "window": [65, 140, 141, 233, 302, 328, 333, 341, 342, 343, 395, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 487, 532, 562, 563, 614, 683, 715, 720, 730, 731, 732, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 887], "granular": 65, "finer": 65, "than": [65, 77, 81, 83, 89, 90, 102, 111, 112, 118, 139, 152, 155, 178, 179, 180, 204, 215, 233, 245, 371, 418, 428, 430, 445, 450, 455, 461, 508, 511, 518, 521, 532, 561, 568, 590, 591, 608, 614, 804, 819, 836, 841, 846, 852, 887], "1d": [65, 140, 141, 155, 205, 233, 307, 314, 321, 325, 328, 333, 337, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 690, 695, 697, 699, 700, 701, 706, 708, 712, 715, 718, 719, 720, 723, 724], "also": [65, 80, 111, 112, 126, 139, 140, 141, 162, 165, 188, 210, 233, 298, 301, 308, 344, 358, 401, 408, 409, 410, 411, 412, 414, 415, 416, 491, 492, 500, 502, 515, 531, 532, 562, 563, 577, 593, 603, 604, 614, 691, 787, 887], "permut": 65, "1mo": [65, 140, 141, 155, 205, 233, 308, 311, 325, 328, 331, 333, 334, 338, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 691, 694, 709, 712, 713, 714, 715, 720, 722, 725], "dtrang": 65, "1985": 65, "00": [65, 140, 155, 205, 233, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 458, 496, 562, 568, 614, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 849], "04": [65, 102, 140, 205, 233, 308, 309, 310, 311, 314, 320, 321, 322, 326, 328, 329, 330, 331, 334, 335, 336, 337, 338, 458, 496, 562, 614, 691, 694, 697, 702, 704, 707, 708, 709, 710, 714, 716, 717, 718, 722, 723, 724, 725, 849], "05": [65, 102, 107, 108, 155, 205, 233, 308, 309, 311, 329, 331, 334, 338, 568, 614, 691, 692, 693, 694, 715, 720, 723, 725], "07": [65, 308, 309, 310, 326, 328, 333, 336, 458, 502, 692, 693, 723, 849], "08": [65, 107, 108, 141, 233, 309, 328, 458, 496, 563, 614, 715, 720, 849], "zone": [65, 308, 334, 338, 691, 721, 725], "america": [65, 691], "new_york": [65, 691], "\u03bc": [65, 140, 141, 155, 205, 233, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 502, 562, 563, 568, 614, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726], "est": [65, 691], "encount": [66, 140, 233, 392, 393, 443, 491, 500, 518, 532, 562, 614, 778, 779, 834, 887], "error": [66, 89, 90, 100, 178, 233, 267, 279, 284, 288, 371, 435, 437, 443, 458, 532, 608, 647, 659, 663, 667, 826, 828, 834, 849, 887], "duplic": [68, 148, 154, 155, 202, 233, 360, 483, 532, 567, 568, 598, 614, 749, 887], "certain": [69, 91, 101, 146, 205, 233, 344, 498, 532, 547, 580, 590, 591, 614, 887], "structur": [70, 75, 76, 129, 169, 233, 579, 614, 622, 887], "least": [71, 111, 396, 476, 532, 782, 875, 887], "expect": [71, 74, 77, 245, 481, 532, 570, 572, 614], "unexpect": [73, 233], "caus": [73, 89, 90, 100, 129, 233, 622, 887], "panic": 73, "combin": [75, 76, 140, 141, 142, 155, 205, 213, 233, 333, 446, 451, 457, 562, 563, 568, 589, 614, 720, 837, 842, 848], "mismatch": 75, "incompat": 76, "pa": [78, 101, 102, 233], "chunkedarrai": [78, 164, 233, 686, 887], "schema_overrid": [78, 79, 80, 81, 82, 83, 153, 233], "schemadict": [78, 79, 80, 81, 82, 83, 100, 181, 233, 572, 585, 608, 614], "zero": [78, 88, 89, 90, 93, 97, 131, 152, 178, 193, 233, 348, 349, 419, 428, 461, 532, 557, 614, 660, 737, 819, 852, 865, 869, 887], "copi": [78, 119, 120, 153, 193, 209, 210, 233, 461, 545, 546, 602, 603, 614, 619, 672, 676, 688, 852, 865, 869, 887], "most": [78, 386, 390, 396, 455, 476, 532, 774, 782, 846, 875, 887], "closest": 78, "dimens": [78, 79, 81, 83, 233, 405, 532, 791, 887], "column_1": [78, 118, 201, 233], "pair": [78, 79, 80, 81, 83, 174, 233, 583, 614], "declar": [78, 79, 80, 81, 83, 233], "sever": [78, 79, 80, 81, 83, 233, 520], "wai": [78, 79, 80, 81, 83, 153, 169, 233, 579, 614], "As": [78, 79, 80, 81, 83, 92, 233, 516], "auto": [78, 79, 80, 81, 83, 97, 105, 201, 233], "automat": [78, 79, 80, 81, 83, 89, 90, 99, 100, 111, 112, 233, 446, 451, 457, 458, 837, 842, 848, 849, 887], "equival": [78, 79, 80, 81, 83, 91, 101, 151, 165, 233, 447, 764, 838, 850, 851, 887], "form": [78, 79, 80, 81, 83, 152, 179, 204, 233, 396, 532, 782, 887], "suppli": [78, 79, 80, 81, 83, 178, 233], "here": [78, 79, 80, 81, 83, 91, 99, 101, 110, 111, 112, 233, 443, 834], "overwrit": [78, 79, 80, 81, 83, 89, 90, 100, 233, 555, 614], "them": [78, 79, 80, 81, 83, 129, 140, 141, 155, 162, 205, 233, 267, 392, 393, 487, 532, 562, 563, 568, 577, 614, 622, 647, 778, 779, 887], "param": [78, 79, 80, 81, 83, 89, 90, 100, 111, 112, 178, 233], "overridden": [78, 79, 81, 83, 233], "construct": [78, 79, 80, 81, 82, 83, 233, 560, 582, 614, 887], "schemadefinit": [79, 80, 81, 233], "clone": [79, 80, 81, 82, 83, 119, 197, 198, 233, 545, 614, 672, 868, 869, 877, 887], "two": [79, 81, 83, 99, 134, 161, 162, 170, 200, 213, 214, 215, 233, 240, 304, 309, 430, 431, 467, 479, 490, 513, 518, 520, 532, 576, 577, 608, 614, 686, 692, 887], "dimension": [79, 81, 83, 233, 887], "infer_schema_length": [80, 83, 89, 90, 92, 100, 104, 233], "mani": [80, 83, 99, 129, 233, 622, 887], "scan": [80, 83, 89, 90, 97, 100, 101, 102, 103, 104, 105, 555, 564, 571, 614], "slow": [80, 83, 89, 90, 100, 195, 233, 302, 532, 683, 887], "NOT": [80, 107, 108, 463, 561, 614], "actual": [80, 92, 111, 112, 814, 887], "thei": [80, 107, 116, 156, 233, 344, 407, 532, 614, 793, 887], "appear": [80, 107, 474, 532, 874, 887], "typic": 80, "clearer": 80, "after": [80, 88, 89, 90, 93, 97, 100, 103, 104, 105, 129, 203, 232, 233, 401, 461, 532, 599, 614, 622, 691, 787, 852, 887], "load": [80, 91, 101, 233, 541, 564, 571, 614], "want": [80, 118, 129, 165, 233, 291, 292, 293, 350, 380, 408, 409, 410, 411, 412, 414, 415, 416, 491, 500, 532, 547, 564, 571, 614, 622, 673, 674, 675, 869, 887], "some": [80, 89, 90, 100, 125, 233, 552, 614, 754, 887], "_partial_": [80, 233], "omit": [80, 110, 111, 112, 165, 233], "similarli": 80, "ad": [80, 140, 201, 209, 210, 233, 244, 347, 491, 492, 532, 562, 602, 603, 614, 735, 887], "partial": 80, "present": [80, 107, 111, 363, 532, 877, 887], "np": [81, 233, 751, 755, 756, 757, 793, 887], "ndarrai": [81, 132, 197, 233, 467, 532, 686, 805, 808, 860, 869, 887], "numpi": [81, 106, 132, 168, 197, 233, 392, 393, 467, 532, 751, 755, 756, 757, 778, 779, 793, 805, 860, 869, 877, 887], "columnar": [81, 83, 152, 179, 233], "interpret": [81, 83, 89, 90, 100, 233], "yield": [81, 83, 89, 90, 100, 127, 129, 201, 233, 622, 729, 887], "conclus": [81, 83, 233], "nan_to_non": 82, "panda": [82, 92, 106, 198, 233, 471, 532, 870, 871, 887], "index": [82, 85, 106, 133, 140, 141, 146, 155, 170, 176, 178, 187, 199, 205, 211, 233, 240, 252, 253, 254, 255, 256, 257, 258, 265, 275, 279, 325, 408, 409, 410, 411, 412, 414, 415, 416, 419, 429, 441, 452, 467, 483, 532, 562, 563, 568, 592, 605, 614, 630, 631, 632, 633, 634, 635, 637, 638, 645, 655, 659, 712, 780, 805, 808, 820, 832, 843, 860, 887], "datetimeindex": [82, 686, 887], "instal": [82, 89, 90, 93, 97, 99, 101, 106, 168, 197, 198, 233, 589, 614, 869, 887], "nan": [82, 107, 108, 111, 130, 233, 305, 306, 348, 358, 365, 367, 368, 369, 382, 389, 392, 393, 518, 532, 556, 614, 625, 629, 687, 736, 756, 757, 778, 779, 793, 887], "convert": [82, 84, 91, 92, 101, 194, 195, 196, 197, 198, 200, 233, 280, 458, 660, 849, 856, 857, 868, 869, 870, 877, 887], "pd": [82, 92, 233, 471, 532, 871, 887], "pd_df": 82, "pd_seri": 82, "dummi": [84, 196, 233, 866, 887], "subset": [84, 125, 165, 196, 202, 233, 552, 598, 614], "to_dummi": [84, 233, 887], "foo_1": [84, 196, 233], "foo_2": [84, 196, 233], "bar_3": [84, 196, 233], "bar_4": [84, 196, 233], "ham_a": [84, 196, 233], "ham_b": [84, 196, 233], "get": [85, 94, 98, 113, 121, 126, 136, 137, 140, 141, 143, 144, 148, 150, 157, 164, 178, 181, 183, 187, 191, 196, 208, 218, 227, 233, 240, 252, 253, 254, 255, 256, 264, 268, 269, 281, 297, 298, 299, 300, 301, 312, 351, 356, 360, 362, 370, 373, 375, 382, 383, 384, 385, 387, 389, 392, 393, 400, 429, 433, 444, 447, 465, 466, 473, 477, 499, 504, 508, 509, 510, 511, 519, 522, 523, 532, 548, 553, 559, 562, 563, 564, 569, 571, 585, 592, 596, 601, 609, 610, 614, 630, 631, 632, 633, 634, 635, 644, 648, 649, 661, 671, 679, 680, 681, 682, 695, 741, 744, 749, 752, 762, 767, 770, 772, 773, 775, 778, 779, 783, 784, 786, 820, 823, 835, 838, 859, 865, 866, 873, 876, 877, 887], "uint32": [85, 106, 127, 233, 254, 256, 257, 258, 269, 310, 313, 316, 318, 320, 322, 323, 326, 327, 329, 335, 336, 404, 436, 444, 447, 467, 471, 532, 633, 637, 638, 649, 667, 693, 696, 702, 704, 707, 709, 710, 713, 714, 716, 722, 723, 729, 806, 827, 871, 887], "regular": [85, 152, 178, 179, 205, 233, 344, 486, 498, 508, 511, 521, 532], "uint64": [85, 142, 233, 257, 258, 355, 403, 532, 637, 638, 743, 789, 887], "bigidx": 85, "read": [86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 129, 233, 380, 532, 555, 560, 582, 614, 622, 887], "over": [86, 89, 90, 91, 100, 101, 111, 118, 129, 139, 152, 153, 178, 179, 201, 212, 215, 233, 245, 302, 349, 358, 380, 381, 407, 408, 409, 410, 411, 412, 414, 415, 416, 481, 491, 492, 500, 507, 515, 532, 608, 622, 623, 683, 793, 794, 795, 797, 801, 887], "avail": [86, 91, 101, 110, 232, 401, 525, 526, 528, 531, 532, 533, 536, 537, 538, 541, 542, 555, 613, 614, 787, 879, 881, 883, 887, 890, 891, 892], "fetch": [86, 100, 156, 233, 545, 547, 564, 571, 599, 614], "ideal": 86, "read_csv_batch": [86, 542], "tpch": [86, 90], "tables_scale_100": [86, 90], "lineitem": [86, 90, 99], "tbl": [86, 90], "parse_d": [86, 89, 90, 100], "polarsdatatyp": [87, 89, 90, 94, 98, 109, 110, 111, 112, 115, 118, 126, 233, 245, 288, 344, 380, 532, 553, 614, 623, 667, 887], "new": [87, 115, 116, 118, 123, 125, 145, 146, 165, 166, 174, 175, 192, 204, 209, 210, 233, 241, 309, 346, 358, 381, 448, 449, 454, 455, 462, 463, 468, 532, 541, 552, 583, 597, 602, 603, 608, 614, 619, 623, 688, 692, 734, 780, 790, 839, 840, 845, 846, 853, 855, 861, 867, 878, 887], "In": [87, 91, 101, 105, 111, 112, 115, 118, 127, 129, 140, 141, 165, 233, 245, 385, 430, 431, 532, 562, 563, 614, 622, 729, 788, 887], "probabl": [87, 115, 340, 532, 728, 887], "n_row": [88, 89, 90, 93, 97, 100, 103, 104, 105, 153, 233, 555, 614], "accept": [88, 89, 90, 91, 93, 97, 188, 233], "start": [88, 89, 90, 93, 97, 100, 103, 104, 105, 139, 140, 156, 187, 205, 211, 233, 275, 287, 310, 312, 313, 315, 320, 322, 326, 327, 328, 329, 332, 333, 335, 336, 339, 344, 359, 429, 435, 439, 452, 456, 486, 491, 498, 500, 524, 532, 561, 562, 580, 592, 605, 614, 655, 666, 690, 691, 693, 695, 696, 702, 704, 707, 709, 710, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726, 820, 830, 843, 847, 887], "stop": [88, 89, 90, 93, 97, 100, 103, 104, 105, 310, 312, 313, 315, 320, 322, 326, 327, 328, 329, 332, 333, 335, 336, 339, 690, 691, 693, 695, 696, 702, 704, 707, 709, 710, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 725, 726], "textio": 89, "new_column": [89, 90, 92], "comment_char": [89, 90, 100], "quote_char": [89, 90, 100], "skip_row": [89, 90, 100], "missing_utf8_is_empty_str": [89, 90, 100], "ignore_error": [89, 90, 100], "n_thread": [89, 90], "8192": 89, "csvencod": [89, 90, 100], "low_memori": [89, 90, 97, 100, 104, 105], "storage_opt": [89, 91, 93, 97, 101, 103, 105], "skip_rows_after_head": [89, 90, 100], "row_count_nam": [89, 90, 93, 97, 100, 103, 104, 105], "row_count_offset": [89, 90, 93, 97, 100, 103, 104, 105], "sample_s": [89, 90], "eol_char": [89, 90, 100], "By": [89, 90, 92, 100, 155, 188, 233, 506, 568, 614, 823, 869, 876, 887], "we": [89, 90, 92, 100, 139, 155, 188, 210, 233, 262, 506, 524, 568, 572, 593, 603, 614, 623, 642, 887], "handler": [89, 90, 92], "g": [89, 90, 91, 92, 93, 97, 101, 103, 105, 204, 233, 344, 420, 423, 498, 532, 583, 614, 806, 809, 869, 887], "via": [89, 90, 92, 100, 103, 105, 152, 179, 210, 233, 603, 614], "builtin": [89, 90, 92], "open": [89, 90, 92, 93, 97, 103, 105], "stringio": [89, 90], "fsspec": [89, 90, 93, 97, 101, 103, 105, 106], "remot": [89, 90, 93, 97], "first": [89, 90, 92, 100, 104, 118, 138, 140, 143, 155, 157, 164, 169, 170, 191, 201, 202, 205, 218, 233, 254, 255, 256, 262, 265, 266, 302, 325, 328, 356, 362, 375, 419, 441, 443, 448, 449, 458, 483, 485, 491, 500, 504, 532, 547, 562, 564, 568, 571, 579, 598, 604, 609, 614, 632, 635, 642, 645, 646, 660, 683, 684, 712, 715, 744, 752, 767, 805, 832, 834, 839, 840, 849, 887], "dataset": [89, 90, 100, 102, 372, 532, 541, 765, 887], "autogener": [89, 90, 100], "column_x": [89, 90, 100], "enumer": [89, 90, 100, 153, 233], "everi": [89, 90, 100, 140, 192, 195, 205, 233, 257, 258, 261, 263, 265, 266, 275, 278, 297, 298, 299, 300, 301, 302, 328, 333, 346, 440, 468, 491, 492, 532, 555, 562, 597, 614, 637, 638, 641, 643, 645, 646, 655, 658, 679, 680, 681, 682, 683, 715, 720, 734, 831, 861, 887], "shorter": [89, 90], "remain": [89, 90, 100, 127, 139, 233, 245, 454, 455, 532, 561, 572, 614, 729, 845, 846, 887], "comment": [89, 90, 100], "instanc": [89, 90, 100, 111, 112, 129, 134, 233, 280, 288, 386, 408, 409, 410, 411, 412, 414, 415, 416, 491, 500, 532, 572, 605, 614, 622, 667, 887], "special": [89, 90, 100, 623, 887], "handl": [89, 90, 100, 102, 261, 303, 461, 532, 641, 685, 852, 887], "escap": [89, 90, 100], "dure": [89, 90, 100, 116, 129, 233, 622, 887], "provid": [89, 90, 91, 99, 100, 101, 111, 112, 210, 233, 280, 284, 285, 437, 438, 441, 443, 502, 541, 590, 591, 603, 614, 663, 664, 828, 829, 832, 834, 894], "equal": [89, 90, 100, 107, 108, 114, 135, 140, 155, 162, 233, 407, 408, 409, 410, 411, 412, 414, 415, 416, 444, 445, 450, 461, 482, 532, 562, 568, 577, 614, 793, 794, 795, 796, 797, 798, 800, 801, 802, 806, 835, 836, 841, 852, 887], "would": [89, 90, 100, 254, 256, 265, 385, 401, 483, 532, 632, 635, 645, 787, 869, 887], "prefer": [89, 90, 91, 100, 101, 118, 129, 152, 179, 215, 233, 245, 407, 532, 608, 614, 622, 793, 887], "treat": [89, 90, 100, 435, 448, 449, 826, 839, 840], "check": [89, 90, 100, 107, 108, 135, 149, 151, 233, 242, 243, 260, 283, 286, 287, 359, 363, 435, 439, 456, 532, 572, 614, 620, 621, 640, 662, 665, 666, 747, 748, 750, 753, 754, 760, 761, 763, 764, 806, 826, 830, 847, 887], "might": [89, 90, 100, 385, 474, 532], "issu": [89, 90, 92, 100, 300, 301, 465, 532, 681, 682, 858, 887], "alwai": [89, 118, 215, 233, 245, 385, 532, 572, 608, 614], "physic": [89, 90, 155, 233, 289, 471, 532, 544, 567, 568, 614, 669, 871, 887], "cpu": [89, 90], "your": [89, 90, 107, 108, 152, 233, 458, 547, 564, 571, 572, 614, 849], "system": [89, 90], "done": [89, 90, 100, 102, 138, 155, 233, 244, 288, 445, 450, 532, 568, 593, 607, 614, 667, 836, 841, 887], "buffer": [89, 90, 127, 152, 233, 729, 887], "onc": [89, 90, 92, 152, 180, 233, 418, 532, 544, 614, 804, 887], "modifi": [89, 90, 100, 116, 145, 152, 207, 233, 308, 337, 691, 724, 790, 850, 851, 887], "multi": [89, 90], "lossi": [89, 90, 100], "replac": [89, 90, 100, 130, 131, 176, 201, 209, 210, 233, 309, 449, 556, 602, 603, 614, 692, 807, 808, 840, 887], "decod": [89, 90], "im": [89, 90], "usag": [89, 90, 100, 111, 112, 186, 233, 814, 887], "expens": [89, 90, 97, 100, 104, 105, 139, 152, 178, 179, 201, 202, 233, 245, 532, 561, 598, 614, 622, 887], "nativ": [89, 93, 97, 118, 215, 233, 245, 532, 608], "parser": 89, "even": 89, "possibl": [89, 118, 152, 179, 215, 233, 245, 379, 385, 455, 475, 532, 608, 846, 887], "differ": [89, 102, 129, 140, 141, 201, 233, 261, 303, 308, 310, 325, 326, 335, 392, 393, 458, 474, 499, 502, 508, 511, 532, 562, 563, 614, 622, 641, 685, 691, 693, 712, 713, 722, 778, 779, 806, 849, 887], "regard": [89, 518], "sens": [89, 93, 97, 103, 105, 140, 141, 162, 205, 233, 562, 563, 577, 614], "particular": [89, 93, 97, 103, 105, 127, 233, 729, 887], "storag": [89, 91, 93, 97, 101, 103, 105], "connect": [89, 93, 97, 99, 102, 103, 105, 542], "port": [89, 93, 97, 99, 103, 105], "usernam": [89, 93, 97, 99, 103, 105], "password": [89, 93, 97, 99, 103, 105], "skip": [89, 90, 92, 100, 204, 233, 623, 887], "insert": [89, 90, 93, 97, 100, 103, 104, 105, 146, 175, 201, 203, 233, 419, 434, 458, 461, 532, 599, 614, 805, 825, 849, 852, 887], "count": [89, 90, 93, 97, 100, 103, 104, 105, 122, 140, 141, 155, 165, 166, 170, 201, 205, 211, 215, 224, 233, 297, 325, 374, 391, 394, 408, 409, 410, 411, 412, 414, 415, 416, 436, 474, 476, 512, 532, 562, 563, 568, 605, 608, 614, 684, 712, 776, 781, 827, 874, 875, 887], "offset": [89, 90, 93, 97, 100, 103, 104, 105, 140, 141, 187, 205, 211, 233, 275, 325, 328, 333, 429, 452, 458, 532, 562, 563, 592, 605, 614, 655, 712, 715, 720, 820, 843, 849, 887], "row_count": [89, 90, 93, 97, 100, 103, 104, 105], "sampl": [89, 90, 215, 233, 428, 532, 608, 819, 887], "estim": [89, 90, 127, 233, 342, 343, 372, 532, 729, 731, 732, 765, 887], "alloc": [89, 90, 127, 173, 233, 729, 887], "need": [89, 90, 92, 107, 108, 140, 141, 186, 197, 233, 280, 423, 444, 532, 562, 563, 607, 614, 813, 835, 869, 887], "end": [89, 90, 97, 100, 140, 233, 275, 286, 328, 344, 359, 435, 439, 452, 456, 486, 498, 532, 562, 564, 571, 580, 614, 655, 665, 715, 830, 843, 847], "scan_csv": [89, 90, 590, 591, 607, 614], "glob": [89, 90, 100, 103, 105], "pattern": [89, 90, 100, 103, 105, 152, 233, 435, 436, 441, 442, 448, 449, 807, 808, 826, 827, 832, 833, 839, 840, 887], "store": [89, 97, 129, 152, 179, 233, 622, 887], "continu": [89, 97, 428, 532, 819, 887], "benchmark": [89, 97], "50000": 90, "batchedcsvread": [90, 541], "batch": [90, 104], "upon": 90, "creation": 90, "gather": 90, "work": [90, 92, 139, 141, 175, 233, 262, 290, 291, 292, 293, 353, 447, 463, 473, 532, 561, 563, 614, 642, 670, 673, 674, 675, 740, 838, 873, 887], "next_batch": 90, "call": [90, 111, 112, 152, 156, 232, 233, 298, 301, 532, 542, 613, 614, 623, 887], "big": 90, "interest": 90, "seen_group": 90, "big_fil": 90, "while": [90, 91, 92, 101, 111, 112, 152, 161, 201, 233, 576, 614], "df_current_batch": 90, "concat": [90, 487, 488, 671, 775, 887], "partition_df": 90, "partition_bi": [90, 153, 233], "as_dict": [90, 167, 233], "fh": 90, "write_csv": [90, 100, 233], "els": 90, "table_uri": [91, 101], "delta_table_opt": [91, 101], "lake": [91, 101, 541], "uri": [91, 99, 101], "root": [91, 101, 371, 381, 387, 398, 432, 464, 531, 532, 822, 887], "For": [91, 92, 99, 101, 129, 141, 154, 155, 188, 215, 233, 280, 288, 386, 403, 428, 491, 500, 501, 532, 563, 568, 593, 608, 614, 622, 789, 819, 869, 887], "filesystem": [91, 101], "absolut": [91, 101, 107, 108, 239, 532, 618, 887], "rel": [91, 101, 107, 108, 325, 341, 342, 343, 532, 712, 730, 731, 732, 887], "But": [91, 101], "gc": [91, 101], "azur": [91, 101], "thu": [91, 100, 101, 129, 233, 518, 622, 887], "latest": [91, 101, 354, 386, 532], "backend": [91, 99, 101], "deltalak": [91, 101], "cloud": [91, 101, 102], "configur": [91, 101], "authent": [91, 101], "keyword": [91, 97, 101, 168, 169, 178, 233, 579, 614, 887], "partit": [91, 97, 99, 101, 102, 153, 167, 233], "sinc": [91, 101, 209, 233, 312, 346, 502, 532, 602, 614, 695, 734, 887], "table_path": [91, 101], "avoid": [91, 101], "year": [91, 101, 140, 141, 155, 205, 233, 315, 325, 326, 328, 333, 335, 408, 409, 410, 411, 412, 414, 415, 416, 494, 495, 532, 562, 563, 568, 614, 698, 712, 713, 715, 720, 722], "2021": [91, 101, 122, 138, 140, 205, 233, 458, 506, 562, 614, 698, 748, 849, 887], "fail": [91, 101, 202, 233, 280, 458, 598, 614, 623, 849, 887], "aw": [91, 101], "see": [91, 92, 99, 101, 107, 108, 111, 112, 154, 168, 169, 233, 291, 292, 293, 331, 349, 358, 372, 380, 428, 515, 532, 673, 674, 675, 718, 765, 819, 887, 894], "bucket": [91, 101, 328, 333, 715, 720], "aws_access_key_id": [91, 101], "the_aws_access_key_id": [91, 101], "aws_secret_access_kei": [91, 101], "the_aws_secret_access_kei": [91, 101], "googl": [91, 101], "service_account": [91, 101], "service_account_json_absolute_path": [91, 101], "az": [91, 101], "adl": [91, 101], "abf": [91, 101], "azure_storage_account_nam": [91, 101], "azure_storage_account_kei": [91, 101], "without_fil": [91, 101], "track": [91, 101, 118, 233], "sheet_id": 92, "sheet_nam": 92, "xlsx2csv_option": 92, "read_csv_opt": 92, "excel": [92, 541], "xlsx": 92, "sheet": 92, "xlsx2csv": [92, 106], "read_csv": [92, 100], "skip_empty_lin": 92, "my": [92, 101, 102], "datasheet": 92, "excel_fil": 92, "correct": [92, 342, 343, 372, 413, 428, 532, 572, 614, 731, 732, 765, 799, 819, 887], "look": [92, 280, 283, 662], "document": [92, 99, 443, 458, 834, 849], "fix": [92, 110, 111, 337, 408, 409, 410, 411, 412, 414, 415, 416, 532, 724], "whole": [92, 430, 431, 441, 532, 832], "twice": 92, "With": 92, "1000": [92, 127, 233, 316, 317, 461, 703], "spreadsheet": [92, 170, 233], "xl": 92, "xlsm": 92, "xlsb": 92, "odf": 92, "od": [92, 457, 848], "odt": 92, "from_panda": 92, "memory_map": [93, 97, 103], "v2": [93, 103], "valid": [93, 97, 112, 116, 127, 233, 302, 430, 435, 436, 441, 442, 443, 532, 683, 729, 742, 826, 827, 832, 833, 834, 839, 840, 887], "greatli": [93, 103], "repeat": [93, 103, 402, 404, 532], "o": [93, 103, 302, 440, 472, 532, 683, 831, 872, 887], "page": [93, 103, 233, 532, 541, 591, 614, 887], "give": [93, 97, 103, 104, 105, 161, 210, 233, 312, 372, 404, 532, 541, 576, 603, 614, 695, 765, 887], "read_ndjson": 95, "parallelstrategi": [97, 105], "directori": 97, "awar": [97, 334, 458, 721, 725, 849], "stabl": 97, "increas": [97, 302, 532, 683, 887], "row_group": [97, 105], "direct": [97, 99, 105, 204, 233], "read_tabl": 97, "connection_uri": 99, "partition_on": 99, "partition_rang": 99, "partition_num": 99, "protocol": 99, "databas": 99, "postgresql": 99, "redshift": 99, "mysql": 99, "mariadb": 99, "clickhous": 99, "oracl": 99, "bigqueri": 99, "server": 99, "pleas": [99, 101], "connectorx": [99, 106], "doc": 99, "github": 99, "com": [99, 341, 342, 343, 441, 532, 730, 731, 732, 832, 887], "sfu": 99, "db": 99, "connector": 99, "destin": 99, "raw": 99, "transfer": 99, "detail": [99, 107, 108, 894], "partition_col": 99, "explicitli": [99, 110, 111, 520], "with_column_nam": 100, "push": [100, 102, 103, 104, 105], "down": [100, 102, 103, 104, 105, 353, 532, 740, 887], "therebi": [100, 103, 104, 105], "potenti": [100, 103, 104, 105], "overhead": [100, 103, 104, 105], "updat": 100, "just": [100, 161, 233, 576, 614], "befor": [100, 116, 129, 140, 155, 203, 233, 300, 301, 302, 396, 407, 408, 409, 410, 411, 412, 414, 415, 416, 461, 465, 532, 562, 565, 568, 599, 614, 622, 681, 682, 683, 782, 793, 794, 795, 796, 797, 798, 800, 801, 802, 852, 858, 887], "realloc": [100, 103, 104, 129, 233, 622, 887], "my_long_fil": 100, "doesn": [100, 340, 532, 728, 877, 887], "thing": [100, 479, 499], "less": [100, 155, 233, 445, 450, 455, 461, 568, 614, 836, 841, 846, 852], "limit": [100, 131, 233, 282, 291, 292, 293, 349, 354, 532, 557, 564, 591, 614, 673, 674, 675, 737, 887], "breezah": 100, "languag": [100, 140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 712, 715, 720], "terribl": 100, "mydf": 100, "lambda": [100, 118, 134, 169, 215, 233, 245, 280, 341, 342, 343, 380, 381, 407, 493, 521, 532, 572, 579, 608, 614, 623, 660, 730, 731, 732, 887], "raw_filesystem": 101, "adjust": [101, 341, 342, 343, 428, 532, 730, 731, 732, 819, 887], "subtreefilesystem": 101, "reli": 101, "mention": 101, "ensur": [101, 111, 112, 114, 178, 233, 476, 532, 572, 614, 869, 875, 887], "gcsf": 101, "pyfilesystem": 101, "fsspechandl": 101, "gcsfilesystem": 101, "id": [101, 215, 448, 449, 474, 476, 532, 608, 874, 887], "token": 101, "pa_f": 101, "adlf": 101, "azureblobfilesystem": 101, "account_nam": 101, "account_kei": 101, "allow_pyarrow_filt": 102, "lead": [102, 233, 420, 446, 457, 461, 467, 476, 508, 511, 518, 532, 572, 608, 614, 809, 837, 848, 852, 887], "comparison": 102, "dset": 102, "folder": 102, "out": [102, 106, 141, 233, 265, 279, 284, 361, 364, 435, 437, 532, 563, 590, 591, 614, 645, 659, 663, 826, 828], "1970": 102, "stdout": 106, "14": [106, 118, 209, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 315, 358, 532, 602, 614, 715], "platform": 106, "linux": 106, "microsoft": 106, "standard": [106, 189, 233, 315, 342, 414, 428, 433, 443, 519, 532, 594, 614, 698, 731, 819, 823, 834, 887], "wsl2": 106, "x86_64": 106, "glibc2": 106, "main": 106, "jul": [106, 458, 849], "56": [106, 469, 532], "gcc": 106, "20210110": 106, "23": [106, 140, 141, 233, 309, 313, 328, 495, 562, 563, 614, 692, 696], "check_dtyp": [107, 108], "check_exact": [107, 108], "rtol": [107, 108], "1e": [107, 108], "atol": [107, 108], "nans_compare_equ": [107, 108], "check_column_ord": 107, "check_row_ord": 107, "assertionerror": [107, 108], "compar": [107, 108, 135, 233, 806, 887], "exactli": [107, 108, 111, 112, 454, 455, 814, 845, 846, 887], "toler": [107, 108, 155, 233, 568, 614], "inexact": [107, 108], "assert": [107, 108, 110, 111, 112, 141, 233, 541, 563, 614, 742, 887], "irrespect": 107, "unsort": 107, "check_nam": 108, "s1": [108, 134, 233, 878, 887], "searchstrategi": [109, 111, 112], "null_prob": [109, 111, 112], "percentag": [109, 111, 112, 396, 532, 782, 887], "chanc": [109, 111, 112], "hypothesi": [109, 110, 111, 112, 894], "sampled_from": 109, "unique_small_int": 109, "ccy": 109, "gbp": 109, "eur": [109, 122, 138, 233], "jpy": 109, "min_col": [110, 111], "max_col": [110, 111], "suitabl": [110, 419, 532, 805, 887], "standalon": [110, 111], "itself": [110, 570, 614], "explicit": [110, 482, 515], "random": [110, 111, 112, 142, 180, 233, 355, 401, 418, 424, 532, 743, 787, 804, 815, 887], "mincol": 110, "exact": [110, 111, 112, 186, 233, 458, 849], "especi": 110, "punctuat": 110, "test_special_char_colname_init": 110, "z": [110, 111, 127, 148, 150, 154, 161, 233, 259, 289, 355, 404, 458, 532, 567, 576, 592, 614, 669, 737, 849, 887], "test_unique_xyz": 110, "assert_someth": 110, "min_siz": [111, 112], "max_siz": [111, 112], "include_col": 111, "allow_infin": [111, 112], "allowed_dtyp": [111, 112], "excluded_dtyp": [111, 112], "describ": [111, 138, 233, 607, 887], "desir": 111, "ignor": [111, 112, 159, 190, 233, 261, 303, 392, 393, 532, 641, 685, 778, 779, 887], "n_chunk": [111, 112, 233, 887], "randomis": 111, "individu": [111, 141, 233, 245, 442, 532, 563, 591, 614, 671, 833, 887], "append": [111, 129, 154, 155, 233, 402, 532, 567, 568, 614, 887], "onto": 111, "independ": [111, 112], "either": [111, 141, 156, 159, 178, 190, 233, 563, 570, 614], "basi": 111, "pct": 111, "take": [111, 134, 162, 169, 192, 233, 325, 334, 468, 497, 499, 532, 577, 597, 614, 712, 721, 861, 878, 887], "preced": 111, "disallow": [111, 112], "exclud": [111, 112, 298, 301, 359, 486, 518, 532], "deploi": [111, 112], "characterist": [111, 112], "develop": [111, 112], "directli": [111, 112, 341, 342, 343, 532, 730, 731, 732, 887], "concret": [111, 112], "test_repr": [111, 112], "isinst": [111, 112, 233], "repr": [111, 112], "known": [111, 608], "colnam": [111, 126, 233, 381, 532, 553, 614], "df_strategi": 111, "15836": 111, "1755e": 111, "38": 111, "575050513": 111, "constructor": 112, "max_data_s": 112, "distinct": [112, 167, 233, 281, 401, 494, 495, 496, 532, 661, 787, 887], "54666": 112, "35": 112, "6414": 112, "63290": 112, "pool": 113, "toggl": [114, 458, 849], "scope": 116, "lifetim": 116, "initi": [116, 491, 500], "whatev": 116, "were": 116, "enter": 116, "set_verbos": 116, "do_various_th": 116, "restor": 116, "return_dtyp": [118, 233, 245, 380, 481, 507, 532, 623, 887], "inference_s": [118, 233], "256": [118, 233, 782, 887], "user": [118, 169, 215, 233, 245, 420, 481, 532, 579, 608, 614, 623, 809, 887], "udf": [118, 169, 215, 233, 245, 481, 532, 579, 608, 614, 623, 887], "logic": [118, 215, 233, 245, 471, 532, 560, 567, 582, 606, 608, 614, 871, 887], "almost": [118, 215, 233, 245, 532, 608], "_significantly_": [118, 215, 233, 245, 532, 608], "intens": [118, 215, 233, 245, 532, 608], "becaus": [118, 127, 140, 156, 204, 215, 233, 245, 262, 532, 562, 608, 614, 623, 642, 729, 887], "engin": [118, 215, 233, 245, 532, 608], "forc": [118, 155, 215, 233, 245, 532, 567, 568, 608, 614], "materi": [118, 215, 233, 245, 532, 580, 608, 614], "parallelis": [118, 215, 233, 245, 532, 608], "optimis": [118, 215, 233, 245, 532, 608, 807, 808, 887], "wherev": [118, 215, 233, 245, 532, 608], "strongli": [118, 215, 233, 245, 532, 608], "achiev": [118, 215, 233, 245, 532, 608], "best": [118, 215, 233, 245, 532, 608], "tri": [118, 233], "arbitrarili": [118, 233], "rearrang": [118, 233], "preserv": [118, 233, 425, 532, 816, 887], "syntax": [118, 165, 188, 233, 589, 593, 614, 887], "15": [118, 140, 141, 146, 209, 233, 302, 328, 333, 346, 532, 562, 563, 602, 614, 683, 715, 720, 734, 887], "better": [118, 215, 233, 245, 476, 532, 608, 807, 808, 887], "scalar": [118, 151, 233, 419, 481, 532, 764, 805, 887], "ident": [119, 120, 233, 545, 546, 614, 672, 676, 887], "cheap": [119, 120, 233, 545, 546, 614, 622, 672, 676, 887], "deepcopi": [119, 120, 233, 545, 546, 614, 672, 676, 887], "13": [119, 120, 130, 131, 137, 141, 146, 156, 164, 210, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 407, 409, 487, 523, 532, 545, 546, 556, 557, 563, 570, 603, 614, 623, 715, 720, 722, 887], "clear": [120, 233, 546, 614, 676, 887], "properti": [121, 126, 144, 181, 183, 208, 233, 541, 548, 553, 585, 601, 614], "appl": [121, 145, 154, 174, 176, 194, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 398, 406, 439, 456, 464, 532, 567, 583, 614, 830, 847], "banana": [121, 194, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 398, 406, 464, 532], "summari": [122, 233, 684, 887], "glimps": [122, 143, 233], "usd": [122, 138, 233], "2020": [122, 138, 141, 233, 308, 311, 314, 316, 317, 319, 321, 324, 330, 331, 334, 338, 563, 614, 691, 694, 697, 703, 705, 708, 711, 717, 725], "null_count": [122, 125, 233, 302, 532, 683, 684, 887], "266667": [122, 233], "666667": [122, 159, 206, 221, 233, 341, 532, 600, 614], "std": [122, 233, 407, 532, 614, 684, 800, 887], "101514": [122, 233], "707107": [122, 233, 342, 532, 731, 887], "57735": [122, 233], "median": [122, 170, 233, 410, 532, 604, 614, 796, 887], "snippet": [125, 233, 552, 614], "is_nul": [125, 233, 532, 552, 614, 887], "height": [125, 233], "sizeunit": [127, 233, 729, 887], "total": [127, 233, 729, 887], "heap": [127, 233, 729, 887], "its": [127, 203, 233, 309, 328, 333, 599, 614, 692, 715, 720, 729, 887], "bitmap": [127, 233, 729, 887], "therefor": [127, 233, 280, 729, 887], "structarrai": [127, 233, 729, 887], "constant": [127, 141, 233, 347, 532, 563, 614, 729, 735, 887], "unchang": [127, 233, 245, 471, 532, 572, 608, 614, 729, 871, 887], "visibl": [127, 233, 729, 887], "capac": [127, 186, 233, 729, 814, 887], "ffi": [127, 233, 729, 887], "kb": [127, 233, 729, 887], "mb": [127, 233, 729, 887], "gb": [127, 233, 729, 887], "tb": [127, 233, 729, 887], "scale": [127, 233, 729, 887], "1_000_000": [127, 233, 729, 887], "25888898": [127, 233], "689577102661133": [127, 233], "long": [128, 161, 204, 233, 554, 576, 614], "largelist": [128, 233], "letter": [128, 218, 227, 233, 344, 498, 532, 554, 609, 610, 614], "locat": [129, 176, 199, 203, 233, 419, 532, 599, 614, 622, 805, 808, 860, 887], "faster": [129, 152, 204, 233, 245, 407, 447, 474, 532, 590, 591, 614, 622, 623, 793, 838, 887], "onlin": [129, 233, 622, 887], "rerun": [129, 233, 622, 887], "latter": [129, 233, 622, 887], "20": [129, 145, 146, 169, 171, 175, 176, 233, 252, 253, 254, 256, 303, 328, 333, 355, 358, 502, 506, 532, 579, 614, 720], "40": [129, 169, 233, 328, 333, 355, 532, 579, 614, 698, 720], "50": [129, 233, 291, 292, 293, 328, 333, 532, 673, 720, 887], "60": [129, 233, 329, 330, 458, 713, 716, 717, 849], "fill_valu": [130, 185, 204, 233, 348, 422, 532, 556, 588, 614, 736, 812, 887], "Not": [130, 233, 365, 367, 532, 556, 614], "To": [130, 233, 305, 306, 349, 508, 511, 521, 532, 556, 614], "fillnullstrategi": [131, 233, 349, 532, 557, 614, 737, 887], "matches_supertyp": [131, 233, 557, 614], "forward": [131, 155, 233, 349, 354, 532, 557, 568, 614, 737, 887], "consecut": [131, 233, 282, 349, 354, 434, 532, 557, 614, 737, 825, 887], "supertyp": [131, 233, 244, 532, 557, 614], "fill_nan": [131, 233, 532, 614, 887], "OR": [132, 233, 480, 558, 614], "reduct": [134, 233], "effect": [134, 233, 605, 614], "supercast": [134, 233], "similar": [134, 155, 233, 395, 532, 568, 614], "parent": [134, 233], "rule": [134, 233, 331, 718], "arithmet": [134, 233], "zip_with": [134, 233, 887], "foo11": [134, 233], "bar22": [134, 233], "null_equ": [135, 233, 806, 887], "retriev": [136, 233, 257, 258, 462, 637, 638, 853], "preview": [138, 233], "wide": [138, 161, 204, 233, 576, 614], "nice": [138, 233], "few": [138, 233], "head": [138, 157, 191, 233, 244, 375, 532, 571, 614, 767, 887], "tail": [138, 143, 213, 233, 244, 428, 532, 614, 819, 887], "maintain_ord": [139, 167, 170, 202, 205, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 233, 240, 245, 467, 473, 489, 532, 547, 550, 555, 561, 580, 589, 590, 591, 598, 614, 873, 887], "consist": [139, 233, 561, 614], "agg": [139, 140, 141, 233, 240, 245, 350, 352, 430, 467, 478, 489, 532, 547, 550, 555, 561, 562, 563, 580, 589, 614], "loop": [139, 233], "sub_df": [139, 233], "index_column": [140, 141, 233, 562, 563, 614], "truncat": [140, 233, 562, 580, 614], "include_boundari": [140, 233, 562, 614], "start_bi": [140, 233, 562, 614], "startbi": [140, 233, 562, 614], "dynamicgroupbi": [140, 233], "normal": [140, 233, 340, 372, 428, 532, 562, 614, 728, 765, 819, 887], "groupbi": [140, 141, 165, 233, 240, 245, 262, 302, 350, 352, 395, 430, 431, 467, 478, 481, 489, 532, 547, 550, 555, 562, 563, 580, 589, 614, 642, 683, 887], "member": [140, 233, 562, 614, 754, 887], "seen": [140, 233, 282, 354, 532, 562, 614], "roll": [140, 141, 233, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 487, 532, 562, 563, 614, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 887], "slot": [140, 233, 261, 302, 303, 532, 562, 614, 641, 683, 685, 887], "1n": [140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 712, 715, 720], "nanosecond": [140, 141, 155, 205, 233, 325, 328, 329, 333, 408, 409, 410, 411, 412, 414, 415, 416, 496, 532, 562, 563, 568, 614, 712, 715, 716, 720], "1u": [140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 712, 715, 720], "microsecond": [140, 141, 155, 205, 233, 325, 328, 329, 333, 408, 409, 410, 411, 412, 414, 415, 416, 495, 496, 532, 562, 563, 568, 580, 614, 712, 715, 720], "1m": [140, 141, 155, 205, 233, 316, 317, 319, 324, 325, 328, 330, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 703, 705, 711, 712, 715, 717, 720], "millisecond": [140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 496, 532, 562, 563, 568, 614, 712, 715, 720], "1h": [140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 696, 712, 715, 720], "1w": [140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 712, 715, 720], "week": [140, 141, 155, 205, 233, 325, 328, 333, 336, 408, 409, 410, 411, 412, 414, 415, 416, 496, 532, 562, 563, 568, 614, 712, 715, 720, 723], "month": [140, 141, 155, 205, 233, 310, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 494, 495, 532, 562, 563, 568, 614, 693, 712, 715, 720], "1y": [140, 141, 155, 205, 233, 325, 328, 333, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 712, 715, 720, 726], "1i": [140, 141, 155, 205, 233, 325, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 563, 568, 614, 712], "Or": [140, 141, 155, 205, 233, 395, 524, 532, 562, 563, 568, 614], "10i": [140, 141, 233, 562, 563, 614], "often": [140, 141, 233, 404, 532, 562, 563, 614], "ascend": [140, 141, 233, 483, 562, 563, 614], "dynam": [140, 233, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 614], "matter": [140, 141, 233, 562, 563, 614], "neg": [140, 143, 184, 185, 187, 191, 233, 274, 275, 421, 422, 429, 452, 532, 562, 587, 588, 592, 605, 614, 654, 655, 811, 812, 820, 843, 887], "_lower_bound": [140, 233, 562, 614], "_upper_bound": [140, 233, 562, 614], "impact": [140, 233, 562, 614], "harder": [140, 233, 562, 614], "side": [140, 141, 233, 359, 408, 409, 410, 411, 412, 414, 415, 416, 419, 532, 562, 563, 614, 805, 887], "inclus": [140, 141, 233, 359, 408, 409, 410, 411, 412, 414, 415, 416, 453, 454, 532, 562, 563, 614, 844, 845], "datapoint": [140, 233, 562, 614], "mondai": [140, 233, 336, 562, 614, 723], "date_rang": [140, 205, 233, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 562, 614, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726], "30m": [140, 233, 328, 333, 562, 614, 715, 720], "time_min": [140, 233, 562, 614], "time_max": [140, 233, 562, 614], "boundari": [140, 233, 291, 292, 293, 532, 562, 614, 673, 674, 675, 887], "time_count": [140, 233, 562, 614], "_lower_boundari": [140, 233, 562, 614], "_upper_boundari": [140, 233, 562, 614], "lower_bound": [140, 233, 532, 562, 614], "upper_bound": [140, 233, 280, 532, 562, 614], "time_agg_list": [140, 233, 562, 614], "idx": [140, 153, 233, 280, 562, 614, 660, 808, 887], "arang": [140, 204, 215, 233, 562, 608, 614], "2i": [140, 233, 562, 614], "3i": [140, 233, 562, 614], "a_agg_list": [140, 233, 562, 614], "rollinggroupbi": [141, 233], "dynamic_groupbi": [141, 233, 563, 614], "groupby_dynam": [141, 233, 563, 614], "45": [141, 233, 309, 328, 333, 436, 442, 563, 614, 692, 715, 720, 827, 833], "48": [141, 233, 563, 614], "18": [141, 233, 301, 328, 333, 337, 358, 371, 532, 563, 580, 614, 724], "19": [141, 155, 233, 328, 563, 568, 614, 715, 720], "43": [141, 233, 301, 532, 563, 614], "strptime": [141, 233, 331, 563, 614, 718], "2d": [141, 197, 233, 563, 614, 693], "sum_a": [141, 233, 563, 614], "min_a": [141, 233, 563, 614], "max_a": [141, 233, 563, 614], "to_list": [141, 233, 280, 563, 614, 660, 887], "seed": [142, 180, 233, 355, 418, 424, 532, 743, 804, 815, 887], "seed_1": [142, 233, 355, 532, 743, 887], "seed_2": [142, 233, 355, 532, 743, 887], "seed_3": [142, 233, 355, 532, 743, 887], "hash": [142, 233, 532, 887], "u64": [142, 233, 355, 403, 532, 580, 614, 743, 887], "10783150408545073287": [142, 233], "1438741209321515184": [142, 233], "10047419486152048166": [142, 233], "2047317070637311557": [142, 233], "last": [143, 155, 170, 188, 191, 202, 227, 233, 254, 256, 265, 278, 302, 310, 326, 335, 455, 466, 522, 532, 568, 593, 596, 598, 610, 614, 632, 635, 645, 658, 683, 693, 713, 722, 846, 859, 887], "_except_": [143, 191, 233], "ab": [143, 191, 233, 508, 511, 532, 887], "grown": [145, 233], "baz": [146, 147, 170, 203, 233, 453, 455, 566, 599, 614, 846], "intermedi": [147, 233, 566, 614, 746, 887], "linear": [147, 172, 225, 233, 259, 358, 384, 400, 412, 487, 488, 514, 532, 566, 581, 614, 639, 746, 786, 798, 887], "mask": [148, 150, 233, 260, 283, 284, 360, 362, 370, 435, 437, 532, 640, 662, 663, 738, 749, 752, 762, 783, 784, 807, 826, 828, 878, 887], "buffer_s": [152, 233], "500": [152, 233, 555, 614, 702, 704, 710, 716, 794, 795, 797, 887], "iter": [152, 153, 178, 179, 182, 201, 212, 233, 302, 532, 586, 614, 683, 887], "veri": [152, 201, 233, 546, 614, 676, 887], "fit": [152, 186, 204, 233, 423, 532, 813, 814, 887], "speedup": [152, 233], "signific": [152, 233], "4x": [152, 233], "disabl": [152, 233], "export": [152, 153, 179, 233, 505], "materialis": [152, 153, 178, 179, 233], "plan": [152, 155, 156, 233, 544, 549, 550, 560, 567, 568, 582, 589, 606, 614], "10000": [153, 233, 461], "iter_row": [153, 178, 179, 233], "17_500": [153, 233], "2023": [153, 233, 309, 692], "klmnoopqrstuvwxyz": [153, 233], "__name__": [153, 233], "7500": [153, 233], "effici": [153, 233], "convers": [153, 233, 458, 541, 725, 849, 868, 869, 887], "recordbatch": [153, 233], "15_000": [153, 233], "record_batch": [153, 233], "to_arrow": [153, 233, 887], "to_batch": [153, 233], "date32": [153, 233], "large_str": [153, 193, 233], "15000": [153, 233], "2500": [153, 233], "left_on": [154, 155, 233, 567, 568, 614], "right_on": [154, 155, 233, 567, 568, 614], "joinstrategi": [154, 233, 567, 614], "suffix": [154, 155, 213, 233, 286, 365, 367, 368, 369, 406, 439, 458, 532, 567, 568, 604, 614, 665, 830, 849], "_right": [154, 155, 233, 567, 568, 614], "outer": [154, 233, 567, 614], "semi": [154, 233, 567, 614], "anti": [154, 233, 567, 614, 807, 808, 887], "cross": [154, 233, 567, 614], "join_asof": [154, 233, 567, 614], "stringcach": [154, 233, 541], "other_df": [154, 233, 567, 614], "by_left": [155, 233, 568, 614], "by_right": [155, 233, 568, 614], "asofjoinstrategi": [155, 233, 568, 614], "allow_parallel": [155, 233, 567, 568, 614], "force_parallel": [155, 233, 567, 568, 614], "asof": [155, 233, 568, 614], "rather": [155, 233, 461, 568, 614, 852], "asof_join": [155, 233], "search": [155, 233, 568, 614], "greater": [155, 233, 428, 455, 532, 568, 614, 819, 846, 887], "numer": [155, 233, 291, 292, 293, 404, 423, 532, 541, 568, 614, 673, 674, 675, 760, 806, 813, 887], "distanc": [155, 233, 568, 614], "gdp": [155, 233, 568, 614], "2016": [155, 233, 568, 614], "2017": [155, 233, 568, 614], "2018": [155, 233, 568, 614], "2019": [155, 233, 568, 614], "record": [155, 233, 568, 614], "jan": [155, 233, 568, 614], "1st": [155, 233, 568, 614], "4164": [155, 233, 568, 614], "4411": [155, 233, 568, 614], "4566": [155, 233, 568, 614], "4696": [155, 233, 568, 614], "popul": [155, 233, 568, 614], "12th": [155, 233, 568, 614], "82": [155, 233, 568, 614], "66": [155, 233, 568, 614, 798, 887], "83": [155, 233, 568, 614], "52": [155, 210, 233, 417, 532, 568, 603, 614], "request": [156, 233], "small": [156, 233, 328, 430, 431, 532, 555, 614], "describe_plan": [156, 233, 614], "unoptim": [156, 233, 550, 614], "describe_optimized_plan": [156, 233, 550, 614], "show_graph": [156, 233, 614], "un": [156, 233], "graphviz": [156, 233, 589, 614], "advis": [156, 233], "axi": [158, 159, 161, 163, 190, 233, 576, 614], "null_strategi": [159, 190, 233], "nullstrategi": [159, 190, 233], "propag": [159, 190, 233, 392, 393, 532, 778, 779, 887], "spam": [159, 233], "id_var": [161, 233, 576, 614], "value_var": [161, 233, 576, 614], "variable_nam": [161, 233, 576, 614], "value_nam": [161, 233, 576, 614], "unpivot": [161, 233, 576, 614], "leav": [161, 233, 576, 614], "identifi": [161, 202, 233, 576, 598, 614], "massag": [161, 233, 576, 614], "measur": [161, 233, 576, 614], "merg": [162, 233, 577, 614], "caller": [162, 233, 280, 572, 577, 608, 614], "respons": [162, 233, 577, 614], "One": [165, 170, 233, 887], "what": [165, 233, 869, 877, 887], "struct": [165, 200, 203, 233, 280, 454, 455, 476, 491, 492, 493, 532, 599, 614, 660, 845, 846], "pack": [165, 233], "expr_unique_subset": [165, 233], "df_nuniqu": [165, 233], "df_agg_nuniqu": [165, 233], "simpl": [165, 233], "predict": [167, 170, 173, 205, 233], "k": [167, 233, 289, 372, 472, 532, 669, 765, 872, 887], "l": [167, 233], "pearson": [168, 233, 372, 428, 513, 532, 765, 819, 887], "correl": [168, 233, 513, 518], "coeffici": [168, 233, 428, 532, 819, 887], "corrcoef": [168, 233], "func": [169, 233, 579, 614, 623, 887], "offer": [169, 233, 579, 614], "recommend": [169, 233], "fulli": [169, 233, 458, 849], "advantag": [169, 233], "cast_str_to_int": [169, 233, 579, 614], "col_nam": [169, 233, 579, 614], "tdf": [169, 233, 579, 614], "aggregate_fn": [170, 233], "pivotagg": [170, 233], "sort_column": [170, 233], "well": [170, 233], "predefin": [170, 233], "transpos": [170, 233], "discoveri": [170, 233], "interpol": [172, 225, 233, 349, 384, 400, 412, 514, 532, 581, 614, 786, 798, 887], "rollinginterpolationmethod": [172, 225, 233, 400, 412, 514, 532, 581, 614, 786, 798, 887], "midpoint": [172, 225, 233, 400, 412, 514, 532, 581, 614, 786, 798, 887], "subsequ": [173, 233], "old": [174, 233, 583, 614], "new_col": [175, 233], "val": [177, 233, 289, 471, 532, 584, 614, 669], "by_pred": [178, 233], "accord": [178, 233, 698], "mutual": [178, 233], "exclus": [178, 233], "addition": [178, 233], "clariti": [178, 233], "anyth": [178, 233], "toomanyrowsreturn": [178, 233, 541], "norowsreturn": [178, 233, 541], "inherit": [178, 233], "rowsexcept": [178, 233, 541], "frac": [180, 233, 341, 342, 343, 418, 428, 472, 532, 730, 731, 732, 804, 819, 872, 887], "with_replac": [180, 233, 418, 532, 804, 887], "shuffl": [180, 215, 233, 418, 532, 608, 804, 887], "modul": [180, 233, 418, 424, 531, 532, 804, 815, 887], "whenthen": [182, 233, 586, 614], "whenthenthen": [182, 233, 586, 614], "shift_and_fil": [184, 233, 532, 614, 887], "shift": [185, 233, 261, 303, 396, 422, 487, 532, 588, 614, 641, 685, 782, 812, 887], "shrink": [186, 233, 423, 532, 813, 814, 887], "hold": [186, 233, 486], "nulls_last": [188, 233, 254, 256, 430, 532, 593, 614, 632, 635, 887], "ddof": [189, 206, 233, 433, 477, 513, 518, 519, 523, 532, 594, 600, 614, 823, 876, 887], "deviat": [189, 233, 342, 414, 433, 519, 532, 594, 614, 731, 823, 887], "degre": [189, 206, 233, 433, 477, 513, 518, 532, 823, 876, 887], "freedom": [189, 206, 233, 433, 477, 513, 518, 532, 823, 876, 887], "816497": [189, 233], "21": [190, 233, 502], "16a": [190, 233], "27b": [190, 233], "38c": [190, 233], "nth": [192, 233, 455, 468, 532, 597, 614, 846, 861, 887], "mostli": [193, 233, 350, 532], "categoricaltyp": [193, 233], "as_seri": [194, 233], "fruit": [194, 233, 398, 406, 439, 456, 464, 532, 830, 847], "car": [194, 233, 398, 406, 464, 532], "beetl": [194, 233, 398, 406, 464, 532], "audi": [194, 233, 398, 406, 464, 532], "28": [194, 233, 337, 724], "300": [194, 233, 794, 795, 797, 887], "hot": [196, 233], "re": [197, 233, 505], "ll": [197, 233, 869, 887], "numpy_arrai": [197, 233], "date_as_object": [198, 233], "sent": [198, 233, 869, 887], "datetime64": [198, 233], "pandas_df": [198, 233], "three": [200, 233, 419, 520, 532], "four": [200, 233, 520], "five": [200, 233], "num": [200, 233, 359, 362, 461, 532], "include_head": [201, 233], "header_nam": [201, 233], "column_nam": [201, 233], "perhap": [201, 233], "column_2": [201, 233], "name_gener": [201, 233, 280, 660], "base_nam": [201, 233], "my_column_": [201, 233], "my_column_0": [201, 233], "my_column_1": [201, 233], "my_column_2": [201, 233], "uniquekeepstrategi": [202, 233, 598, 614], "decompos": [203, 233, 599, 614], "t_a": [203, 233, 599, 614], "t_b": [203, 233, 599, 614], "t_c": [203, 233, 599, 614], "t_d": [203, 233, 599, 614], "womp": [203, 233, 599, 614], "t_": [203, 233, 599, 614], "t_struct": [203, 233, 599, 614], "step": [204, 233, 482], "unstackdirect": [204, 233], "much": [204, 233, 279, 302, 532, 659, 683, 887], "pivot": [204, 233], "phase": [204, 233], "subject": [204, 233], "ascii_uppercas": [204, 233], "col1": [204, 233], "col2": [204, 233], "h": [204, 233, 331, 423, 532], "col1_0": [204, 233], "col1_1": [204, 233], "col1_2": [204, 233], "col2_0": [204, 233], "col2_1": [204, 233], "col2_2": [204, 233], "time_column": [205, 233], "frequenc": [205, 233], "forward_fil": [205, 233, 298, 301, 532], "06": [205, 233, 308, 309, 315, 327, 339, 715, 723], "varianc": [206, 233, 343, 372, 416, 477, 523, 532, 600, 614, 732, 765, 802, 876, 887], "grow": [207, 233], "deprec": [209, 233, 346, 532, 602, 614, 734, 887], "favor": [209, 233, 602, 614], "17": [209, 233, 417, 502, 532, 602, 614, 677, 715, 887], "named_expr": [210, 233, 603, 614], "alreadi": [210, 233, 262, 302, 532, 603, 614, 642, 683, 887], "is_not": [210, 233, 532, 603, 614], "opt": [210, 233, 603, 614], "with_columns_kwarg": [210, 233, 603, 614], "row_nr": [211, 233, 605, 614, 808, 887], "complet": [213, 869, 887], "idiomat": 213, "_sum": 213, "_tail_sum": 213, "bar_sum": 213, "bar_tail_sum": 213, "sub": [215, 286, 287, 439, 456, 665, 666, 830, 847], "triangl": [215, 608], "group_df": [215, 608], "nr": [218, 227, 609, 610], "maxim": [220, 252, 532, 630, 887], "833333": 221, "minim": [223, 253, 258, 423, 532, 631, 638, 773, 813, 887], "overview": [233, 532, 541, 614, 887], "public": [233, 532, 541, 614, 887], "variou": [233, 532, 614, 887], "entri": 233, "prevent": [233, 300, 301, 371, 465, 532, 681, 682, 858, 887], "behavior": [233, 245, 279, 481, 508, 511, 532, 659], "mydatafram": 233, "notic": [233, 887], "df4": 233, "df5": 233, "df6": 233, "drop_in_plac": 233, "drop_nul": [233, 305, 532, 614, 887], "estimated_s": [233, 887], "explod": [233, 352, 532, 614, 887], "find_idx_by_nam": 233, "fold": [233, 386, 485, 491, 492, 515, 521], "frame_equ": [233, 328, 333], "get_column": [233, 521], "groupby_rol": [233, 408, 409, 410, 411, 412, 414, 415, 416, 532, 562, 614], "hash_row": 233, "hstack": 233, "insert_at_idx": 233, "is_dupl": [233, 532, 887], "is_empti": [233, 887], "is_uniqu": [233, 532, 887], "iter_slic": 233, "melt": [233, 614], "merge_sort": [233, 614], "n_uniqu": [233, 532, 607, 887], "pearson_corr": 233, "pipe": [233, 614], "quantil": [233, 412, 532, 614, 798, 887], "replace_at_idx": 233, "shrink_to_fit": [233, 887], "take_everi": [233, 532, 614, 887], "to_dict": 233, "to_numpi": [233, 380, 532, 887], "to_panda": [233, 887], "to_struct": [233, 462, 463], "unnest": [233, 454, 455, 614, 845, 846], "unstack": 233, "upsampl": 233, "var": [233, 532, 614, 887], "write_avro": 233, "write_ipc": 233, "write_json": [233, 582, 614], "write_parquet": 233, "94": [240, 532], "confus": [242, 365, 367, 532], "tt": [242, 532], "tf": [242, 243, 532], "ff": [242, 243, 532], "upcast": [244, 532], "skip_nul": [245, 532, 623, 887], "pass_nam": [245, 532], "assum": [245, 532, 572, 608, 614], "a_times_2": [245, 532], "invers": [246, 247, 248, 249, 250, 251, 532, 624, 625, 626, 627, 628, 629, 887], "cosin": [246, 247, 294, 295, 380, 532, 624, 625, 677, 678, 887], "570796": [246, 248, 532, 624, 626, 887], "hyperbol": [247, 249, 251, 295, 427, 470, 532, 625, 627, 629, 678, 818, 863, 887], "sine": [248, 249, 380, 426, 427, 532, 626, 627, 817, 818, 887], "881374": [249, 532, 627, 887], "tangent": [250, 251, 469, 470, 532, 628, 629, 862, 863, 887], "785398": [250, 532, 628, 887], "arg_sort": [256, 532, 635, 887], "sublist": [257, 258, 260, 261, 264, 265, 266, 267, 268, 275, 278, 279, 637, 638, 640, 641, 644, 645, 646, 647, 648, 655, 658, 659, 660, 754, 887], "membership": [260, 640], "null_behavior": [261, 303, 532, 641, 685, 887], "nullbehavior": [261, 303, 532, 641, 685, 887], "th": [261, 303, 428, 532, 641, 685, 819, 887], "against": [262, 614, 642, 893], "blindli": [262, 642], "worth": [262, 642], "enough": [262, 428, 532, 642, 819, 887], "concat_list": [262, 497, 642], "rank": [262, 497, 518, 532, 642, 887], "taken": [275, 452, 467, 532, 655, 843], "null_on_oob": [279, 659], "anoth": [279, 302, 307, 334, 431, 532, 604, 614, 623, 659, 683, 690, 721, 806, 887], "cheaper": [279, 659], "n_field_strategi": [280, 660], "tostructstrategi": [280, 660], "first_non_nul": [280, 660], "max_width": [280, 660], "field_0": [280, 660], "field_1": [280, 660], "field_n": [280, 660], "know": [280, 447, 838, 869, 877, 887], "incorrectli": 280, "downstream": [280, 420, 532, 809, 887], "advic": 280, "col_name_": [280, 660], "col_name_0": [280, 660], "col_name_1": [280, 660], "col_name_2": [280, 660], "substr": [283, 286, 287, 435, 439, 448, 449, 453, 454, 455, 456, 662, 665, 666, 826, 830, 839, 840, 844, 845, 846, 847], "transferencod": [284, 285, 437, 438, 663, 664, 828, 829], "strict": [284, 288, 435, 437, 458, 532, 663, 667, 806, 826, 828, 849, 887], "hex": [284, 285, 437, 438, 663, 664, 828, 829], "base64": [284, 285, 437, 438, 663, 664, 828, 829], "prefix": [287, 456, 461, 532, 666, 847, 852], "throw": [288, 443, 532, 667, 834, 887], "due": [288, 532, 667, 887], "overflow": [288, 300, 301, 465, 532, 667, 681, 682, 858, 887], "categoricalord": [289, 669], "lexic": [289, 669], "min_val": [291, 293, 532, 673, 675, 887], "max_val": [291, 292, 532, 673, 674, 887], "foo_clip": [291, 292, 293, 532], "clip": [292, 293, 532, 674, 675, 887], "543081": [295, 532, 678, 887], "cumul": [297, 298, 299, 300, 301, 491, 492, 493, 532, 679, 680, 681, 682, 887], "a_revers": [297, 298, 299, 300, 301, 381, 406, 464, 532], "value_cummax": [298, 532], "value_cummax_all_fil": [298, 532], "uint16": [300, 301, 465, 532, 681, 682, 858, 887], "value_cumsum": [301, 532], "value_cumsum_all_fil": [301, 532], "min_period": [302, 341, 342, 343, 407, 408, 409, 410, 411, 412, 414, 415, 416, 532, 683, 730, 731, 732, 793, 794, 795, 796, 797, 798, 800, 801, 802, 887], "slide": [302, 532, 683, 887], "realli": [302, 532, 683, 887], "complex": [302, 472, 532, 683, 872, 887], "visit": [302, 532, 683, 887], "44": [304, 532], "drop_nan": [306, 532, 887], "tu": [307, 309, 312, 332, 337, 690, 691, 692, 695, 719, 724], "lose": [307, 690], "2001": [307, 310, 312, 313, 315, 320, 322, 325, 326, 327, 328, 329, 332, 333, 335, 336, 337, 339, 458, 690, 693, 695, 696, 699, 700, 701, 702, 704, 706, 707, 709, 710, 712, 713, 714, 715, 716, 718, 719, 720, 722, 723, 724, 726, 849], "tu_m": [307, 690], "tu_n": [307, 690], "tz": [308, 334, 338, 691, 721, 725], "with_time_zon": [308, 458, 691, 849], "timestamp": [308, 502, 691], "london_timezon": 308, "europ": [308, 334, 338, 691, 725], "london": [308, 338, 691, 725], "amsterdam": [308, 334], "london_to_amsterdam": 308, "gmt": [308, 338, 691, 725], "cet": [308, 334, 725], "bst": [308, 338, 691, 725], "cest": [308, 334, 725], "tm": [309, 692], "naiv": [309, 334, 692, 721, 725], "compon": [309, 329, 458, 494, 495, 496, 692, 716], "resolv": 309, "dtm": [309, 692], "59": [309, 320, 329, 495, 692, 707, 716], "456000": [309, 692], "101000": 309, "456": [309, 692, 867, 887], "101": 309, "d1": 309, "d2": 309, "d3": 309, "extract": [310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 329, 330, 335, 336, 339, 442, 443, 693, 694, 696, 697, 698, 702, 703, 704, 705, 707, 708, 709, 710, 711, 713, 714, 716, 717, 722, 723, 726, 833, 834], "weekdai": [310, 326], "day_of_month": [310, 326, 336], "ordinal_dai": [310, 336], "day_of_year": [310, 326, 336], "diff": [311, 314, 317, 319, 321, 324, 330, 532, 694, 697, 703, 705, 708, 711, 717, 887], "days_diff": 311, "epochtimeunit": [312, 695], "unix": [312, 502, 695], "epoch_n": [312, 695], "epoch_": [312, 695], "978307200000000": [312, 332, 695, 719], "978307200": [312, 695], "978393600000000": [312, 332, 695, 719], "978393600": [312, 695], "978480000000000": [312, 332, 695, 719], "978480000": [312, 695], "hours_diff": 314, "iso": [315, 335, 336, 698, 722, 723], "correspond": [315, 401, 532, 698, 787, 887], "2006": [315, 325, 712], "180": [315, 327, 339], "2002": [315, 325, 327, 339, 712, 726], "2004": [315, 325, 712], "2005": [315, 325, 712], "1001": [316, 317, 319, 324], "002": [316, 317, 319, 324, 496, 703, 705, 711], "2000": [316, 325, 712], "003": [316, 317, 319, 324], "3000": 316, "997": [316, 317, 319, 324], "997000": 316, "998": [316, 317, 319, 324], "998000": 316, "999": [316, 317, 319, 324], "999000": 316, "microseconds_diff": 317, "milliseconds_diff": 319, "minutes_diff": 321, "1440": [321, 708], "nanoseconds_diff": 324, "1000000": [324, 461, 711], "leap": [325, 712], "account": [325, 341, 342, 343, 532, 712, 730, 731, 732, 887], "minu": [325, 712], "dictat": [325, 712], "date_plus_1i": [325, 712], "1y2mo": [325, 712], "date_min": 325, "1998": [325, 712], "1999": [325, 712], "2003": [325, 502, 712], "ordin": [326, 401, 532, 713, 787, 887], "366": [326, 713], "half": [328, 341, 342, 343, 532, 715, 730, 731, 732, 887], "eg": [328, 458], "225": [328, 333], "to_fram": [328, 333, 458, 462, 463, 807, 808, 845, 846, 849, 887], "10m": [328, 333, 715, 720], "milli": [329, 716], "micro": [329, 716], "456789": 329, "654321": 329, "111110": 329, "765431": 329, "sec": 329, "11111": 329, "seconds_diff": 330, "timestamp_n": [332, 719], "timestamp_m": 332, "978307200000": 332, "978393600000": 332, "978480000000": 332, "53": [335, 722], "sundai": [336, 723], "incorrect": [337, 420, 532, 608, 724, 809, 887], "tu_u": [337, 724], "32971": [337, 724], "32974": [337, 724], "32976": [337, 724], "718281828459045": [340, 377, 532, 728, 768, 887], "formula": [340, 532, 728, 887], "pk": [340, 532, 728, 887], "459148": [340, 532], "754888": [340, 532], "span": [341, 342, 343, 532, 730, 731, 732, 887], "half_lif": [341, 342, 343, 532, 730, 731, 732, 887], "exponenti": [341, 342, 343, 345, 532, 730, 731, 732, 733, 887], "weight": [341, 342, 343, 407, 408, 409, 410, 411, 412, 414, 415, 416, 428, 532, 730, 731, 732, 793, 794, 795, 796, 797, 798, 800, 801, 802, 819, 887], "averag": [341, 401, 532, 730, 787, 887], "decai": [341, 342, 343, 532, 730, 731, 732, 887], "term": [341, 342, 343, 444, 447, 532, 730, 731, 732, 835, 838, 887], "mass": [341, 342, 343, 532, 730, 731, 732, 887], "gamma": [341, 342, 343, 532, 730, 731, 732, 887], "foral": [341, 342, 343, 532, 730, 731, 732, 887], "geq": [341, 342, 343, 532, 730, 731, 732, 887], "theta": [341, 342, 343, 532, 730, 731, 732, 887], "life": [341, 342, 343, 532, 730, 731, 732, 887], "exp": [341, 342, 343, 532, 730, 731, 732, 887], "ln": [341, 342, 343, 532, 730, 731, 732, 887], "smooth": [341, 342, 343, 532, 730, 731, 732, 887], "factor": [341, 342, 343, 471, 532, 730, 731, 732, 871, 887], "leq": [341, 342, 343, 532, 730, 731, 732, 887], "begin": [341, 342, 343, 441, 532, 730, 731, 732, 832, 887], "imbal": [341, 342, 343, 532, 730, 731, 732, 887], "ew": [341, 342, 343, 532, 730, 731, 732, 887], "w_i": [341, 342, 343, 532, 730, 731, 732, 887], "recurs": [341, 342, 343, 532, 730, 731, 732, 887], "y_0": [341, 342, 343, 532, 730, 731, 732, 887], "x_0": [341, 342, 343, 532, 730, 731, 732, 887], "y_t": [341, 342, 343, 532, 730, 731, 732, 887], "y_": [341, 342, 343, 532, 730, 731, 732, 887], "x_t": [341, 342, 343, 532, 730, 731, 732, 887], "observ": [341, 342, 343, 532, 730, 731, 732, 887], "428571": [341, 532], "bia": [342, 343, 372, 413, 428, 532, 731, 732, 765, 799, 819, 887], "unbias": [342, 343, 532, 731, 732, 887], "963624": [342, 532, 731, 887], "928571": [343, 532, 732, 887], "frozenset": [344, 486, 498, 532], "wildcard": [344, 479, 486, 491, 492, 498, 500, 515, 532], "regex": [344, 435, 436, 439, 441, 442, 448, 449, 456, 486, 498, 508, 511, 521, 532, 826, 827, 830, 832, 833, 839, 840, 847], "aa": [344, 498, 532], "ba": [344, 498, 532], "cc": [344, 498, 532], "718282": [345, 532], "389056": [345, 532], "54": [345, 532], "59815": [345, 532], "expand": [346, 404, 532, 734, 887], "favour": [346, 532, 734, 887], "arr": [346, 497, 525, 532, 734, 869, 879, 887], "exprlistnamespac": [346, 352, 532], "exprstringnamespac": [346, 532], "group_col": [350, 478, 532], "g1": [350, 395, 478, 532], "g2": [350, 395, 478, 532], "lt": [350, 478, 532], "gte": [350, 478, 532], "9774092659964970114": [355, 532], "13614470193936745724": [355, 532], "1101441246220388612": [355, 532], "11638928888656214026": [355, 532], "13382926553367784577": [355, 532], "cumsum": [357, 532, 565, 614, 887], "interpolationmethod": [358, 532, 746, 887], "regrid": [358, 532], "grid": [358, 532], "df_original_grid": [358, 532], "grid_point": [358, 532], "df_new_grid": [358, 532], "primit": [359, 363, 532, 869, 887], "finit": [361, 518, 532, 751, 887], "optional_memb": [363, 532, 754, 887], "infinit": [364, 532, 755, 887], "_isnan": [365, 532], "b_isnan": [365, 532], "negat": [366, 532], "_is_not_nan": [367, 532], "b_is_not_nan": [367, 532], "_not_nul": [368, 532], "a_not_nul": [368, 532], "b_not_nul": [368, 532], "_isnul": [369, 532], "a_isnul": [369, 532], "b_isnul": [369, 532], "undo": [371, 388, 532], "duplicateerror": [371, 532, 541], "occurr": [371, 532], "333333": [371, 416, 532, 782, 802, 887], "fisher": [372, 428, 532, 765, 819, 887], "fourth": [372, 532, 765, 887], "central": [372, 428, 532, 765, 819, 887], "definit": [372, 532, 765, 887], "subtract": [372, 532, 765, 887], "distribut": [372, 428, 532, 765, 819, 887], "elimin": [372, 532, 765, 887], "come": [372, 532, 542, 613, 765, 887], "bias": [372, 428, 532, 765, 819, 887], "scipi": [372, 428, 532, 765, 819, 887], "stat": [372, 428, 532, 765, 819, 887], "153061": [372, 532], "logarithm": [377, 378, 532, 768, 769, 887], "584963": [377, 532], "30103": [378, 532], "60206": [378, 532], "lowest": [379, 532], "9223372036854775808": [379, 532], "agg_list": [380, 532], "elementwis": [380, 407, 408, 409, 410, 411, 412, 414, 415, 416, 479, 480, 532, 793, 794, 795, 796, 797, 798, 800, 801, 802, 887], "third": [380, 532], "parti": [380, 532], "book": [380, 532], "argmax": [380, 532], "_revers": [381, 406, 464, 532], "b_revers": [381, 406, 464, 532], "computeerror": [385, 541], "keep_nam": [388, 532], "poison": [392, 393, 532, 778, 779, 887], "nanmax": [392, 393, 532, 778, 779, 887], "wherea": [392, 393, 532, 564, 571, 614, 778, 779, 887], "subgroup": [395, 532], "postgr": [395, 532], "max_by_group": [395, 532], "recent": [396, 532, 782, 887], "percent": [396, 532, 782, 887], "090909": [396, 532], "expon": [397, 532], "power": [397, 532], "reverse_": [398, 532], "reverse_a": [398, 532], "reverse_fruit": [398, 532], "reverse_b": [398, 532], "reverse_car": [398, 532], "rankmethod": [401, 532, 787, 887], "ti": [401, 532, 787, 887], "appropri": [401, 532, 787, 887], "competit": [401, 532, 787, 887], "highest": [401, 475, 518, 532, 787, 887], "immedi": [401, 520, 532, 787, 887], "64bit": [403, 532, 789, 887], "safe": [403, 532, 789, 869, 887], "coerc": [404, 532], "dim": [405, 532, 791, 887], "flat": [405, 532, 791, 887], "fruits_revers": [406, 464, 532], "cars_revers": [406, 464, 532], "window_s": [407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 532, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 887], "rolling_min": [407, 532, 793, 887], "rolling_max": [407, 532, 793, 887], "rolling_mean": [407, 532, 793, 887], "rolling_sum": [407, 532, 793, 887], "multipli": [407, 408, 409, 410, 411, 412, 414, 415, 416, 532, 793, 794, 795, 796, 797, 798, 800, 801, 802, 887], "358899": [407, 532], "041452": [407, 532], "567764": [407, 532], "travers": [408, 409, 411, 414, 415, 416, 532, 794, 795, 797, 800, 801, 802, 887], "vector": [408, 409, 411, 414, 415, 416, 532, 794, 795, 797, 800, 801, 802, 887], "5h": [408, 409, 410, 411, 412, 414, 415, 416, 532], "33": [412, 417, 486, 532, 798, 887], "skew": [413, 532, 799, 887], "527525": [414, 532, 800, 887], "digit": [417, 461, 532, 803, 827, 852, 887], "searchsortedsid": [419, 532, 805, 887], "maintain": [419, 473, 532, 590, 591, 614, 805, 873, 887], "leftmost": [419, 532, 805, 887], "rightmost": [419, 532, 805, 887], "six": [419, 532], "code": [420, 532, 570, 614, 809, 887], "care": [420, 532, 809, 887], "extrema": [423, 532, 813, 887], "112": [423, 532], "129": [423, 532], "i8": [423, 532, 792, 887], "8589934592": [423, 532], "1073741824": [423, 532], "content": [424, 476, 532, 815, 887], "175201": [427, 532, 818, 887], "about": [428, 532, 819, 887], "unimod": [428, 532, 819, 887], "skewtest": [428, 532, 819, 887], "speak": [428, 532, 819, 887], "g_1": [428, 532, 819, 887], "m_3": [428, 532, 819, 887], "m_2": [428, 532, 819, 887], "m_i": [428, 532, 819, 887], "sum_": [428, 532, 819, 887], "texttt": [428, 532, 819, 887], "k_3": [428, 532, 819, 887], "k_2": [428, 532, 819, 887], "sqrt": [428, 532, 819, 887], "343622": [428, 532], "larg": [430, 431, 532], "larger": [430, 518, 532, 590, 591, 614], "414214": [432, 532, 822, 887], "ends_with": [435, 456, 847], "crab": [435, 826], "dog": [435, 459, 460, 488, 826], "rab": [435, 826], "success": [436, 442, 827, 833], "overlap": [436, 442, 827, 833], "captur": [436, 441, 442, 827, 832, 833], "123": [436, 442, 449, 827, 833, 840, 867, 887], "bla": [436, 442, 827, 833], "asd": [436, 442, 827, 833], "678": [436, 442, 827, 833], "910t": [436, 442, 827, 833], "r": [436, 440, 441, 442, 448, 827, 831, 832, 833, 839], "count_digit": 436, "666f6f": [438, 829], "626172": [438, 829], "mango": [439, 456, 830, 847], "go": [439, 830], "has_suffix": 439, "group_index": [441, 832], "vote": [441, 832], "ballon_dor": [441, 832], "candid": [441, 832], "messi": [441, 832], "ref": [441, 832], "candidat": [441, 832], "jorginho": [441, 832], "ronaldo": [441, 832], "w": [441, 832], "extracted_nr": 442, "910": [442, 833], "json_path": [443, 834], "jsonpath": [443, 834], "regardless": [443, 834], "json_val": [443, 834], "n_char": [444, 835], "caf\u00e9": [444, 447, 835, 838], "345": [444, 447, 835, 838], "\u6771\u4eac": [444, 447, 835, 838], "nchar": [444, 447], "fillchar": [445, 450, 836, 841], "justifi": [445, 450, 836, 841], "pad": [445, 450, 461, 836, 841, 852], "cow": [445, 450, 836, 841], "monkei": [445, 450, 836, 841], "hippopotamu": [445, 450, 836, 841], "strip": [446, 451, 837, 842], "whitespac": [446, 451, 457, 837, 842, 848], "tworld": [446, 457, 837, 848], "wod": [446, 451, 837, 842], "rld": [446, 837], "text": [447, 448, 449, 838], "replace_al": [448, 839], "123abc": [448, 839], "abc456": [448, 839], "abcabc": [449, 840], "123a123": [449, 840], "bc": [449, 521, 840], "trail": [451, 457, 842, 848], "worl": [451, 457, 842, 848], "subslic": [452, 843], "pear": [452, 843], "papaya": [452, 843], "dragonfruit": [452, 843], "s_slice": 452, "ear": [452, 843], "aya": [452, 843], "uit": [452, 843], "ya": [452, 843], "onf": [452, 843], "a_1": [454, 845, 866, 887], "d_4": [454, 845], "rename_field": [454, 455, 845, 846], "first_part": [454, 455, 845, 846], "second_part": [454, 455, 845, 846], "remaind": [455, 846], "app": [456, 847], "has_prefix": 456, "polarstemporaltyp": [458, 849], "tz_awar": [458, 849], "utc": [458, 725, 849], "strftime": [458, 849], "zulu": [458, 849], "iso8601": [458, 849], "yet": [458, 849], "anywher": [458, 849], "3f": 458, "sun": [458, 849], "34": [458, 849], "lowercas": [459, 850], "variant": [459, 460], "uppercas": [460, 851], "100000": 461, "0010": 461, "0001": 461, "00000": 461, "00001": 461, "my_struct": [462, 463, 520], "anymor": 463, "panicexcept": [463, 541], "761594": [470, 532, 863, 887], "replic": [471, 532, 871, 887], "vals_phys": [471, 532], "largest": [472, 532, 872, 887], "smallest": [472, 532, 872, 887], "bottom_k": [472, 532], "value_count": [474, 532, 887], "9223372036854775807": [475, 532], "multithread": [476, 532], "columnwis": [479, 480], "AND": 479, "bitwis": [479, 480], "returns_scalar": 481, "Be": 482, "argsort": [483, 532, 887], "hamburg": 486, "lag": 487, "mimic": 487, "a_lag_": 487, "a_rol": 487, "plai": 488, "swim": 488, "walk": 488, "full_sent": 488, "covari": 490, "acc": [491, 492, 500, 515], "intoexpr": [491, 500], "include_init": 491, "accumul": [491, 492, 500, 515], "fn": [491, 492, 500, 515], "new_valu": [491, 492, 500, 515], "simpli": [491, 500], "cumreduc": 491, "across": [493, 521], "syntact": [493, 498, 499, 503, 514, 517, 521, 822, 887], "sugar": [493, 498, 499, 503, 514, 517, 521, 822, 887], "cumfold": 493, "999999": 495, "add_week": 496, "add_dai": 496, "add_second": 496, "add_millisecond": 496, "add_hour": 496, "add_millisec": 496, "ond": 496, "eval": 497, "mathemat": 497, "a_b_doubl": 497, "fstring": 501, "placehold": 501, "hello_": 501, "_world": 501, "foo_": 501, "_bar_": 501, "foo_a_bar_1": 501, "foo_b_bar_2": 501, "foo_c_bar_3": 501, "epoch": [502, 691], "timestep": 502, "1666683077": 502, "1666683099": 502, "39": 502, "12345": [502, 670, 740, 803, 887], "12346": 502, "agg_group": [503, 532], "allow_object": 506, "unknown": 506, "valueexcept": 506, "selector": [508, 511, 521], "544705": 513, "mode": [516, 532, 887], "propagate_nan": 518, "spearman": 518, "605551": 519, "605551275463989": 519, "a_and_b": 520, "isn": 524, "thens": 524, "chain": 524, "sometim": 531, "arcco": [532, 887], "arccosh": [532, 887], "arcsin": [532, 887], "arcsinh": [532, 887], "arctan": [532, 887], "arctanh": [532, 887], "arg_max": [532, 887], "arg_min": [532, 887], "arg_uniqu": [532, 887], "backward_fil": 532, "clip_max": [532, 887], "clip_min": [532, 887], "co": [532, 887], "cosh": [532, 887], "cumcount": 532, "cummax": [532, 887], "cummin": [532, 887], "cumprod": [532, 887], "cumulative_ev": [532, 887], "entropi": [532, 887], "ewm_mean": [532, 887], "ewm_std": [532, 887], "ewm_var": [532, 887], "extend_const": [532, 887], "flatten": 532, "inspect": [532, 614], "is_between": 532, "is_finit": [532, 887], "is_first": [532, 887], "is_in": [532, 887], "is_infinit": [532, 887], "is_nan": [532, 887], "is_not_nan": [532, 887], "is_not_nul": [532, 887], "kurtosi": [532, 887], "log10": [532, 887], "map_alia": 532, "nan_max": [532, 887], "nan_min": [532, 887], "pct_chang": [532, 887], "pow": 532, "reinterpret": [532, 887], "repeat_bi": 532, "reshap": [532, 887], "rolling_appli": [532, 887], "rolling_median": [532, 887], "rolling_quantil": [532, 887], "rolling_skew": [532, 887], "rolling_std": [532, 887], "rolling_var": [532, 887], "search_sort": [532, 887], "set_sort": [532, 887], "shrink_dtyp": [532, 887], "sin": [532, 887], "sinh": [532, 887], "sort_bi": 532, "tan": [532, 887], "tanh": [532, 887], "to_phys": [532, 887], "top_k": [532, 887], "unique_count": [532, 887], "expos": 541, "registr": 541, "miscellan": 541, "arrowerror": 541, "invalidoperationerror": 541, "nodataerror": 541, "notfounderror": 541, "schemaerror": 541, "shapeerror": 541, "build_info": 541, "show_vers": 541, "sqlcontext": [541, 893], "hit": [544, 614], "node": [544, 565, 572, 580, 583, 614], "huge": [547, 614], "saver": [547, 614], "purpos": [555, 614], "help": [555, 614], "influenc": [555, 572, 614], "read_json": [560, 606, 614], "lazygroupbi": [561, 562, 563, 614], "typeerror": [561, 614], "subscript": [561, 614], "validate_output_schema": [572, 614], "past": [572, 614], "paramount": [572, 614], "hard": [572, 614], "bug": [572, 608, 614], "invari": [572, 614], "upheld": [572, 614], "prune": [572, 614], "show_plot": [580, 614], "truncate_nod": [580, 614], "figsiz": [580, 589, 614], "gantt": [580, 614], "chart": [580, 614], "matplotlib": [580, 589, 614], "plot": [580, 589, 614], "groupby_partit": [580, 614], "470": [580, 614], "475": [580, 614], "1964": [580, 614], "from_json": [582, 614], "swap": [583, 614], "output_path": [589, 614], "raw_output": [589, 614], "figur": [589, 614], "persist": [590, 591, 614], "ram": [590, 591, 614], "slightli": [590, 591, 614], "my_larger_than_ram_fil": [590, 591, 614], "tmp": [590, 591, 614], "data_pagesize_limit": [591, 614], "290994": [594, 614], "118034": [594, 614], "433013": [594, 614], "1875": [600, 614], "extern": [604, 614], "df_a": [604, 614], "df_other": [604, 614], "afoo": [604, 614], "cfoo": [604, 614], "train_df": [604, 614], "feature_0": [604, 614], "feature_1": [604, 614], "test_df": [604, 614], "_train": [604, 614], "feature_0_train": [604, 614], "dataframescan": [606, 614], "output_schema": [606, 614], "unique_nam": 607, "instanti": 614, "profil": 614, "sink_ipc": 614, "sink_parquet": 614, "with_context": 614, "sr": [619, 887], "new_aliased_sr": [619, 887], "append_chunk": [622, 887], "super": [622, 887], "141593": [624, 887], "292432": [625, 887], "549306": [629, 887], "listnamespac": [636, 734, 887], "catnamespac": 668, "56789": [670, 740, 803, 887], "901234": [670, 740, 803, 887], "pi": [677, 817, 862, 887], "1232e": [677, 887], "quick": [684, 887], "series_num": [684, 887], "581139": [684, 887], "series_str": [684, 887], "datetimenamespac": 689, "1583020800": 691, "1585699200": 691, "1588291200": 691, "nyc": 691, "edt": 691, "1583038800": 691, "1585717200": 691, "1588309200": 691, "500m": [702, 704, 710, 716], "500000": 702, "2m": 707, "500000000": 710, "date_minus_1y_2mon": 712, "165": [715, 720], "series_equ": [715, 720, 887], "timestamp_u": 719, "978307200000000000": 719, "978393600000000000": 719, "978480000000000000": 719, "happen": 725, "brussels_t": 725, "brussel": 725, "005": [728, 887], "06293300616044681": [728, 887], "65": [728, 887], "8568409950394724": [728, 887], "4000000": [729, 887], "814697265625": [729, 887], "stringnamespac": [734, 824, 887], "bitmask": [742, 887], "swiftli": [742, 887], "10734580197236529959": [743, 887], "3022416320763508302": [743, 887], "13756996518000038261": [743, 887], "datelik": [748, 887], "166667": [782, 887], "142857": [782, 887], "512": [782, 887], "peak": [783, 784, 887], "nanstd": [793, 887], "858612": [793, 887], "200": [794, 795, 797, 887], "400": [794, 795, 797, 887], "150": [795, 887], "250": [795, 887], "350": [795, 887], "450": [795, 887], "381802": [799, 887], "dev": [800, 887], "57": [803, 887], "frequent": [807, 808, 887], "mutat": [808, 887], "2246e": [817, 862, 887], "divisor": [823, 876, 887], "6331e16": [862, 887], "lib": [865, 887], "int64arrai": [865, 887], "a_2": [866, 887], "a_3": [866, 887], "zero_copy_onli": [869, 887], "writabl": [869, 887], "view": [869, 887], "presenc": [869, 887], "immut": [869, 887], "made": [869, 887], "ignore_nul": [877, 887], "seriesview": [877, 887], "arraylik": 887, "nan_to_nul": 887, "dtype_if_empti": 887, "position": 887, "posit": 887, "scenario": 887, "through": 887, "arg_tru": 887, "chunk_length": 887, "get_chunk": 887, "has_valid": 887, "is_boolean": 887, "is_datelik": 887, "is_float": 887, "is_numer": 887, "is_sort": 887, "is_utf8": 887, "new_from_index": 887, "peak_max": 887, "peak_min": 887, "set_at_idx": 887, "readthedoc": 894}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [30, 0, 1, "", "DataType"], [31, 0, 1, "", "Date"], [32, 0, 1, "", "Datetime"], [33, 0, 1, "", "Duration"], [34, 0, 1, "", "Float32"], [35, 0, 1, "", "Float64"], [36, 0, 1, "", "Int16"], [37, 0, 1, "", "Int32"], [38, 0, 1, "", "Int64"], [39, 0, 1, "", "Int8"], [40, 0, 1, "", "List"], [41, 0, 1, "", "Null"], [42, 0, 1, "", "Object"], [893, 0, 1, "", "SQLContext"], [46, 0, 1, "", "StringCache"], [47, 0, 1, "", "Struct"], [48, 0, 1, "", "Time"], [49, 0, 1, "", "UInt16"], [50, 0, 1, "", "UInt32"], [51, 0, 1, "", "UInt64"], [52, 0, 1, "", "UInt8"], [53, 0, 1, "", "Unknown"], [54, 0, 1, "", "Utf8"], [55, 4, 1, "", "align_frames"], [479, 4, 1, "", "all"], [480, 4, 1, "", "any"], [481, 4, 1, "", "apply"], [482, 4, 1, "", "arange"], [60, 4, 1, "", "arg_where"], [483, 4, 1, "", "argsort_by"], [484, 4, 1, "", "avg"], [61, 4, 1, "", "build_info"], [485, 4, 1, "", "coalesce"], [486, 4, 1, "", "col"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "concat"], [487, 4, 1, "", "concat_list"], [488, 4, 1, "", "concat_str"], [489, 4, 1, "", "count"], [490, 4, 1, "", "cov"], [491, 4, 1, "", "cumfold"], [492, 4, 1, "", "cumreduce"], [493, 4, 1, "", "cumsum"], [64, 4, 1, "", "cut"], [494, 4, 1, "", "date"], [65, 4, 1, "", "date_range"], [495, 4, 1, "", "datetime"], [496, 4, 1, "", "duration"], [497, 4, 1, "", "element"], [498, 4, 1, "", "exclude"], [499, 4, 1, "", "first"], [500, 4, 1, "", "fold"], [501, 4, 1, "", "format"], [78, 4, 1, "", "from_arrow"], [79, 4, 1, "", "from_dict"], [80, 4, 1, "", "from_dicts"], [502, 4, 1, "", "from_epoch"], [81, 4, 1, "", "from_numpy"], [82, 4, 1, "", "from_pandas"], [83, 4, 1, "", "from_records"], [84, 4, 1, "", "get_dummies"], [85, 4, 1, "", "get_idx_type"], [503, 4, 1, "", "groups"], [504, 4, 1, "", "head"], [505, 4, 1, "", "list"], [506, 4, 1, "", "lit"], [507, 4, 1, "", "map"], [508, 4, 1, "", "max"], [509, 4, 1, "", "mean"], [510, 4, 1, "", "median"], [511, 4, 1, "", "min"], [512, 4, 1, "", "n_unique"], [87, 4, 1, "", "ones"], [513, 4, 1, "", "pearson_corr"], [514, 4, 1, "", "quantile"], [88, 4, 1, "", "read_avro"], [89, 4, 1, "", "read_csv"], [90, 4, 1, "", "read_csv_batched"], [91, 4, 1, "", "read_delta"], [92, 4, 1, "", "read_excel"], [93, 4, 1, "", "read_ipc"], [94, 4, 1, "", "read_ipc_schema"], [95, 4, 1, "", "read_json"], [96, 4, 1, "", "read_ndjson"], [97, 4, 1, "", "read_parquet"], [98, 4, 1, "", "read_parquet_schema"], [99, 4, 1, "", "read_sql"], [515, 4, 1, "", "reduce"], [516, 4, 1, "", "repeat"], [100, 4, 1, "", "scan_csv"], [101, 4, 1, "", "scan_delta"], [102, 4, 1, "", "scan_ds"], [103, 4, 1, "", "scan_ipc"], [104, 4, 1, "", "scan_ndjson"], [105, 4, 1, "", "scan_parquet"], [517, 4, 1, "", "select"], [106, 4, 1, "", "show_versions"], [518, 4, 1, "", "spearman_rank_corr"], [519, 4, 1, "", "std"], [520, 4, 1, "", "struct"], [521, 4, 1, "", "sum"], [522, 4, 1, "", "tail"], [113, 4, 1, "", "threadpool_size"], [114, 4, 1, "", "toggle_string_cache"], [523, 4, 1, "", "var"], [524, 4, 1, "", "when"], [115, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[118, 1, 1, "", "apply"], [119, 1, 1, "", "cleared"], [120, 1, 1, "", "clone"], [121, 2, 1, "", "columns"], [122, 1, 1, "", "describe"], [123, 1, 1, "", "drop"], [124, 1, 1, "", "drop_in_place"], [125, 1, 1, "", "drop_nulls"], [126, 2, 1, "", "dtypes"], [127, 1, 1, "", "estimated_size"], [128, 1, 1, "", "explode"], [129, 1, 1, "", "extend"], [130, 1, 1, "", "fill_nan"], [131, 1, 1, "", "fill_null"], [132, 1, 1, "", "filter"], [133, 1, 1, "", "find_idx_by_name"], [134, 1, 1, "", "fold"], [135, 1, 1, "", "frame_equal"], [136, 1, 1, "", "get_column"], [137, 1, 1, "", "get_columns"], [138, 1, 1, "", "glimpse"], [139, 1, 1, "", "groupby"], [140, 1, 1, "", "groupby_dynamic"], [141, 1, 1, "", "groupby_rolling"], [142, 1, 1, "", "hash_rows"], [143, 1, 1, "", "head"], [144, 2, 1, "", "height"], [145, 1, 1, "", "hstack"], [146, 1, 1, "", "insert_at_idx"], [147, 1, 1, "", "interpolate"], [148, 1, 1, "", "is_duplicated"], [149, 1, 1, "", "is_empty"], [150, 1, 1, "", "is_unique"], [151, 1, 1, "", "item"], [152, 1, 1, "", "iter_rows"], [153, 1, 1, "", "iter_slices"], [154, 1, 1, "", "join"], [155, 1, 1, "", "join_asof"], [156, 1, 1, "", "lazy"], [157, 1, 1, "", "limit"], [158, 1, 1, "", "max"], [159, 1, 1, "", "mean"], [160, 1, 1, "", "median"], [161, 1, 1, "", "melt"], [162, 1, 1, "", "merge_sorted"], [163, 1, 1, "", "min"], [164, 1, 1, "", "n_chunks"], [165, 1, 1, "", "n_unique"], [166, 1, 1, "", "null_count"], [167, 1, 1, "", "partition_by"], [168, 1, 1, "", "pearson_corr"], [169, 1, 1, "", "pipe"], [170, 1, 1, "", "pivot"], [171, 1, 1, "", "product"], [172, 1, 1, "", "quantile"], [173, 1, 1, "", "rechunk"], [174, 1, 1, "", "rename"], [175, 1, 1, "", "replace"], [176, 1, 1, "", "replace_at_idx"], [177, 1, 1, "", "reverse"], [178, 1, 1, "", "row"], [179, 1, 1, "", "rows"], [180, 1, 1, "", "sample"], [181, 2, 1, "", "schema"], [182, 1, 1, "", "select"], [183, 2, 1, "", "shape"], [184, 1, 1, "", "shift"], [185, 1, 1, "", "shift_and_fill"], [186, 1, 1, "", "shrink_to_fit"], [187, 1, 1, "", "slice"], [188, 1, 1, "", "sort"], [189, 1, 1, "", "std"], [190, 1, 1, "", "sum"], [191, 1, 1, "", "tail"], [192, 1, 1, "", "take_every"], [193, 1, 1, "", "to_arrow"], [194, 1, 1, "", "to_dict"], [195, 1, 1, "", "to_dicts"], [196, 1, 1, "", "to_dummies"], [197, 1, 1, "", "to_numpy"], [198, 1, 1, "", "to_pandas"], [199, 1, 1, "", "to_series"], [200, 1, 1, "", "to_struct"], [201, 1, 1, "", "transpose"], [202, 1, 1, "", "unique"], [203, 1, 1, "", "unnest"], [204, 1, 1, "", "unstack"], [205, 1, 1, "", "upsample"], [206, 1, 1, "", "var"], [207, 1, 1, "", "vstack"], [208, 2, 1, "", "width"], [209, 1, 1, "", "with_column"], [210, 1, 1, "", "with_columns"], [211, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_ipc"], [27, 1, 1, "", "write_json"], [28, 1, 1, "", "write_ndjson"], [29, 1, 1, "", "write_parquet"]], "polars.DataType": [[30, 1, 1, "", "__init__"]], "polars.Date": [[31, 1, 1, "", "__init__"]], "polars.Datetime": [[32, 1, 1, "", "__init__"]], "polars.Duration": [[33, 1, 1, "", "__init__"]], "polars.Expr": [[239, 1, 1, "", "abs"], [240, 1, 1, "", "agg_groups"], [241, 1, 1, "", "alias"], [242, 1, 1, "", "all"], [243, 1, 1, "", "any"], [244, 1, 1, "", "append"], [245, 1, 1, "", "apply"], [246, 1, 1, "", "arccos"], [247, 1, 1, "", "arccosh"], [248, 1, 1, "", "arcsin"], [249, 1, 1, "", "arcsinh"], [250, 1, 1, "", "arctan"], [251, 1, 1, "", "arctanh"], [252, 1, 1, "", "arg_max"], [253, 1, 1, "", "arg_min"], [254, 1, 1, "", "arg_sort"], [255, 1, 1, "", "arg_unique"], [256, 1, 1, "", "argsort"], [282, 1, 1, "", "backward_fill"], [288, 1, 1, "", "cast"], [290, 1, 1, "", "ceil"], [291, 1, 1, "", "clip"], [292, 1, 1, "", "clip_max"], [293, 1, 1, "", "clip_min"], [294, 1, 1, "", "cos"], [295, 1, 1, "", "cosh"], [296, 1, 1, "", "count"], [297, 1, 1, "", "cumcount"], [298, 1, 1, "", "cummax"], [299, 1, 1, "", "cummin"], [300, 1, 1, "", "cumprod"], [301, 1, 1, "", "cumsum"], [302, 1, 1, "", "cumulative_eval"], [303, 1, 1, "", "diff"], [304, 1, 1, "", "dot"], [305, 1, 1, "", "drop_nans"], [306, 1, 1, "", "drop_nulls"], [340, 1, 1, "", "entropy"], [341, 1, 1, "", "ewm_mean"], [342, 1, 1, "", "ewm_std"], [343, 1, 1, "", "ewm_var"], [344, 1, 1, "", "exclude"], [345, 1, 1, "", "exp"], [346, 1, 1, "", "explode"], [347, 1, 1, "", "extend_constant"], [348, 1, 1, "", "fill_nan"], [349, 1, 1, "", "fill_null"], [350, 1, 1, "", "filter"], [351, 1, 1, "", "first"], [352, 1, 1, "", "flatten"], [353, 1, 1, "", "floor"], [354, 1, 1, "", "forward_fill"], [355, 1, 1, "", "hash"], [356, 1, 1, "", "head"], [357, 1, 1, "", "inspect"], [358, 1, 1, "", "interpolate"], [359, 1, 1, "", "is_between"], [360, 1, 1, "", "is_duplicated"], [361, 1, 1, "", "is_finite"], [362, 1, 1, "", "is_first"], [363, 1, 1, "", "is_in"], [364, 1, 1, "", "is_infinite"], [365, 1, 1, "", "is_nan"], [366, 1, 1, "", "is_not"], [367, 1, 1, "", "is_not_nan"], [368, 1, 1, "", "is_not_null"], [369, 1, 1, "", "is_null"], [370, 1, 1, "", "is_unique"], [371, 1, 1, "", "keep_name"], [372, 1, 1, "", "kurtosis"], [373, 1, 1, "", "last"], [374, 1, 1, "", "len"], [375, 1, 1, "", "limit"], [376, 1, 1, "", "list"], [377, 1, 1, "", "log"], [378, 1, 1, "", "log10"], [379, 1, 1, "", "lower_bound"], [380, 1, 1, "", "map"], [381, 1, 1, "", "map_alias"], [382, 1, 1, "", "max"], [383, 1, 1, "", "mean"], [384, 1, 1, "", "median"], [389, 1, 1, "", "min"], [390, 1, 1, "", "mode"], [391, 1, 1, "", "n_unique"], [392, 1, 1, "", "nan_max"], [393, 1, 1, "", "nan_min"], [394, 1, 1, "", "null_count"], [395, 1, 1, "", "over"], [396, 1, 1, "", "pct_change"], [397, 1, 1, "", "pow"], [398, 1, 1, "", "prefix"], [399, 1, 1, "", "product"], [400, 1, 1, "", "quantile"], [401, 1, 1, "", "rank"], [402, 1, 1, "", "rechunk"], [403, 1, 1, "", "reinterpret"], [404, 1, 1, "", "repeat_by"], [405, 1, 1, "", "reshape"], [406, 1, 1, "", "reverse"], [407, 1, 1, "", "rolling_apply"], [408, 1, 1, "", "rolling_max"], [409, 1, 1, "", "rolling_mean"], [410, 1, 1, "", "rolling_median"], [411, 1, 1, "", "rolling_min"], [412, 1, 1, "", "rolling_quantile"], [413, 1, 1, "", "rolling_skew"], [414, 1, 1, "", "rolling_std"], [415, 1, 1, "", "rolling_sum"], [416, 1, 1, "", "rolling_var"], [417, 1, 1, "", "round"], [418, 1, 1, "", "sample"], [419, 1, 1, "", "search_sorted"], [420, 1, 1, "", "set_sorted"], [421, 1, 1, "", "shift"], [422, 1, 1, "", "shift_and_fill"], [423, 1, 1, "", "shrink_dtype"], [424, 1, 1, "", "shuffle"], [425, 1, 1, "", "sign"], [426, 1, 1, "", "sin"], [427, 1, 1, "", "sinh"], [428, 1, 1, "", "skew"], [429, 1, 1, "", "slice"], [430, 1, 1, "", "sort"], [431, 1, 1, "", "sort_by"], [432, 1, 1, "", "sqrt"], [433, 1, 1, "", "std"], [464, 1, 1, "", "suffix"], [465, 1, 1, "", "sum"], [466, 1, 1, "", "tail"], [467, 1, 1, "", "take"], [468, 1, 1, "", "take_every"], [469, 1, 1, "", "tan"], [470, 1, 1, "", "tanh"], [471, 1, 1, "", "to_physical"], [472, 1, 1, "", "top_k"], [473, 1, 1, "", "unique"], [474, 1, 1, "", "unique_counts"], [475, 1, 1, "", "upper_bound"], [476, 1, 1, "", "value_counts"], [477, 1, 1, "", "var"], [478, 1, 1, "", "where"]], "polars.Expr.arr": [[257, 1, 1, "", "arg_max"], [258, 1, 1, "", "arg_min"], [259, 1, 1, "", "concat"], [260, 1, 1, "", "contains"], [261, 1, 1, "", "diff"], [262, 1, 1, "", "eval"], [263, 1, 1, "", "explode"], [264, 1, 1, "", "first"], [265, 1, 1, "", "get"], [266, 1, 1, "", "head"], [267, 1, 1, "", "join"], [268, 1, 1, "", "last"], [269, 1, 1, "", "lengths"], [270, 1, 1, "", "max"], [271, 1, 1, "", "mean"], [272, 1, 1, "", "min"], [273, 1, 1, "", "reverse"], [274, 1, 1, "", "shift"], [275, 1, 1, "", "slice"], [276, 1, 1, "", "sort"], [277, 1, 1, "", "sum"], [278, 1, 1, "", "tail"], [279, 1, 1, "", "take"], [280, 1, 1, "", "to_struct"], [281, 1, 1, "", "unique"]], "polars.Expr.bin": [[283, 1, 1, "", "contains"], [284, 1, 1, "", "decode"], [285, 1, 1, "", "encode"], [286, 1, 1, "", "ends_with"], [287, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[289, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[307, 1, 1, "", "cast_time_unit"], [308, 1, 1, "", "cast_time_zone"], [309, 1, 1, "", "combine"], [310, 1, 1, "", "day"], [311, 1, 1, "", "days"], [312, 1, 1, "", "epoch"], [313, 1, 1, "", "hour"], [314, 1, 1, "", "hours"], [315, 1, 1, "", "iso_year"], [316, 1, 1, "", "microsecond"], [317, 1, 1, "", "microseconds"], [318, 1, 1, "", "millisecond"], [319, 1, 1, "", "milliseconds"], [320, 1, 1, "", "minute"], [321, 1, 1, "", "minutes"], [322, 1, 1, "", "month"], [323, 1, 1, "", "nanosecond"], [324, 1, 1, "", "nanoseconds"], [325, 1, 1, "", "offset_by"], [326, 1, 1, "", "ordinal_day"], [327, 1, 1, "", "quarter"], [328, 1, 1, "", "round"], [329, 1, 1, "", "second"], [330, 1, 1, "", "seconds"], [331, 1, 1, "", "strftime"], [332, 1, 1, "", "timestamp"], [333, 1, 1, "", "truncate"], [334, 1, 1, "", "tz_localize"], [335, 1, 1, "", "week"], [336, 1, 1, "", "weekday"], [337, 1, 1, "", "with_time_unit"], [338, 1, 1, "", "with_time_zone"], [339, 1, 1, "", "year"]], "polars.Expr.meta": [[385, 1, 1, "", "output_name"], [386, 1, 1, "", "pop"], [387, 1, 1, "", "root_names"], [388, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[434, 1, 1, "", "concat"], [435, 1, 1, "", "contains"], [436, 1, 1, "", "count_match"], [437, 1, 1, "", "decode"], [438, 1, 1, "", "encode"], [439, 1, 1, "", "ends_with"], [440, 1, 1, "", "explode"], [441, 1, 1, "", "extract"], [442, 1, 1, "", "extract_all"], [443, 1, 1, "", "json_path_match"], [444, 1, 1, "", "lengths"], [445, 1, 1, "", "ljust"], [446, 1, 1, "", "lstrip"], [447, 1, 1, "", "n_chars"], [448, 1, 1, "", "replace"], [449, 1, 1, "", "replace_all"], [450, 1, 1, "", "rjust"], [451, 1, 1, "", "rstrip"], [452, 1, 1, "", "slice"], [453, 1, 1, "", "split"], [454, 1, 1, "", "split_exact"], [455, 1, 1, "", "splitn"], [456, 1, 1, "", "starts_with"], [457, 1, 1, "", "strip"], [458, 1, 1, "", "strptime"], [459, 1, 1, "", "to_lowercase"], [460, 1, 1, "", "to_uppercase"], [461, 1, 1, "", "zfill"]], "polars.Expr.struct": [[462, 1, 1, "", "field"], [463, 1, 1, "", "rename_fields"]], "polars.Float32": [[34, 1, 1, "", "__init__"]], "polars.Float64": [[35, 1, 1, "", "__init__"]], "polars.Int16": [[36, 1, 1, "", "__init__"]], "polars.Int32": [[37, 1, 1, "", "__init__"]], "polars.Int64": [[38, 1, 1, "", "__init__"]], "polars.Int8": [[39, 1, 1, "", "__init__"]], "polars.LazyFrame": [[544, 1, 1, "", "cache"], [545, 1, 1, "", "cleared"], [546, 1, 1, "", "clone"], [547, 1, 1, "", "collect"], [548, 2, 1, "", "columns"], [549, 1, 1, "", "describe_optimized_plan"], [550, 1, 1, "", "describe_plan"], [551, 1, 1, "", "drop"], [552, 1, 1, "", "drop_nulls"], [553, 2, 1, "", "dtypes"], [554, 1, 1, "", "explode"], [555, 1, 1, "", "fetch"], [556, 1, 1, "", "fill_nan"], [557, 1, 1, "", "fill_null"], [558, 1, 1, "", "filter"], [559, 1, 1, "", "first"], [560, 1, 1, "", "from_json"], [561, 1, 1, "", "groupby"], [562, 1, 1, "", "groupby_dynamic"], [563, 1, 1, "", "groupby_rolling"], [564, 1, 1, "", "head"], [565, 1, 1, "", "inspect"], [566, 1, 1, "", "interpolate"], [567, 1, 1, "", "join"], [568, 1, 1, "", "join_asof"], [569, 1, 1, "", "last"], [570, 1, 1, "", "lazy"], [571, 1, 1, "", "limit"], [572, 1, 1, "", "map"], [573, 1, 1, "", "max"], [574, 1, 1, "", "mean"], [575, 1, 1, "", "median"], [576, 1, 1, "", "melt"], [577, 1, 1, "", "merge_sorted"], [578, 1, 1, "", "min"], [579, 1, 1, "", "pipe"], [580, 1, 1, "", "profile"], [581, 1, 1, "", "quantile"], [582, 1, 1, "", "read_json"], [583, 1, 1, "", "rename"], [584, 1, 1, "", "reverse"], [585, 2, 1, "", "schema"], [586, 1, 1, "", "select"], [587, 1, 1, "", "shift"], [588, 1, 1, "", "shift_and_fill"], [589, 1, 1, "", "show_graph"], [590, 1, 1, "", "sink_ipc"], [591, 1, 1, "", "sink_parquet"], [592, 1, 1, "", "slice"], [593, 1, 1, "", "sort"], [594, 1, 1, "", "std"], [595, 1, 1, "", "sum"], [596, 1, 1, "", "tail"], [597, 1, 1, "", "take_every"], [598, 1, 1, "", "unique"], [599, 1, 1, "", "unnest"], [600, 1, 1, "", "var"], [601, 2, 1, "", "width"], [602, 1, 1, "", "with_column"], [603, 1, 1, "", "with_columns"], [604, 1, 1, "", "with_context"], [605, 1, 1, "", "with_row_count"], [606, 1, 1, "", "write_json"]], "polars.List": [[40, 1, 1, "", "__init__"]], "polars.Null": [[41, 1, 1, "", "__init__"]], "polars.Object": [[42, 1, 1, "", "__init__"]], "polars.SQLContext": [[43, 1, 1, "", "execute"], [44, 1, 1, "", "query"], [45, 1, 1, "", "register"]], "polars.Series": [[618, 1, 1, "", "abs"], [619, 1, 1, "", "alias"], [620, 1, 1, "", "all"], [621, 1, 1, "", "any"], [622, 1, 1, "", "append"], [623, 1, 1, "", "apply"], [624, 1, 1, "", "arccos"], [625, 1, 1, "", "arccosh"], [626, 1, 1, "", "arcsin"], [627, 1, 1, "", "arcsinh"], [628, 1, 1, "", "arctan"], [629, 1, 1, "", "arctanh"], [630, 1, 1, "", "arg_max"], [631, 1, 1, "", "arg_min"], [632, 1, 1, "", "arg_sort"], [633, 1, 1, "", "arg_true"], [634, 1, 1, "", "arg_unique"], [635, 1, 1, "", "argsort"], [636, 3, 1, "", "arr"], [667, 1, 1, "", "cast"], [668, 3, 1, "", "cat"], [670, 1, 1, "", "ceil"], [671, 1, 1, "", "chunk_lengths"], [672, 1, 1, "", "cleared"], [673, 1, 1, "", "clip"], [674, 1, 1, "", "clip_max"], [675, 1, 1, "", "clip_min"], [676, 1, 1, "", "clone"], [677, 1, 1, "", "cos"], [678, 1, 1, "", "cosh"], [679, 1, 1, "", "cummax"], [680, 1, 1, "", "cummin"], [681, 1, 1, "", "cumprod"], [682, 1, 1, "", "cumsum"], [683, 1, 1, "", "cumulative_eval"], [684, 1, 1, "", "describe"], [685, 1, 1, "", "diff"], [686, 1, 1, "", "dot"], [687, 1, 1, "", "drop_nans"], [688, 1, 1, "", "drop_nulls"], [689, 3, 1, "", "dt"], [727, 3, 1, "", "dtype"], [728, 1, 1, "", "entropy"], [729, 1, 1, "", "estimated_size"], [730, 1, 1, "", "ewm_mean"], [731, 1, 1, "", "ewm_std"], [732, 1, 1, "", "ewm_var"], [733, 1, 1, "", "exp"], [734, 1, 1, "", "explode"], [735, 1, 1, "", "extend_constant"], [736, 1, 1, "", "fill_nan"], [737, 1, 1, "", "fill_null"], [738, 1, 1, "", "filter"], [739, 3, 1, "", "flags"], [740, 1, 1, "", "floor"], [741, 1, 1, "", "get_chunks"], [742, 1, 1, "", "has_validity"], [743, 1, 1, "", "hash"], [744, 1, 1, "", "head"], [745, 3, 1, "", "inner_dtype"], [746, 1, 1, "", "interpolate"], [747, 1, 1, "", "is_boolean"], [748, 1, 1, "", "is_datelike"], [749, 1, 1, "", "is_duplicated"], [750, 1, 1, "", "is_empty"], [751, 1, 1, "", "is_finite"], [752, 1, 1, "", "is_first"], [753, 1, 1, "", "is_float"], [754, 1, 1, "", "is_in"], [755, 1, 1, "", "is_infinite"], [756, 1, 1, "", "is_nan"], [757, 1, 1, "", "is_not_nan"], [758, 1, 1, "", "is_not_null"], [759, 1, 1, "", "is_null"], [760, 1, 1, "", "is_numeric"], [761, 1, 1, "", "is_sorted"], [762, 1, 1, "", "is_unique"], [763, 1, 1, "", "is_utf8"], [764, 1, 1, "", "item"], [765, 1, 1, "", "kurtosis"], [766, 1, 1, "", "len"], [767, 1, 1, "", "limit"], [768, 1, 1, "", "log"], [769, 1, 1, "", "log10"], [770, 1, 1, "", "max"], [771, 1, 1, "", "mean"], [772, 1, 1, "", "median"], [773, 1, 1, "", "min"], [774, 1, 1, "", "mode"], [775, 1, 1, "", "n_chunks"], [776, 1, 1, "", "n_unique"], [777, 3, 1, "", "name"], [778, 1, 1, "", "nan_max"], [779, 1, 1, "", "nan_min"], [780, 1, 1, "", "new_from_index"], [781, 1, 1, "", "null_count"], [782, 1, 1, "", "pct_change"], [783, 1, 1, "", "peak_max"], [784, 1, 1, "", "peak_min"], [785, 1, 1, "", "product"], [786, 1, 1, "", "quantile"], [787, 1, 1, "", "rank"], [788, 1, 1, "", "rechunk"], [789, 1, 1, "", "reinterpret"], [790, 1, 1, "", "rename"], [791, 1, 1, "", "reshape"], [792, 1, 1, "", "reverse"], [793, 1, 1, "", "rolling_apply"], [794, 1, 1, "", "rolling_max"], [795, 1, 1, "", "rolling_mean"], [796, 1, 1, "", "rolling_median"], [797, 1, 1, "", "rolling_min"], [798, 1, 1, "", "rolling_quantile"], [799, 1, 1, "", "rolling_skew"], [800, 1, 1, "", "rolling_std"], [801, 1, 1, "", "rolling_sum"], [802, 1, 1, "", "rolling_var"], [803, 1, 1, "", "round"], [804, 1, 1, "", "sample"], [805, 1, 1, "", "search_sorted"], [806, 1, 1, "", "series_equal"], [807, 1, 1, "", "set"], [808, 1, 1, "", "set_at_idx"], [809, 1, 1, "", "set_sorted"], [810, 3, 1, "", "shape"], [811, 1, 1, "", "shift"], [812, 1, 1, "", "shift_and_fill"], [813, 1, 1, "", "shrink_dtype"], [814, 1, 1, "", "shrink_to_fit"], [815, 1, 1, "", "shuffle"], [816, 1, 1, "", "sign"], [817, 1, 1, "", "sin"], [818, 1, 1, "", "sinh"], [819, 1, 1, "", "skew"], [820, 1, 1, "", "slice"], [821, 1, 1, "", "sort"], [822, 1, 1, "", "sqrt"], [823, 1, 1, "", "std"], [824, 3, 1, "", "str"], [858, 1, 1, "", "sum"], [859, 1, 1, "", "tail"], [860, 1, 1, "", "take"], [861, 1, 1, "", "take_every"], [862, 1, 1, "", "tan"], [863, 1, 1, "", "tanh"], [864, 3, 1, "", "time_unit"], [865, 1, 1, "", "to_arrow"], [866, 1, 1, "", "to_dummies"], [867, 1, 1, "", "to_frame"], [868, 1, 1, "", "to_list"], [869, 1, 1, "", "to_numpy"], [870, 1, 1, "", "to_pandas"], [871, 1, 1, "", "to_physical"], [872, 1, 1, "", "top_k"], [873, 1, 1, "", "unique"], [874, 1, 1, "", "unique_counts"], [875, 1, 1, "", "value_counts"], [876, 1, 1, "", "var"], [877, 1, 1, "", "view"], [878, 1, 1, "", "zip_with"]], "polars.Series.arr": [[637, 1, 1, "", "arg_max"], [638, 1, 1, "", "arg_min"], [639, 1, 1, "", "concat"], [640, 1, 1, "", "contains"], [641, 1, 1, "", "diff"], [642, 1, 1, "", "eval"], [643, 1, 1, "", "explode"], [644, 1, 1, "", "first"], [645, 1, 1, "", "get"], [646, 1, 1, "", "head"], [647, 1, 1, "", "join"], [648, 1, 1, "", "last"], [649, 1, 1, "", "lengths"], [650, 1, 1, "", "max"], [651, 1, 1, "", "mean"], [652, 1, 1, "", "min"], [653, 1, 1, "", "reverse"], [654, 1, 1, "", "shift"], [655, 1, 1, "", "slice"], [656, 1, 1, "", "sort"], [657, 1, 1, "", "sum"], [658, 1, 1, "", "tail"], [659, 1, 1, "", "take"], [660, 1, 1, "", "to_struct"], [661, 1, 1, "", "unique"]], "polars.Series.bin": [[662, 1, 1, "", "contains"], [663, 1, 1, "", "decode"], [664, 1, 1, "", "encode"], [665, 1, 1, "", "ends_with"], [666, 1, 1, "", "starts_with"]], "polars.Series.cat": [[669, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[690, 1, 1, "", "cast_time_unit"], [691, 1, 1, "", "cast_time_zone"], [692, 1, 1, "", "combine"], [693, 1, 1, "", "day"], [694, 1, 1, "", "days"], [695, 1, 1, "", "epoch"], [696, 1, 1, "", "hour"], [697, 1, 1, "", "hours"], [698, 1, 1, "", "iso_year"], [699, 1, 1, "", "max"], [700, 1, 1, "", "mean"], [701, 1, 1, "", "median"], [702, 1, 1, "", "microsecond"], [703, 1, 1, "", "microseconds"], [704, 1, 1, "", "millisecond"], [705, 1, 1, "", "milliseconds"], [706, 1, 1, "", "min"], [707, 1, 1, "", "minute"], [708, 1, 1, "", "minutes"], [709, 1, 1, "", "month"], [710, 1, 1, "", "nanosecond"], [711, 1, 1, "", "nanoseconds"], [712, 1, 1, "", "offset_by"], [713, 1, 1, "", "ordinal_day"], [714, 1, 1, "", "quarter"], [715, 1, 1, "", "round"], [716, 1, 1, "", "second"], [717, 1, 1, "", "seconds"], [718, 1, 1, "", "strftime"], [719, 1, 1, "", "timestamp"], [720, 1, 1, "", "truncate"], [721, 1, 1, "", "tz_localize"], [722, 1, 1, "", "week"], [723, 1, 1, "", "weekday"], [724, 1, 1, "", "with_time_unit"], [725, 1, 1, "", "with_time_zone"], [726, 1, 1, "", "year"]], "polars.Series.str": [[825, 1, 1, "", "concat"], [826, 1, 1, "", "contains"], [827, 1, 1, "", "count_match"], [828, 1, 1, "", "decode"], [829, 1, 1, "", "encode"], [830, 1, 1, "", "ends_with"], [831, 1, 1, "", "explode"], [832, 1, 1, "", "extract"], [833, 1, 1, "", "extract_all"], [834, 1, 1, "", "json_path_match"], [835, 1, 1, "", "lengths"], [836, 1, 1, "", "ljust"], [837, 1, 1, "", "lstrip"], [838, 1, 1, "", "n_chars"], [839, 1, 1, "", "replace"], [840, 1, 1, "", "replace_all"], [841, 1, 1, "", "rjust"], [842, 1, 1, "", "rstrip"], [843, 1, 1, "", "slice"], [844, 1, 1, "", "split"], [845, 1, 1, "", "split_exact"], [846, 1, 1, "", "splitn"], [847, 1, 1, "", "starts_with"], [848, 1, 1, "", "strip"], [849, 1, 1, "", "strptime"], [850, 1, 1, "", "to_lowercase"], [851, 1, 1, "", "to_uppercase"], [852, 1, 1, "", "zfill"]], "polars.Series.struct": [[853, 1, 1, "", "field"], [854, 3, 1, "", "fields"], [855, 1, 1, "", "rename_fields"], [856, 1, 1, "", "to_frame"], [857, 1, 1, "", "unnest"]], "polars.StringCache": [[46, 1, 1, "", "__init__"]], "polars.Struct": [[47, 1, 1, "", "__init__"]], "polars.Time": [[48, 1, 1, "", "__init__"]], "polars.UInt16": [[49, 1, 1, "", "__init__"]], "polars.UInt32": [[50, 1, 1, "", "__init__"]], "polars.UInt64": [[51, 1, 1, "", "__init__"]], "polars.UInt8": [[52, 1, 1, "", "__init__"]], "polars.Unknown": [[53, 1, 1, "", "__init__"]], "polars.Utf8": [[54, 1, 1, "", "__init__"]], "polars.api": [[56, 4, 1, "", "register_dataframe_namespace"], [57, 4, 1, "", "register_expr_namespace"], [58, 4, 1, "", "register_lazyframe_namespace"], [59, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[66, 5, 1, "", "ArrowError"], [67, 5, 1, "", "ComputeError"], [68, 5, 1, "", "DuplicateError"], [69, 5, 1, "", "InvalidOperationError"], [70, 5, 1, "", "NoDataError"], [71, 5, 1, "", "NoRowsReturned"], [72, 5, 1, "", "NotFoundError"], [73, 5, 1, "", "PanicException"], [74, 5, 1, "", "RowsException"], [75, 5, 1, "", "SchemaError"], [76, 5, 1, "", "ShapeError"], [77, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[86, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[212, 1, 1, "", "__iter__"], [213, 1, 1, "", "agg"], [214, 1, 1, "", "all"], [215, 1, 1, "", "apply"], [216, 1, 1, "", "count"], [217, 1, 1, "", "first"], [218, 1, 1, "", "head"], [219, 1, 1, "", "last"], [220, 1, 1, "", "max"], [221, 1, 1, "", "mean"], [222, 1, 1, "", "median"], [223, 1, 1, "", "min"], [224, 1, 1, "", "n_unique"], [225, 1, 1, "", "quantile"], [226, 1, 1, "", "sum"], [227, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[607, 1, 1, "", "agg"], [608, 1, 1, "", "apply"], [609, 1, 1, "", "head"], [610, 1, 1, "", "tail"]], "polars.testing": [[107, 4, 1, "", "assert_frame_equal"], [108, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[109, 0, 1, "", "column"], [110, 4, 1, "", "columns"], [111, 4, 1, "", "dataframes"], [112, 4, 1, "", "series"]], "polars.testing.parametric.column": [[109, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 129], "api": [1, 56, 57, 58, 59, 541], "provid": 1, "new": 1, "function": [1, 236, 531, 540], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878], "binari": [2, 526, 881], "boolean": [3, 527, 882], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 116], "load": [5, 116], "restore_default": 6, "save": [7, 116], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 116], "datafram": [24, 25, 26, 27, 28, 29, 111, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 233], "write_avro": 24, "write_csv": 25, "write_ipc": 26, "write_json": [27, 606], "write_ndjson": 28, "write_parquet": 29, "datatyp": 30, "date": [31, 236, 494], "datetim": [32, 495], "durat": [33, 496], "float32": 34, "float64": 35, "int16": 36, "int32": 37, "int64": 38, "int8": 39, "list": [40, 376, 505], "null": 41, "object": 42, "sqlcontext": [43, 44, 45], "execut": 43, "queri": 44, "regist": 45, "stringcach": [46, 540], "struct": [47, 462, 463, 520, 537, 853, 854, 855, 856, 857, 891], "time": [48, 236], "uint16": 49, "uint32": 50, "uint64": 51, "uint8": 52, "unknown": 53, "utf8": 54, "align_fram": 55, "register_dataframe_namespac": 56, "register_expr_namespac": 57, "register_lazyframe_namespac": 58, "register_series_namespac": 59, "arg_wher": 60, "build_info": 61, "collect_al": 62, "concat": [63, 259, 434, 639, 825], "cut": 64, "date_rang": 65, "except": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 237], "arrowerror": 66, "computeerror": 67, "duplicateerror": 68, "invalidoperationerror": 69, "nodataerror": 70, "norowsreturn": 71, "notfounderror": 72, "panicexcept": 73, "rowsexcept": 74, "schemaerror": 75, "shapeerror": 76, "toomanyrowsreturn": 77, "from_arrow": 78, "from_dict": [79, 80], "from_numpi": 81, "from_panda": 82, "from_record": 83, "get_dummi": 84, "get_idx_typ": 85, "intern": [86, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 607, 608, 609, 610], "batch": 86, "batchedcsvread": [86, 542], "next_batch": 86, "ones": 87, "read_avro": 88, "read_csv": 89, "read_csv_batch": 90, "read_delta": 91, "read_excel": 92, "read_ipc": 93, "read_ipc_schema": 94, "read_json": [95, 582], "read_ndjson": 96, "read_parquet": 97, "read_parquet_schema": 98, "read_sql": 99, "scan_csv": 100, "scan_delta": 101, "scan_d": 102, "scan_ipc": 103, "scan_ndjson": 104, "scan_parquet": 105, "show_vers": 106, "test": [107, 108, 109, 110, 111, 112, 894], "assert_frame_equ": 107, "assert_series_equ": 108, "parametr": [109, 110, 111, 112], "column": [109, 110, 121, 529, 548], "seri": [112, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 887], "threadpool_s": 113, "toggle_string_cach": 114, "zero": 115, "option": 116, "current": 116, "us": 116, "context": 116, "manag": 116, "aggreg": [117, 238, 543, 617], "appli": [118, 215, 245, 481, 608, 623], "clear": [119, 545, 672], "clone": [120, 546, 676], "describ": [122, 684], "drop": [123, 551], "drop_in_plac": 124, "drop_nul": [125, 306, 552, 688], "dtype": [126, 553, 727], "estimated_s": [127, 729], "explod": [128, 263, 346, 440, 554, 643, 734, 831], "fill_nan": [130, 348, 556, 736], "fill_nul": [131, 349, 557, 737], "filter": [132, 350, 558, 738], "find_idx_by_nam": 133, "fold": [134, 500], "frame_equ": 135, "get_column": [136, 137], "glimps": 138, "groupbi": [139, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 561, 607, 608, 609, 610, 613], "groupby_dynam": [140, 562], "groupby_rol": [141, 563], "hash_row": 142, "head": [143, 218, 266, 356, 504, 564, 609, 646, 744], "height": 144, "hstack": 145, "insert_at_idx": 146, "interpol": [147, 358, 566, 746], "is_dupl": [148, 360, 749], "is_empti": [149, 750], "is_uniqu": [150, 370, 762], "item": [151, 764], "iter_row": 152, "iter_slic": 153, "join": [154, 267, 567, 647], "join_asof": [155, 568], "lazi": [156, 540, 570], "limit": [157, 375, 571, 767], "max": [158, 220, 270, 382, 508, 573, 650, 699, 770], "mean": [159, 221, 271, 383, 509, 574, 651, 700, 771], "median": [160, 222, 384, 510, 575, 701, 772], "melt": [161, 576], "merge_sort": [162, 577], "min": [163, 223, 272, 389, 511, 578, 652, 706, 773], "n_chunk": [164, 775], "n_uniqu": [165, 224, 391, 512, 776], "null_count": [166, 394, 781], "partition_bi": 167, "pearson_corr": [168, 513], "pipe": [169, 579], "pivot": 170, "product": [171, 399, 785], "quantil": [172, 225, 400, 514, 581, 786], "rechunk": [173, 402, 788], "renam": [174, 583, 790], "replac": [175, 448, 839], "replace_at_idx": 176, "revers": [177, 273, 406, 584, 653, 792], "row": [178, 179], "sampl": [180, 418, 804], "schema": [181, 585], "select": [182, 235, 517, 535, 586, 616, 889], "shape": [183, 810], "shift": [184, 274, 421, 587, 654, 811], "shift_and_fil": [185, 422, 588, 812], "shrink_to_fit": [186, 814], "slice": [187, 275, 429, 452, 592, 655, 820, 843], "sort": [188, 276, 430, 593, 656, 821], "std": [189, 433, 519, 594, 823], "sum": [190, 226, 277, 465, 521, 595, 657, 858], "tail": [191, 227, 278, 466, 522, 596, 610, 658, 859], "take_everi": [192, 468, 597, 861], "to_arrow": [193, 865], "to_dict": [194, 195], "to_dummi": [196, 866], "to_numpi": [197, 869], "to_panda": [198, 870], "to_seri": 199, "to_struct": [200, 280, 660], "transpos": 201, "uniqu": [202, 281, 473, 598, 661, 873], "unnest": [203, 599, 857], "unstack": 204, "upsampl": 205, "var": [206, 477, 523, 600, 876], "vstack": 207, "width": [208, 601], "with_column": [209, 210, 602, 603], "with_row_count": [211, 605], "__iter__": 212, "agg": [213, 607], "all": [214, 242, 479, 620], "count": [216, 296, 489], "first": [217, 264, 351, 499, 559, 644], "last": [219, 268, 373, 569, 648], "attribut": [228, 611, 880], "comput": [229, 530, 884], "descript": [230, 612, 885], "export": [231, 886], "miscellan": [234, 534, 540, 615, 888], "manipul": [235, 535, 616, 889], "data": 236, "type": 236, "numer": 236, "nest": 236, "other": 236, "expr": [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "ab": [239, 618], "agg_group": 240, "alia": [241, 619], "ani": [243, 480, 621], "append": [244, 622], "arcco": [246, 624], "arccosh": [247, 625], "arcsin": [248, 626], "arcsinh": [249, 627], "arctan": [250, 628], "arctanh": [251, 629], "arg_max": [252, 257, 630, 637], "arg_min": [253, 258, 631, 638], "arg_sort": [254, 632], "arg_uniqu": [255, 634], "argsort": [256, 635], "arr": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "contain": [260, 283, 435, 640, 662, 826], "diff": [261, 303, 641, 685], "eval": [262, 642], "get": [265, 645], "length": [269, 444, 649, 835], "take": [279, 467, 659, 860], "backward_fil": 282, "bin": [283, 284, 285, 286, 287, 662, 663, 664, 665, 666], "decod": [284, 437, 663, 828], "encod": [285, 438, 664, 829], "ends_with": [286, 439, 665, 830], "starts_with": [287, 456, 666, 847], "cast": [288, 667], "cat": [289, 668, 669], "set_ord": [289, 669], "ceil": [290, 670], "clip": [291, 673], "clip_max": [292, 674], "clip_min": [293, 675], "co": [294, 677], "cosh": [295, 678], "cumcount": 297, "cummax": [298, 679], "cummin": [299, 680], "cumprod": [300, 681], "cumsum": [301, 493, 682], "cumulative_ev": [302, 683], "dot": [304, 686], "drop_nan": [305, 687], "dt": [307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726], "cast_time_unit": [307, 690], "cast_time_zon": [308, 691], "combin": [309, 692], "dai": [310, 311, 693, 694], "epoch": [312, 695], "hour": [313, 314, 696, 697], "iso_year": [315, 698], "microsecond": [316, 317, 702, 703], "millisecond": [318, 319, 704, 705], "minut": [320, 321, 707, 708], "month": [322, 709], "nanosecond": [323, 324, 710, 711], "offset_bi": [325, 712], "ordinal_dai": [326, 713], "quarter": [327, 714], "round": [328, 417, 715, 803], "second": [329, 330, 716, 717], "strftime": [331, 718], "timestamp": [332, 719], "truncat": [333, 720], "tz_local": [334, 721], "week": [335, 722], "weekdai": [336, 723], "with_time_unit": [337, 724], "with_time_zon": [338, 725], "year": [339, 726], "entropi": [340, 728], "ewm_mean": [341, 730], "ewm_std": [342, 731], "ewm_var": [343, 732], "exclud": [344, 498], "exp": [345, 733], "extend_const": [347, 735], "flatten": 352, "floor": [353, 740], "forward_fil": 354, "hash": [355, 743], "inspect": [357, 565], "is_between": 359, "is_finit": [361, 751], "is_first": [362, 752], "is_in": [363, 754], "is_infinit": [364, 755], "is_nan": [365, 756], "is_not": 366, "is_not_nan": [367, 757], "is_not_nul": [368, 758], "is_nul": [369, 759], "keep_nam": 371, "kurtosi": [372, 765], "len": [374, 766], "log": [377, 768], "log10": [378, 769], "lower_bound": 379, "map": [380, 507, 572], "map_alia": 381, "meta": [385, 386, 387, 388, 533], "output_nam": 385, "pop": 386, "root_nam": 387, "undo_alias": 388, "mode": [390, 774], "nan_max": [392, 778], "nan_min": [393, 779], "over": 395, "pct_chang": [396, 782], "pow": 397, "prefix": 398, "rank": [401, 787], "reinterpret": [403, 789], "repeat_bi": 404, "reshap": [405, 791], "rolling_appli": [407, 793], "rolling_max": [408, 794], "rolling_mean": [409, 795], "rolling_median": [410, 796], "rolling_min": [411, 797], "rolling_quantil": [412, 798], "rolling_skew": [413, 799], "rolling_std": [414, 800], "rolling_sum": [415, 801], "rolling_var": [416, 802], "search_sort": [419, 805], "set_sort": [420, 809], "shrink_dtyp": [423, 813], "shuffl": [424, 815], "sign": [425, 816], "sin": [426, 817], "sinh": [427, 818], "skew": [428, 819], "sort_bi": 431, "sqrt": [432, 822], "str": [434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852], "count_match": [436, 827], "extract": [441, 832], "extract_al": [442, 833], "json_path_match": [443, 834], "ljust": [445, 836], "lstrip": [446, 837], "n_char": [447, 838], "replace_al": [449, 840], "rjust": [450, 841], "rstrip": [451, 842], "split": [453, 844], "split_exact": [454, 845], "splitn": [455, 846], "strip": [457, 848], "strptime": [458, 849], "to_lowercas": [459, 850], "to_uppercas": [460, 851], "zfill": [461, 852], "field": [462, 853, 854], "rename_field": [463, 855], "suffix": 464, "tan": [469, 862], "tanh": [470, 863], "to_phys": [471, 871], "top_k": [472, 872], "unique_count": [474, 874], "upper_bound": 475, "value_count": [476, 875], "where": 478, "arang": 482, "argsort_bi": 483, "avg": 484, "coalesc": 485, "col": 486, "concat_list": 487, "concat_str": 488, "cov": 490, "cumfold": 491, "cumreduc": 492, "element": 497, "format": 501, "from_epoch": 502, "group": 503, "lit": 506, "reduc": 515, "repeat": 516, "spearman_rank_corr": 518, "when": 524, "arrai": [525, 879], "categori": [528, 883], "name": [529, 777], "express": 532, "string": [536, 890], "tempor": [538, 892], "window": 539, "convers": 540, "eager": 540, "parallel": 540, "refer": 541, "input": 542, "output": 542, "csv": 542, "feather": 542, "ipc": 542, "parquet": 542, "sql": [542, 893], "json": 542, "avro": 542, "excel": 542, "delta": 542, "lake": 542, "dataset": 542, "lazyfram": [544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 614], "cach": 544, "collect": 547, "describe_optimized_plan": 549, "describe_plan": 550, "fetch": 555, "from_json": 560, "profil": 580, "show_graph": 589, "sink_ipc": 590, "sink_parquet": 591, "with_context": 604, "lazygroupbi": [607, 608, 609, 610], "read": 615, "write": 615, "logic": 615, "plan": 615, "arg_tru": 633, "chunk_length": 671, "flag": 739, "get_chunk": 741, "has_valid": 742, "inner_dtyp": 745, "is_boolean": 747, "is_datelik": 748, "is_float": 753, "is_numer": 760, "is_sort": 761, "is_utf8": 763, "new_from_index": 780, "peak_max": 783, "peak_min": 784, "series_equ": 806, "set": 807, "set_at_idx": 808, "to_fram": [856, 867], "time_unit": 864, "to_list": 868, "view": 877, "zip_with": 878, "method": 893, "assert": 894, "properti": 894, "base": 894, "strategi": 894, "helper": 894, "util": 895}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"Config": [[116, "config"]], "Config options": [[116, "config-options"]], "Config load, save, and current state": [[116, "config-load-save-and-current-state"]], "Use as a context manager": [[116, "use-as-a-context-manager"]], "polars.exceptions.SchemaError": [[75, "polars-exceptions-schemaerror"]], "polars.read_ipc": [[93, "polars-read-ipc"]], "polars.show_versions": [[106, "polars-show-versions"]], "polars.read_parquet": [[97, "polars-read-parquet"]], "polars.read_parquet_schema": [[98, "polars-read-parquet-schema"]], "polars.scan_ndjson": [[104, "polars-scan-ndjson"]], "polars.exceptions.ArrowError": [[66, "polars-exceptions-arrowerror"]], "polars.DataFrame.apply": [[118, "polars-dataframe-apply"]], "polars.read_delta": [[91, "polars-read-delta"]], "polars.read_ipc_schema": [[94, "polars-read-ipc-schema"]], "polars.DataFrame.dtypes": [[126, "polars-dataframe-dtypes"]], "polars.scan_csv": [[100, "polars-scan-csv"]], "polars.DataFrame.drop_in_place": [[124, "polars-dataframe-drop-in-place"]], "polars.get_idx_type": [[85, "polars-get-idx-type"]], "polars.DataFrame.explode": [[128, "polars-dataframe-explode"]], "polars.from_dicts": [[80, "polars-from-dicts"]], "polars.scan_delta": [[101, "polars-scan-delta"]], "polars.testing.assert_series_equal": [[108, "polars-testing-assert-series-equal"]], "polars.DataFrame.describe": [[122, "polars-dataframe-describe"]], "polars.DataFrame.columns": [[121, "polars-dataframe-columns"]], "polars.testing.parametric.columns": [[110, "polars-testing-parametric-columns"]], "polars.DataFrame.extend": [[129, "polars-dataframe-extend"]], "polars.exceptions.PanicException": [[73, "polars-exceptions-panicexception"]], "polars.exceptions.InvalidOperationError": [[69, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.fill_nan": [[130, "polars-dataframe-fill-nan"]], "polars.DataFrame.clone": [[120, "polars-dataframe-clone"]], "polars.testing.assert_frame_equal": [[107, "polars-testing-assert-frame-equal"]], "polars.DataFrame.fill_null": [[131, "polars-dataframe-fill-null"]], "polars.DataFrame.cleared": [[119, "polars-dataframe-cleared"]], "polars.from_arrow": [[78, "polars-from-arrow"]], "Aggregation": [[117, "aggregation"], [617, "aggregation"], [543, "aggregation"], [238, "aggregation"]], "polars.toggle_string_cache": [[114, "polars-toggle-string-cache"]], "polars.from_records": [[83, "polars-from-records"]], "polars.exceptions.NotFoundError": [[72, "polars-exceptions-notfounderror"]], "polars.testing.parametric.series": [[112, "polars-testing-parametric-series"]], "polars.ones": [[87, "polars-ones"]], "polars.testing.parametric.dataframes": [[111, "polars-testing-parametric-dataframes"]], "polars.threadpool_size": [[113, "polars-threadpool-size"]], "polars.read_avro": [[88, "polars-read-avro"]], "polars.testing.parametric.column": [[109, "polars-testing-parametric-column"]], "polars.exceptions.RowsException": [[74, "polars-exceptions-rowsexception"]], "polars.zeros": [[115, "polars-zeros"]], "polars.read_csv": [[89, "polars-read-csv"]], "polars.DataFrame.drop_nulls": [[125, "polars-dataframe-drop-nulls"]], "polars.from_numpy": [[81, "polars-from-numpy"]], "polars.exceptions.DuplicateError": [[68, "polars-exceptions-duplicateerror"]], "polars.from_pandas": [[82, "polars-from-pandas"]], "polars.exceptions.NoRowsReturned": [[71, "polars-exceptions-norowsreturned"]], "polars.exceptions.NoDataError": [[70, "polars-exceptions-nodataerror"]], "polars.scan_ipc": [[103, "polars-scan-ipc"]], "polars.scan_parquet": [[105, "polars-scan-parquet"]], "polars.DataFrame.drop": [[123, "polars-dataframe-drop"]], "polars.scan_ds": [[102, "polars-scan-ds"]], "polars.exceptions.ShapeError": [[76, "polars-exceptions-shapeerror"]], "polars.read_excel": [[92, "polars-read-excel"]], "polars.read_sql": [[99, "polars-read-sql"]], "polars.DataFrame.estimated_size": [[127, "polars-dataframe-estimated-size"]], "polars.from_dict": [[79, "polars-from-dict"]], "polars.get_dummies": [[84, "polars-get-dummies"]], "polars.read_ndjson": [[96, "polars-read-ndjson"]], "polars.read_csv_batched": [[90, "polars-read-csv-batched"]], "polars.exceptions.ComputeError": [[67, "polars-exceptions-computeerror"]], "polars.exceptions.TooManyRowsReturned": [[77, "polars-exceptions-toomanyrowsreturned"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[86, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.read_json": [[95, "polars-read-json"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_ndjson": [[28, "polars-dataframe-write-ndjson"]], "polars.DataType": [[30, "polars-datatype"]], "polars.Struct": [[47, "polars-struct"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.build_info": [[61, "polars-build-info"]], "polars.concat": [[63, "polars-concat"]], "polars.SQLContext.execute": [[43, "polars-sqlcontext-execute"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Int32": [[37, "polars-int32"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.api.register_expr_namespace": [[57, "polars-api-register-expr-namespace"]], "polars.UInt16": [[49, "polars-uint16"]], "polars.api.register_dataframe_namespace": [[56, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.query": [[44, "polars-sqlcontext-query"]], "polars.Float64": [[35, "polars-float64"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.SQLContext.register": [[45, "polars-sqlcontext-register"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_ipc": [[26, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_parquet": [[29, "polars-dataframe-write-parquet"]], "polars.Float32": [[34, "polars-float32"]], "polars.api.register_series_namespace": [[59, "polars-api-register-series-namespace"]], "polars.DataFrame.write_json": [[27, "polars-dataframe-write-json"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.UInt32": [[50, "polars-uint32"]], "polars.cut": [[64, "polars-cut"]], "polars.api.register_lazyframe_namespace": [[58, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.Config.state": [[23, "polars-config-state"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "polars.Int8": [[39, "polars-int8"]], "polars.Int16": [[36, "polars-int16"]], "polars.Int64": [[38, "polars-int64"]], "polars.Date": [[31, "polars-date"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.Categorical": [[4, "polars-categorical"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Object": [[42, "polars-object"]], "polars.align_frames": [[55, "polars-align-frames"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.Unknown": [[53, "polars-unknown"]], "polars.Binary": [[2, "polars-binary"]], "polars.collect_all": [[62, "polars-collect-all"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.Time": [[48, "polars-time"]], "polars.UInt8": [[52, "polars-uint8"]], "polars.arg_where": [[60, "polars-arg-where"]], "polars.List": [[40, "polars-list"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.Utf8": [[54, "polars-utf8"]], "polars.date_range": [[65, "polars-date-range"]], "polars.UInt64": [[51, "polars-uint64"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "polars.Duration": [[33, "polars-duration"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.Datetime": [[32, "polars-datetime"]], "polars.Null": [[41, "polars-null"]], "polars.Series.slice": [[820, "polars-series-slice"]], "polars.Series.str.splitn": [[846, "polars-series-str-splitn"]], "polars.Series.shift_and_fill": [[812, "polars-series-shift-and-fill"]], "polars.Series.skew": [[819, "polars-series-skew"]], "polars.Series.str.rjust": [[841, "polars-series-str-rjust"]], "polars.Series.str.split_exact": [[845, "polars-series-str-split-exact"]], "polars.Series.shape": [[810, "polars-series-shape"]], "polars.Series.rolling_median": [[796, "polars-series-rolling-median"]], "polars.Series.str.strptime": [[849, "polars-series-str-strptime"]], "polars.Series.shrink_dtype": [[813, "polars-series-shrink-dtype"]], "polars.Series.str.n_chars": [[838, "polars-series-str-n-chars"]], "polars.Series.str.to_uppercase": [[851, "polars-series-str-to-uppercase"]], "polars.Series.str": [[824, "polars-series-str"]], "polars.Series.set_at_idx": [[808, "polars-series-set-at-idx"]], "polars.Series.reverse": [[792, "polars-series-reverse"]], "polars.Series.str.starts_with": [[847, "polars-series-str-starts-with"]], "polars.Series.struct.to_frame": [[856, "polars-series-struct-to-frame"]], "polars.Series.rolling_quantile": [[798, "polars-series-rolling-quantile"]], "polars.Series.rolling_apply": [[793, "polars-series-rolling-apply"]], "polars.Series.round": [[803, "polars-series-round"]], "polars.Series.struct.rename_fields": [[855, "polars-series-struct-rename-fields"]], "polars.Series.rolling_mean": [[795, "polars-series-rolling-mean"]], "polars.Series.set": [[807, "polars-series-set"]], "polars.Series.sample": [[804, "polars-series-sample"]], "polars.Series.str.slice": [[843, "polars-series-str-slice"]], "polars.Series.rolling_max": [[794, "polars-series-rolling-max"]], "polars.Series.rolling_min": [[797, "polars-series-rolling-min"]], "polars.Series.shuffle": [[815, "polars-series-shuffle"]], "polars.Series.set_sorted": [[809, "polars-series-set-sorted"]], "polars.Series.str.strip": [[848, "polars-series-str-strip"]], "polars.Series.shift": [[811, "polars-series-shift"]], "polars.Series.str.decode": [[828, "polars-series-str-decode"]], "polars.Series.str.rstrip": [[842, "polars-series-str-rstrip"]], "polars.Series.rolling_var": [[802, "polars-series-rolling-var"]], "polars.Series.str.explode": [[831, "polars-series-str-explode"]], "polars.Series.rolling_skew": [[799, "polars-series-rolling-skew"]], "polars.Series.str.contains": [[826, "polars-series-str-contains"]], "polars.Series.str.encode": [[829, "polars-series-str-encode"]], "polars.Series.str.lstrip": [[837, "polars-series-str-lstrip"]], "polars.Series.sin": [[817, "polars-series-sin"]], "polars.Series.str.ends_with": [[830, "polars-series-str-ends-with"]], "polars.Series.sinh": [[818, "polars-series-sinh"]], "polars.Series.shrink_to_fit": [[814, "polars-series-shrink-to-fit"]], "polars.Series.sign": [[816, "polars-series-sign"]], "polars.Series.str.extract_all": [[833, "polars-series-str-extract-all"]], "polars.Series.str.ljust": [[836, "polars-series-str-ljust"]], "polars.Series.str.replace": [[839, "polars-series-str-replace"]], "polars.Series.str.split": [[844, "polars-series-str-split"]], "polars.Series.rolling_std": [[800, "polars-series-rolling-std"]], "polars.Series.struct.unnest": [[857, "polars-series-struct-unnest"]], "polars.Series.str.extract": [[832, "polars-series-str-extract"]], "polars.Series.sort": [[821, "polars-series-sort"]], "polars.Series.str.count_match": [[827, "polars-series-str-count-match"]], "polars.Series.str.zfill": [[852, "polars-series-str-zfill"]], "polars.Series.str.concat": [[825, "polars-series-str-concat"]], "polars.Series.struct.field": [[853, "polars-series-struct-field"]], "polars.Series.str.lengths": [[835, "polars-series-str-lengths"]], "polars.Series.str.to_lowercase": [[850, "polars-series-str-to-lowercase"]], "polars.Series.sqrt": [[822, "polars-series-sqrt"]], "polars.Series.str.json_path_match": [[834, "polars-series-str-json-path-match"]], "polars.Series.struct.fields": [[854, "polars-series-struct-fields"]], "polars.Series.rolling_sum": [[801, "polars-series-rolling-sum"]], "polars.Series.std": [[823, "polars-series-std"]], "polars.Series.str.replace_all": [[840, "polars-series-str-replace-all"]], "polars.Series.search_sorted": [[805, "polars-series-search-sorted"]], "polars.Series.series_equal": [[806, "polars-series-series-equal"]], "polars.Series.min": [[773, "polars-series-min"]], "polars.Series.entropy": [[728, "polars-series-entropy"]], "polars.Series.null_count": [[781, "polars-series-null-count"]], "polars.Series.is_datelike": [[748, "polars-series-is-datelike"]], "polars.Series.limit": [[767, "polars-series-limit"]], "polars.Series.nan_max": [[778, "polars-series-nan-max"]], "polars.Series.is_float": [[753, "polars-series-is-float"]], "polars.Series.flags": [[739, "polars-series-flags"]], "polars.Series.is_null": [[759, "polars-series-is-null"]], "polars.Series.hash": [[743, "polars-series-hash"]], "polars.Series.is_in": [[754, "polars-series-is-in"]], "polars.Series.reinterpret": [[789, "polars-series-reinterpret"]], "polars.Series.extend_constant": [[735, "polars-series-extend-constant"]], "polars.Series.item": [[764, "polars-series-item"]], "polars.Series.max": [[770, "polars-series-max"]], "polars.Series.is_nan": [[756, "polars-series-is-nan"]], "polars.Series.is_sorted": [[761, "polars-series-is-sorted"]], "polars.Series.product": [[785, "polars-series-product"]], "polars.Series.is_boolean": [[747, "polars-series-is-boolean"]], "polars.Series.reshape": [[791, "polars-series-reshape"]], "polars.Series.fill_null": [[737, "polars-series-fill-null"]], "polars.Series.log10": [[769, "polars-series-log10"]], "polars.Series.is_not_null": [[758, "polars-series-is-not-null"]], "polars.Series.dtype": [[727, "polars-series-dtype"]], "polars.Series.mode": [[774, "polars-series-mode"]], "polars.Series.new_from_index": [[780, "polars-series-new-from-index"]], "polars.Series.is_not_nan": [[757, "polars-series-is-not-nan"]], "polars.Series.is_numeric": [[760, "polars-series-is-numeric"]], "polars.Series.peak_max": [[783, "polars-series-peak-max"]], "polars.Series.dt.year": [[726, "polars-series-dt-year"]], "polars.Series.mean": [[771, "polars-series-mean"]], "polars.Series.head": [[744, "polars-series-head"]], "polars.Series.ewm_mean": [[730, "polars-series-ewm-mean"]], "polars.Series.n_chunks": [[775, "polars-series-n-chunks"]], "polars.Series.ewm_var": [[732, "polars-series-ewm-var"]], "polars.Series.name": [[777, "polars-series-name"]], "polars.Series.is_unique": [[762, "polars-series-is-unique"]], "polars.Series.rename": [[790, "polars-series-rename"]], "polars.Series.has_validity": [[742, "polars-series-has-validity"]], "polars.Series.nan_min": [[779, "polars-series-nan-min"]], "polars.Series.pct_change": [[782, "polars-series-pct-change"]], "polars.Series.floor": [[740, "polars-series-floor"]], "polars.Series.rank": [[787, "polars-series-rank"]], "polars.Series.fill_nan": [[736, "polars-series-fill-nan"]], "polars.Series.is_finite": [[751, "polars-series-is-finite"]], "polars.Series.is_utf8": [[763, "polars-series-is-utf8"]], "polars.Series.is_duplicated": [[749, "polars-series-is-duplicated"]], "polars.Series.n_unique": [[776, "polars-series-n-unique"]], "polars.Series.rechunk": [[788, "polars-series-rechunk"]], "polars.Series.inner_dtype": [[745, "polars-series-inner-dtype"]], "polars.Series.log": [[768, "polars-series-log"]], "polars.Series.exp": [[733, "polars-series-exp"]], "polars.Series.is_empty": [[750, "polars-series-is-empty"]], "polars.Series.quantile": [[786, "polars-series-quantile"]], "polars.Series.explode": [[734, "polars-series-explode"]], "polars.Series.len": [[766, "polars-series-len"]], "polars.Series.peak_min": [[784, "polars-series-peak-min"]], "polars.Series.median": [[772, "polars-series-median"]], "polars.Series.ewm_std": [[731, "polars-series-ewm-std"]], "polars.Series.filter": [[738, "polars-series-filter"]], "polars.Series.get_chunks": [[741, "polars-series-get-chunks"]], "polars.Series.is_first": [[752, "polars-series-is-first"]], "polars.Series.kurtosis": [[765, "polars-series-kurtosis"]], "polars.Series.is_infinite": [[755, "polars-series-is-infinite"]], "polars.Series.estimated_size": [[729, "polars-series-estimated-size"]], "polars.Series.interpolate": [[746, "polars-series-interpolate"]], "polars.Series.bin.contains": [[662, "polars-series-bin-contains"]], "polars.Series.bin.ends_with": [[665, "polars-series-bin-ends-with"]], "polars.Series.dt.nanosecond": [[710, "polars-series-dt-nanosecond"]], "polars.Series.dt.with_time_unit": [[724, "polars-series-dt-with-time-unit"]], "polars.Series.chunk_lengths": [[671, "polars-series-chunk-lengths"]], "polars.Series.dt.combine": [[692, "polars-series-dt-combine"]], "polars.Series.dt.max": [[699, "polars-series-dt-max"]], "polars.Series.dt.microsecond": [[702, "polars-series-dt-microsecond"]], "polars.Series.clip": [[673, "polars-series-clip"]], "polars.Series.dot": [[686, "polars-series-dot"]], "polars.Series.arr.unique": [[661, "polars-series-arr-unique"]], "polars.Series.clone": [[676, "polars-series-clone"]], "polars.Series.dt.cast_time_unit": [[690, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.with_time_zone": [[725, "polars-series-dt-with-time-zone"]], "polars.Series.cummax": [[679, "polars-series-cummax"]], "polars.Series.drop_nans": [[687, "polars-series-drop-nans"]], "polars.Series.clip_min": [[675, "polars-series-clip-min"]], "polars.Series.dt.truncate": [[720, "polars-series-dt-truncate"]], "polars.Series.cummin": [[680, "polars-series-cummin"]], "polars.Series.dt.cast_time_zone": [[691, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.weekday": [[723, "polars-series-dt-weekday"]], "polars.Series.cleared": [[672, "polars-series-cleared"]], "polars.Series.dt.ordinal_day": [[713, "polars-series-dt-ordinal-day"]], "polars.Series.cast": [[667, "polars-series-cast"]], "polars.Series.dt.mean": [[700, "polars-series-dt-mean"]], "polars.Series.cat.set_ordering": [[669, "polars-series-cat-set-ordering"]], "polars.Series.cosh": [[678, "polars-series-cosh"]], "polars.Series.cumsum": [[682, "polars-series-cumsum"]], "polars.Series.dt.min": [[706, "polars-series-dt-min"]], "polars.Series.dt.quarter": [[714, "polars-series-dt-quarter"]], "polars.Series.dt.round": [[715, "polars-series-dt-round"]], "polars.Series.dt.minute": [[707, "polars-series-dt-minute"]], "polars.Series.dt.millisecond": [[704, "polars-series-dt-millisecond"]], "polars.Series.cat": [[668, "polars-series-cat"]], "polars.Series.clip_max": [[674, "polars-series-clip-max"]], "polars.Series.bin.decode": [[663, "polars-series-bin-decode"]], "polars.Series.cos": [[677, "polars-series-cos"]], "polars.Series.dt.nanoseconds": [[711, "polars-series-dt-nanoseconds"]], "polars.Series.dt.day": [[693, "polars-series-dt-day"]], "polars.Series.dt.epoch": [[695, "polars-series-dt-epoch"]], "polars.Series.cumprod": [[681, "polars-series-cumprod"]], "polars.Series.dt.hour": [[696, "polars-series-dt-hour"]], "polars.Series.dt": [[689, "polars-series-dt"]], "polars.Series.dt.median": [[701, "polars-series-dt-median"]], "polars.Series.cumulative_eval": [[683, "polars-series-cumulative-eval"]], "polars.Series.dt.days": [[694, "polars-series-dt-days"]], "polars.Series.dt.offset_by": [[712, "polars-series-dt-offset-by"]], "polars.Series.dt.timestamp": [[719, "polars-series-dt-timestamp"]], "polars.Series.dt.strftime": [[718, "polars-series-dt-strftime"]], "polars.Series.ceil": [[670, "polars-series-ceil"]], "polars.Series.diff": [[685, "polars-series-diff"]], "polars.Series.drop_nulls": [[688, "polars-series-drop-nulls"]], "polars.Series.dt.iso_year": [[698, "polars-series-dt-iso-year"]], "polars.Series.dt.second": [[716, "polars-series-dt-second"]], "polars.Series.dt.hours": [[697, "polars-series-dt-hours"]], "polars.Series.dt.milliseconds": [[705, "polars-series-dt-milliseconds"]], "polars.Series.dt.seconds": [[717, "polars-series-dt-seconds"]], "polars.Series.bin.encode": [[664, "polars-series-bin-encode"]], "polars.Series.arr.to_struct": [[660, "polars-series-arr-to-struct"]], "polars.Series.dt.week": [[722, "polars-series-dt-week"]], "polars.Series.describe": [[684, "polars-series-describe"]], "polars.Series.dt.minutes": [[708, "polars-series-dt-minutes"]], "polars.Series.bin.starts_with": [[666, "polars-series-bin-starts-with"]], "polars.Series.dt.microseconds": [[703, "polars-series-dt-microseconds"]], "polars.Series.dt.tz_localize": [[721, "polars-series-dt-tz-localize"]], "polars.Series.dt.month": [[709, "polars-series-dt-month"]], "Series": [[887, "series"]], "SQL": [[893, "sql"], [542, "sql"]], "Methods": [[893, "methods"]], "polars.Series.to_physical": [[871, "polars-series-to-physical"]], "polars.Series.to_pandas": [[870, "polars-series-to-pandas"]], "polars.Series.value_counts": [[875, "polars-series-value-counts"]], "polars.Series.to_list": [[868, "polars-series-to-list"]], "polars.Series.to_frame": [[867, "polars-series-to-frame"]], "polars.Series.take_every": [[861, "polars-series-take-every"]], "polars.Series.to_arrow": [[865, "polars-series-to-arrow"]], "polars.Series.unique_counts": [[874, "polars-series-unique-counts"]], "Miscellaneous": [[888, "miscellaneous"], [615, "miscellaneous"], [540, "miscellaneous"], [534, "miscellaneous"], [234, "miscellaneous"]], "Boolean": [[882, "boolean"], [527, "boolean"]], "polars.Series.to_numpy": [[869, "polars-series-to-numpy"]], "Array": [[879, "array"], [525, "array"]], "Testing": [[894, "testing"]], "Asserts": [[894, "asserts"]], "Property-based testing": [[894, "property-based-testing"]], "Strategies": [[894, "strategies"]], "Strategy helpers": [[894, "strategy-helpers"]], "Strings": [[890, "strings"], [536, "strings"]], "Binary": [[881, "binary"], [526, "binary"]], "polars.Series.tail": [[859, "polars-series-tail"]], "polars.Series.top_k": [[872, "polars-series-top-k"]], "polars.Series.take": [[860, "polars-series-take"]], "polars.Series.time_unit": [[864, "polars-series-time-unit"]], "Categories": [[883, "categories"], [528, "categories"]], "Attributes": [[880, "attributes"], [611, "attributes"], [228, "attributes"]], "Computation": [[884, "computation"], [530, "computation"], [229, "computation"]], "polars.Series.unique": [[873, "polars-series-unique"]], "polars.Series.var": [[876, "polars-series-var"]], "Struct": [[891, "struct"], [537, "struct"]], "polars.Series.sum": [[858, "polars-series-sum"]], "polars.Series.view": [[877, "polars-series-view"]], "Temporal": [[892, "temporal"], [538, "temporal"]], "Manipulation/selection": [[889, "manipulation-selection"], [616, "manipulation-selection"], [535, "manipulation-selection"], [235, "manipulation-selection"]], "Utils": [[895, "utils"]], "Export": [[886, "export"], [231, "export"]], "polars.Series.to_dummies": [[866, "polars-series-to-dummies"]], "Descriptive": [[885, "descriptive"], [612, "descriptive"], [230, "descriptive"]], "polars.Series.tanh": [[863, "polars-series-tanh"]], "polars.Series.zip_with": [[878, "polars-series-zip-with"]], "polars.Series.tan": [[862, "polars-series-tan"]], "polars.LazyFrame.sum": [[595, "polars-lazyframe-sum"]], "polars.LazyFrame.var": [[600, "polars-lazyframe-var"]], "polars.LazyFrame.tail": [[596, "polars-lazyframe-tail"]], "GroupBy": [[613, "groupby"], [232, "groupby"]], "polars.LazyFrame.std": [[594, "polars-lazyframe-std"]], "polars.Series.apply": [[623, "polars-series-apply"]], "polars.Series.arr.slice": [[655, "polars-series-arr-slice"]], "polars.Series.arr.sum": [[657, "polars-series-arr-sum"]], "polars.Series.arccosh": [[625, "polars-series-arccosh"]], "polars.LazyFrame.write_json": [[606, "polars-lazyframe-write-json"]], "polars.LazyFrame.unique": [[598, "polars-lazyframe-unique"]], "polars.Series.append": [[622, "polars-series-append"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[609, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "Read/write logical plan": [[615, "read-write-logical-plan"]], "polars.LazyFrame.width": [[601, "polars-lazyframe-width"]], "polars.Series.any": [[621, "polars-series-any"]], "polars.Series.arg_max": [[630, "polars-series-arg-max"]], "polars.LazyFrame.with_context": [[604, "polars-lazyframe-with-context"]], "polars.Series.arg_min": [[631, "polars-series-arg-min"]], "polars.Series.arr.diff": [[641, "polars-series-arr-diff"]], "polars.Series.arr.shift": [[654, "polars-series-arr-shift"]], "polars.Series.arr": [[636, "polars-series-arr"]], "polars.Series.arr.reverse": [[653, "polars-series-arr-reverse"]], "polars.Series.arctan": [[628, "polars-series-arctan"]], "polars.Series.arg_true": [[633, "polars-series-arg-true"]], "polars.Series.arr.min": [[652, "polars-series-arr-min"]], "polars.Series.arr.tail": [[658, "polars-series-arr-tail"]], "polars.Series.arr.first": [[644, "polars-series-arr-first"]], "polars.LazyFrame.take_every": [[597, "polars-lazyframe-take-every"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[608, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.with_column": [[602, "polars-lazyframe-with-column"]], "polars.Series.arg_unique": [[634, "polars-series-arg-unique"]], "polars.Series.arr.contains": [[640, "polars-series-arr-contains"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[607, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.all": [[620, "polars-series-all"]], "polars.Series.arr.eval": [[642, "polars-series-arr-eval"]], "polars.Series.arr.lengths": [[649, "polars-series-arr-lengths"]], "polars.Series.arr.concat": [[639, "polars-series-arr-concat"]], "polars.Series.arctanh": [[629, "polars-series-arctanh"]], "polars.Series.arr.mean": [[651, "polars-series-arr-mean"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[610, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.with_columns": [[603, "polars-lazyframe-with-columns"]], "polars.Series.arccos": [[624, "polars-series-arccos"]], "polars.Series.arr.head": [[646, "polars-series-arr-head"]], "polars.Series.arcsinh": [[627, "polars-series-arcsinh"]], "polars.Series.abs": [[618, "polars-series-abs"]], "polars.Series.argsort": [[635, "polars-series-argsort"]], "polars.Series.arr.last": [[648, "polars-series-arr-last"]], "polars.LazyFrame.unnest": [[599, "polars-lazyframe-unnest"]], "polars.Series.arr.take": [[659, "polars-series-arr-take"]], "polars.LazyFrame.with_row_count": [[605, "polars-lazyframe-with-row-count"]], "LazyFrame": [[614, "lazyframe"]], "polars.Series.arcsin": [[626, "polars-series-arcsin"]], "polars.Series.arr.explode": [[643, "polars-series-arr-explode"]], "polars.Series.arr.arg_max": [[637, "polars-series-arr-arg-max"]], "polars.Series.arr.get": [[645, "polars-series-arr-get"]], "polars.Series.arr.sort": [[656, "polars-series-arr-sort"]], "polars.Series.arr.max": [[650, "polars-series-arr-max"]], "polars.Series.arg_sort": [[632, "polars-series-arg-sort"]], "polars.Series.arr.join": [[647, "polars-series-arr-join"]], "polars.Series.alias": [[619, "polars-series-alias"]], "polars.Series.arr.arg_min": [[638, "polars-series-arr-arg-min"]], "polars.format": [[501, "polars-format"]], "polars.duration": [[496, "polars-duration"]], "polars.element": [[497, "polars-element"]], "polars.var": [[523, "polars-var"]], "polars.Expr.tail": [[466, "polars-expr-tail"]], "polars.avg": [[484, "polars-avg"]], "polars.cov": [[490, "polars-cov"]], "polars.coalesce": [[485, "polars-coalesce"]], "polars.spearman_rank_corr": [[518, "polars-spearman-rank-corr"]], "polars.std": [[519, "polars-std"]], "polars.exclude": [[498, "polars-exclude"]], "polars.cumfold": [[491, "polars-cumfold"]], "polars.cumsum": [[493, "polars-cumsum"]], "polars.lit": [[506, "polars-lit"]], "polars.sum": [[521, "polars-sum"]], "polars.struct": [[520, "polars-struct"]], "polars.Expr.tanh": [[470, "polars-expr-tanh"]], "polars.Expr.where": [[478, "polars-expr-where"]], "polars.Expr.unique_counts": [[474, "polars-expr-unique-counts"]], "polars.argsort_by": [[483, "polars-argsort-by"]], "polars.concat_str": [[488, "polars-concat-str"]], "polars.max": [[508, "polars-max"]], "polars.Expr.top_k": [[472, "polars-expr-top-k"]], "polars.Expr.struct.rename_fields": [[463, "polars-expr-struct-rename-fields"]], "polars.any": [[480, "polars-any"]], "polars.median": [[510, "polars-median"]], "polars.Expr.unique": [[473, "polars-expr-unique"]], "polars.apply": [[481, "polars-apply"]], "polars.Expr.sum": [[465, "polars-expr-sum"]], "polars.Expr.take": [[467, "polars-expr-take"]], "polars.first": [[499, "polars-first"]], "polars.tail": [[522, "polars-tail"]], "polars.from_epoch": [[502, "polars-from-epoch"]], "polars.map": [[507, "polars-map"]], "polars.mean": [[509, "polars-mean"]], "polars.min": [[511, "polars-min"]], "polars.when": [[524, "polars-when"]], "polars.concat_list": [[487, "polars-concat-list"]], "polars.cumreduce": [[492, "polars-cumreduce"]], "polars.datetime": [[495, "polars-datetime"]], "polars.Expr.to_physical": [[471, "polars-expr-to-physical"]], "polars.Expr.struct.field": [[462, "polars-expr-struct-field"]], "polars.col": [[486, "polars-col"]], "polars.head": [[504, "polars-head"]], "polars.arange": [[482, "polars-arange"]], "polars.Expr.var": [[477, "polars-expr-var"]], "polars.Expr.tan": [[469, "polars-expr-tan"]], "polars.count": [[489, "polars-count"]], "polars.date": [[494, "polars-date"]], "polars.Expr.take_every": [[468, "polars-expr-take-every"]], "polars.list": [[505, "polars-list"]], "polars.quantile": [[514, "polars-quantile"]], "polars.select": [[517, "polars-select"]], "polars.pearson_corr": [[513, "polars-pearson-corr"]], "polars.Expr.value_counts": [[476, "polars-expr-value-counts"]], "polars.Expr.upper_bound": [[475, "polars-expr-upper-bound"]], "polars.all": [[479, "polars-all"]], "polars.repeat": [[516, "polars-repeat"]], "polars.n_unique": [[512, "polars-n-unique"]], "polars.groups": [[503, "polars-groups"]], "polars.Expr.suffix": [[464, "polars-expr-suffix"]], "polars.reduce": [[515, "polars-reduce"]], "polars.fold": [[500, "polars-fold"]], "polars.Expr.rolling_median": [[410, "polars-expr-rolling-median"]], "polars.Expr.str.lengths": [[444, "polars-expr-str-lengths"]], "polars.Expr.str.splitn": [[455, "polars-expr-str-splitn"]], "polars.Expr.skew": [[428, "polars-expr-skew"]], "polars.Expr.str.ends_with": [[439, "polars-expr-str-ends-with"]], "polars.Expr.repeat_by": [[404, "polars-expr-repeat-by"]], "polars.Expr.str.decode": [[437, "polars-expr-str-decode"]], "polars.Expr.str.lstrip": [[446, "polars-expr-str-lstrip"]], "polars.Expr.str.zfill": [[461, "polars-expr-str-zfill"]], "polars.Expr.search_sorted": [[419, "polars-expr-search-sorted"]], "polars.Expr.str.concat": [[434, "polars-expr-str-concat"]], "polars.Expr.quantile": [[400, "polars-expr-quantile"]], "polars.Expr.std": [[433, "polars-expr-std"]], "polars.Expr.str.ljust": [[445, "polars-expr-str-ljust"]], "polars.Expr.slice": [[429, "polars-expr-slice"]], "polars.Expr.rolling_var": [[416, "polars-expr-rolling-var"]], "polars.Expr.round": [[417, "polars-expr-round"]], "polars.Expr.sample": [[418, "polars-expr-sample"]], "polars.Expr.rank": [[401, "polars-expr-rank"]], "polars.Expr.rolling_std": [[414, "polars-expr-rolling-std"]], "polars.Expr.shuffle": [[424, "polars-expr-shuffle"]], "polars.Expr.str.json_path_match": [[443, "polars-expr-str-json-path-match"]], "polars.Expr.rolling_apply": [[407, "polars-expr-rolling-apply"]], "polars.Expr.str.strptime": [[458, "polars-expr-str-strptime"]], "polars.Expr.str.to_lowercase": [[459, "polars-expr-str-to-lowercase"]], "polars.Expr.shift_and_fill": [[422, "polars-expr-shift-and-fill"]], "polars.Expr.sort_by": [[431, "polars-expr-sort-by"]], "polars.Expr.sinh": [[427, "polars-expr-sinh"]], "polars.Expr.str.count_match": [[436, "polars-expr-str-count-match"]], "polars.Expr.str.split": [[453, "polars-expr-str-split"]], "polars.Expr.rolling_mean": [[409, "polars-expr-rolling-mean"]], "polars.Expr.str.rjust": [[450, "polars-expr-str-rjust"]], "polars.Expr.str.strip": [[457, "polars-expr-str-strip"]], "polars.Expr.sin": [[426, "polars-expr-sin"]], "polars.Expr.rolling_quantile": [[412, "polars-expr-rolling-quantile"]], "polars.Expr.str.n_chars": [[447, "polars-expr-str-n-chars"]], "polars.Expr.str.extract_all": [[442, "polars-expr-str-extract-all"]], "polars.Expr.shift": [[421, "polars-expr-shift"]], "polars.Expr.str.replace_all": [[449, "polars-expr-str-replace-all"]], "polars.Expr.str.contains": [[435, "polars-expr-str-contains"]], "polars.Expr.prefix": [[398, "polars-expr-prefix"]], "polars.Expr.rechunk": [[402, "polars-expr-rechunk"]], "polars.Expr.str.slice": [[452, "polars-expr-str-slice"]], "polars.Expr.product": [[399, "polars-expr-product"]], "polars.Expr.str.split_exact": [[454, "polars-expr-str-split-exact"]], "polars.Expr.str.to_uppercase": [[460, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_sum": [[415, "polars-expr-rolling-sum"]], "polars.Expr.str.replace": [[448, "polars-expr-str-replace"]], "polars.Expr.str.extract": [[441, "polars-expr-str-extract"]], "polars.Expr.reshape": [[405, "polars-expr-reshape"]], "polars.Expr.sign": [[425, "polars-expr-sign"]], "polars.Expr.shrink_dtype": [[423, "polars-expr-shrink-dtype"]], "polars.Expr.str.rstrip": [[451, "polars-expr-str-rstrip"]], "polars.Expr.reverse": [[406, "polars-expr-reverse"]], "polars.Expr.rolling_max": [[408, "polars-expr-rolling-max"]], "polars.Expr.str.encode": [[438, "polars-expr-str-encode"]], "polars.Expr.set_sorted": [[420, "polars-expr-set-sorted"]], "polars.Expr.sort": [[430, "polars-expr-sort"]], "polars.Expr.reinterpret": [[403, "polars-expr-reinterpret"]], "polars.Expr.str.starts_with": [[456, "polars-expr-str-starts-with"]], "polars.Expr.sqrt": [[432, "polars-expr-sqrt"]], "polars.Expr.rolling_min": [[411, "polars-expr-rolling-min"]], "polars.Expr.rolling_skew": [[413, "polars-expr-rolling-skew"]], "polars.Expr.pct_change": [[396, "polars-expr-pct-change"]], "polars.Expr.pow": [[397, "polars-expr-pow"]], "polars.Expr.str.explode": [[440, "polars-expr-str-explode"]], "polars.Expr.ewm_mean": [[341, "polars-expr-ewm-mean"]], "polars.Expr.is_between": [[359, "polars-expr-is-between"]], "polars.Expr.is_first": [[362, "polars-expr-is-first"]], "polars.Expr.median": [[384, "polars-expr-median"]], "polars.Expr.entropy": [[340, "polars-expr-entropy"]], "polars.Expr.explode": [[346, "polars-expr-explode"]], "polars.Expr.is_infinite": [[364, "polars-expr-is-infinite"]], "polars.Expr.limit": [[375, "polars-expr-limit"]], "polars.Expr.is_nan": [[365, "polars-expr-is-nan"]], "polars.Expr.min": [[389, "polars-expr-min"]], "polars.Expr.max": [[382, "polars-expr-max"]], "polars.Expr.exclude": [[344, "polars-expr-exclude"]], "polars.Expr.mean": [[383, "polars-expr-mean"]], "polars.Expr.n_unique": [[391, "polars-expr-n-unique"]], "polars.Expr.flatten": [[352, "polars-expr-flatten"]], "polars.Expr.map": [[380, "polars-expr-map"]], "polars.Expr.dt.year": [[339, "polars-expr-dt-year"]], "polars.Expr.keep_name": [[371, "polars-expr-keep-name"]], "polars.Expr.last": [[373, "polars-expr-last"]], "polars.Expr.ewm_std": [[342, "polars-expr-ewm-std"]], "polars.Expr.list": [[376, "polars-expr-list"]], "polars.Expr.is_finite": [[361, "polars-expr-is-finite"]], "polars.Expr.first": [[351, "polars-expr-first"]], "polars.Expr.filter": [[350, "polars-expr-filter"]], "polars.Expr.dt.strftime": [[331, "polars-expr-dt-strftime"]], "polars.Expr.fill_null": [[349, "polars-expr-fill-null"]], "polars.Expr.log10": [[378, "polars-expr-log10"]], "polars.Expr.dt.seconds": [[330, "polars-expr-dt-seconds"]], "polars.Expr.interpolate": [[358, "polars-expr-interpolate"]], "polars.Expr.dt.truncate": [[333, "polars-expr-dt-truncate"]], "polars.Expr.meta.output_name": [[385, "polars-expr-meta-output-name"]], "polars.Expr.forward_fill": [[354, "polars-expr-forward-fill"]], "polars.Expr.is_duplicated": [[360, "polars-expr-is-duplicated"]], "polars.Expr.meta.root_names": [[387, "polars-expr-meta-root-names"]], "polars.Expr.is_not_nan": [[367, "polars-expr-is-not-nan"]], "polars.Expr.map_alias": [[381, "polars-expr-map-alias"]], "polars.Expr.extend_constant": [[347, "polars-expr-extend-constant"]], "polars.Expr.floor": [[353, "polars-expr-floor"]], "polars.Expr.is_unique": [[370, "polars-expr-is-unique"]], "polars.Expr.dt.with_time_zone": [[338, "polars-expr-dt-with-time-zone"]], "polars.Expr.over": [[395, "polars-expr-over"]], "polars.Expr.nan_min": [[393, "polars-expr-nan-min"]], "polars.Expr.is_null": [[369, "polars-expr-is-null"]], "polars.Expr.dt.timestamp": [[332, "polars-expr-dt-timestamp"]], "polars.Expr.mode": [[390, "polars-expr-mode"]], "polars.Expr.null_count": [[394, "polars-expr-null-count"]], "polars.Expr.hash": [[355, "polars-expr-hash"]], "polars.Expr.dt.week": [[335, "polars-expr-dt-week"]], "polars.Expr.kurtosis": [[372, "polars-expr-kurtosis"]], "polars.Expr.is_not_null": [[368, "polars-expr-is-not-null"]], "polars.Expr.meta.pop": [[386, "polars-expr-meta-pop"]], "polars.Expr.meta.undo_aliases": [[388, "polars-expr-meta-undo-aliases"]], "polars.Expr.dt.tz_localize": [[334, "polars-expr-dt-tz-localize"]], "polars.Expr.dt.weekday": [[336, "polars-expr-dt-weekday"]], "polars.Expr.nan_max": [[392, "polars-expr-nan-max"]], "polars.Expr.dt.with_time_unit": [[337, "polars-expr-dt-with-time-unit"]], "polars.Expr.exp": [[345, "polars-expr-exp"]], "polars.Expr.fill_nan": [[348, "polars-expr-fill-nan"]], "polars.Expr.head": [[356, "polars-expr-head"]], "polars.Expr.is_not": [[366, "polars-expr-is-not"]], "polars.Expr.inspect": [[357, "polars-expr-inspect"]], "polars.Expr.is_in": [[363, "polars-expr-is-in"]], "polars.Expr.len": [[374, "polars-expr-len"]], "polars.Expr.log": [[377, "polars-expr-log"]], "polars.Expr.lower_bound": [[379, "polars-expr-lower-bound"]], "polars.Expr.ewm_var": [[343, "polars-expr-ewm-var"]], "polars.LazyFrame.reverse": [[584, "polars-lazyframe-reverse"]], "polars.LazyFrame.schema": [[585, "polars-lazyframe-schema"]], "polars.LazyFrame.shift_and_fill": [[588, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.first": [[559, "polars-lazyframe-first"]], "polars.LazyFrame.interpolate": [[566, "polars-lazyframe-interpolate"]], "polars.LazyFrame.last": [[569, "polars-lazyframe-last"]], "polars.LazyFrame.sort": [[593, "polars-lazyframe-sort"]], "polars.LazyFrame.cleared": [[545, "polars-lazyframe-cleared"]], "polars.LazyFrame.dtypes": [[553, "polars-lazyframe-dtypes"]], "polars.LazyFrame.melt": [[576, "polars-lazyframe-melt"]], "Expressions": [[532, "expressions"]], "polars.LazyFrame.min": [[578, "polars-lazyframe-min"]], "polars.LazyFrame.filter": [[558, "polars-lazyframe-filter"]], "polars.LazyFrame.groupby": [[561, "polars-lazyframe-groupby"]], "Meta": [[533, "meta"]], "polars.LazyFrame.from_json": [[560, "polars-lazyframe-from-json"]], "API reference": [[541, "api-reference"]], "polars.LazyFrame.merge_sorted": [[577, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.pipe": [[579, "polars-lazyframe-pipe"]], "polars.LazyFrame.groupby_dynamic": [[562, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.mean": [[574, "polars-lazyframe-mean"]], "polars.LazyFrame.inspect": [[565, "polars-lazyframe-inspect"]], "polars.LazyFrame.fill_null": [[557, "polars-lazyframe-fill-null"]], "Columns / names": [[529, "columns-names"]], "Functions": [[540, "functions"], [531, "functions"], [236, "functions"]], "Conversion": [[540, "conversion"]], "Eager/Lazy functions": [[540, "eager-lazy-functions"]], "Parallelization": [[540, "parallelization"]], "StringCache": [[540, "stringcache"]], "polars.LazyFrame.explode": [[554, "polars-lazyframe-explode"]], "polars.LazyFrame.groupby_rolling": [[563, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.select": [[586, "polars-lazyframe-select"]], "polars.LazyFrame.columns": [[548, "polars-lazyframe-columns"]], "Input/output": [[542, "input-output"]], "CSV": [[542, "csv"]], "Feather/ IPC": [[542, "feather-ipc"]], "Parquet": [[542, "parquet"]], "JSON": [[542, "json"]], "AVRO": [[542, "avro"]], "Excel": [[542, "excel"]], "Delta Lake": [[542, "delta-lake"]], "Datasets": [[542, "datasets"]], "BatchedCsvReader": [[542, "batchedcsvreader"]], "polars.LazyFrame.rename": [[583, "polars-lazyframe-rename"]], "polars.LazyFrame.lazy": [[570, "polars-lazyframe-lazy"]], "polars.LazyFrame.join_asof": [[568, "polars-lazyframe-join-asof"]], "polars.LazyFrame.clone": [[546, "polars-lazyframe-clone"]], "polars.LazyFrame.head": [[564, "polars-lazyframe-head"]], "polars.LazyFrame.drop": [[551, "polars-lazyframe-drop"]], "polars.LazyFrame.limit": [[571, "polars-lazyframe-limit"]], "polars.LazyFrame.sink_parquet": [[591, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.describe_optimized_plan": [[549, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.profile": [[580, "polars-lazyframe-profile"]], "polars.LazyFrame.fetch": [[555, "polars-lazyframe-fetch"]], "polars.LazyFrame.map": [[572, "polars-lazyframe-map"]], "polars.LazyFrame.drop_nulls": [[552, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.read_json": [[582, "polars-lazyframe-read-json"]], "polars.LazyFrame.fill_nan": [[556, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.join": [[567, "polars-lazyframe-join"]], "polars.LazyFrame.collect": [[547, "polars-lazyframe-collect"]], "polars.LazyFrame.shift": [[587, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[589, "polars-lazyframe-show-graph"]], "polars.LazyFrame.max": [[573, "polars-lazyframe-max"]], "polars.LazyFrame.sink_ipc": [[590, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.cache": [[544, "polars-lazyframe-cache"]], "polars.LazyFrame.median": [[575, "polars-lazyframe-median"]], "polars.LazyFrame.slice": [[592, "polars-lazyframe-slice"]], "polars.LazyFrame.describe_plan": [[550, "polars-lazyframe-describe-plan"]], "Window": [[539, "window"]], "polars.LazyFrame.quantile": [[581, "polars-lazyframe-quantile"]], "polars.Expr.dt.days": [[311, "polars-expr-dt-days"]], "polars.Expr.arr.sort": [[276, "polars-expr-arr-sort"]], "polars.Expr.cumsum": [[301, "polars-expr-cumsum"]], "polars.Expr.arr.take": [[279, "polars-expr-arr-take"]], "polars.Expr.arr.tail": [[278, "polars-expr-arr-tail"]], "polars.Expr.backward_fill": [[282, "polars-expr-backward-fill"]], "polars.Expr.arr.lengths": [[269, "polars-expr-arr-lengths"]], "polars.Expr.drop_nans": [[305, "polars-expr-drop-nans"]], "polars.Expr.dt.quarter": [[327, "polars-expr-dt-quarter"]], "polars.Expr.cummin": [[299, "polars-expr-cummin"]], "polars.Expr.dt.month": [[322, "polars-expr-dt-month"]], "polars.Expr.drop_nulls": [[306, "polars-expr-drop-nulls"]], "polars.Expr.arr.reverse": [[273, "polars-expr-arr-reverse"]], "polars.Expr.arr.head": [[266, "polars-expr-arr-head"]], "polars.Expr.arr.sum": [[277, "polars-expr-arr-sum"]], "polars.Expr.arr.join": [[267, "polars-expr-arr-join"]], "polars.Expr.ceil": [[290, "polars-expr-ceil"]], "polars.Expr.bin.starts_with": [[287, "polars-expr-bin-starts-with"]], "polars.Expr.cos": [[294, "polars-expr-cos"]], "polars.Expr.dt.minute": [[320, "polars-expr-dt-minute"]], "polars.Expr.dt.nanoseconds": [[324, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.hours": [[314, "polars-expr-dt-hours"]], "polars.Expr.cast": [[288, "polars-expr-cast"]], "polars.Expr.cummax": [[298, "polars-expr-cummax"]], "polars.Expr.dt.microsecond": [[316, "polars-expr-dt-microsecond"]], "polars.Expr.arr.mean": [[271, "polars-expr-arr-mean"]], "polars.Expr.dt.cast_time_unit": [[307, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cat.set_ordering": [[289, "polars-expr-cat-set-ordering"]], "polars.Expr.clip_max": [[292, "polars-expr-clip-max"]], "polars.Expr.bin.ends_with": [[286, "polars-expr-bin-ends-with"]], "polars.Expr.arr.first": [[264, "polars-expr-arr-first"]], "polars.Expr.arr.last": [[268, "polars-expr-arr-last"]], "polars.Expr.bin.decode": [[284, "polars-expr-bin-decode"]], "polars.Expr.dt.round": [[328, "polars-expr-dt-round"]], "polars.Expr.dt.hour": [[313, "polars-expr-dt-hour"]], "polars.Expr.arr.min": [[272, "polars-expr-arr-min"]], "polars.Expr.diff": [[303, "polars-expr-diff"]], "polars.Expr.dt.nanosecond": [[323, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.shift": [[274, "polars-expr-arr-shift"]], "polars.Expr.cumulative_eval": [[302, "polars-expr-cumulative-eval"]], "polars.Expr.arr.to_struct": [[280, "polars-expr-arr-to-struct"]], "polars.Expr.arr.slice": [[275, "polars-expr-arr-slice"]], "polars.Expr.cumprod": [[300, "polars-expr-cumprod"]], "polars.Expr.dt.minutes": [[321, "polars-expr-dt-minutes"]], "polars.Expr.dt.milliseconds": [[319, "polars-expr-dt-milliseconds"]], "polars.Expr.clip": [[291, "polars-expr-clip"]], "polars.Expr.dt.offset_by": [[325, "polars-expr-dt-offset-by"]], "polars.Expr.dot": [[304, "polars-expr-dot"]], "polars.Expr.dt.epoch": [[312, "polars-expr-dt-epoch"]], "polars.Expr.count": [[296, "polars-expr-count"]], "polars.Expr.dt.day": [[310, "polars-expr-dt-day"]], "polars.Expr.dt.ordinal_day": [[326, "polars-expr-dt-ordinal-day"]], "polars.Expr.clip_min": [[293, "polars-expr-clip-min"]], "polars.Expr.cosh": [[295, "polars-expr-cosh"]], "polars.Expr.dt.second": [[329, "polars-expr-dt-second"]], "polars.Expr.arr.max": [[270, "polars-expr-arr-max"]], "polars.Expr.arr.unique": [[281, "polars-expr-arr-unique"]], "polars.Expr.dt.combine": [[309, "polars-expr-dt-combine"]], "polars.Expr.dt.iso_year": [[315, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microseconds": [[317, "polars-expr-dt-microseconds"]], "polars.Expr.bin.contains": [[283, "polars-expr-bin-contains"]], "polars.Expr.cumcount": [[297, "polars-expr-cumcount"]], "polars.Expr.arr.get": [[265, "polars-expr-arr-get"]], "polars.Expr.dt.millisecond": [[318, "polars-expr-dt-millisecond"]], "polars.Expr.dt.cast_time_zone": [[308, "polars-expr-dt-cast-time-zone"]], "polars.Expr.bin.encode": [[285, "polars-expr-bin-encode"]], "polars.DataFrame.is_unique": [[150, "polars-dataframe-is-unique"]], "polars.DataFrame.to_arrow": [[193, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dummies": [[196, "polars-dataframe-to-dummies"]], "polars.DataFrame.sample": [[180, "polars-dataframe-sample"]], "polars.DataFrame.n_chunks": [[164, "polars-dataframe-n-chunks"]], "polars.DataFrame.partition_by": [[167, "polars-dataframe-partition-by"]], "polars.DataFrame.n_unique": [[165, "polars-dataframe-n-unique"]], "polars.DataFrame.schema": [[181, "polars-dataframe-schema"]], "polars.DataFrame.shape": [[183, "polars-dataframe-shape"]], "polars.DataFrame.quantile": [[172, "polars-dataframe-quantile"]], "polars.DataFrame.join": [[154, "polars-dataframe-join"]], "polars.DataFrame.rechunk": [[173, "polars-dataframe-rechunk"]], "polars.DataFrame.to_dicts": [[195, "polars-dataframe-to-dicts"]], "polars.DataFrame.pipe": [[169, "polars-dataframe-pipe"]], "polars.DataFrame.interpolate": [[147, "polars-dataframe-interpolate"]], "polars.DataFrame.item": [[151, "polars-dataframe-item"]], "polars.DataFrame.height": [[144, "polars-dataframe-height"]], "polars.DataFrame.select": [[182, "polars-dataframe-select"]], "polars.DataFrame.replace_at_idx": [[176, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows": [[179, "polars-dataframe-rows"]], "polars.DataFrame.get_column": [[136, "polars-dataframe-get-column"]], "polars.DataFrame.groupby": [[139, "polars-dataframe-groupby"]], "polars.DataFrame.min": [[163, "polars-dataframe-min"]], "polars.DataFrame.reverse": [[177, "polars-dataframe-reverse"]], "polars.DataFrame.shrink_to_fit": [[186, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_numpy": [[197, "polars-dataframe-to-numpy"]], "polars.DataFrame.insert_at_idx": [[146, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.std": [[189, "polars-dataframe-std"]], "polars.DataFrame.sort": [[188, "polars-dataframe-sort"]], "polars.DataFrame.is_empty": [[149, "polars-dataframe-is-empty"]], "polars.DataFrame.median": [[160, "polars-dataframe-median"]], "polars.DataFrame.hstack": [[145, "polars-dataframe-hstack"]], "polars.DataFrame.pivot": [[170, "polars-dataframe-pivot"]], "polars.DataFrame.to_dict": [[194, "polars-dataframe-to-dict"]], "polars.DataFrame.iter_rows": [[152, "polars-dataframe-iter-rows"]], "polars.DataFrame.tail": [[191, "polars-dataframe-tail"]], "polars.DataFrame.get_columns": [[137, "polars-dataframe-get-columns"]], "polars.DataFrame.limit": [[157, "polars-dataframe-limit"]], "polars.DataFrame.slice": [[187, "polars-dataframe-slice"]], "polars.DataFrame.hash_rows": [[142, "polars-dataframe-hash-rows"]], "polars.DataFrame.join_asof": [[155, "polars-dataframe-join-asof"]], "polars.DataFrame.glimpse": [[138, "polars-dataframe-glimpse"]], "polars.DataFrame.iter_slices": [[153, "polars-dataframe-iter-slices"]], "polars.DataFrame.row": [[178, "polars-dataframe-row"]], "polars.DataFrame.head": [[143, "polars-dataframe-head"]], "polars.DataFrame.melt": [[161, "polars-dataframe-melt"]], "polars.DataFrame.max": [[158, "polars-dataframe-max"]], "polars.DataFrame.shift": [[184, "polars-dataframe-shift"]], "polars.DataFrame.fold": [[134, "polars-dataframe-fold"]], "polars.DataFrame.shift_and_fill": [[185, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.take_every": [[192, "polars-dataframe-take-every"]], "polars.DataFrame.is_duplicated": [[148, "polars-dataframe-is-duplicated"]], "polars.DataFrame.null_count": [[166, "polars-dataframe-null-count"]], "polars.DataFrame.frame_equal": [[135, "polars-dataframe-frame-equal"]], "polars.DataFrame.merge_sorted": [[162, "polars-dataframe-merge-sorted"]], "polars.DataFrame.sum": [[190, "polars-dataframe-sum"]], "polars.DataFrame.lazy": [[156, "polars-dataframe-lazy"]], "polars.DataFrame.mean": [[159, "polars-dataframe-mean"]], "polars.DataFrame.find_idx_by_name": [[133, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.pearson_corr": [[168, "polars-dataframe-pearson-corr"]], "polars.DataFrame.groupby_dynamic": [[140, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.product": [[171, "polars-dataframe-product"]], "polars.DataFrame.filter": [[132, "polars-dataframe-filter"]], "polars.DataFrame.groupby_rolling": [[141, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.replace": [[175, "polars-dataframe-replace"]], "polars.DataFrame.rename": [[174, "polars-dataframe-rename"]], "Exceptions": [[237, "exceptions"]], "polars.Expr.agg_groups": [[240, "polars-expr-agg-groups"]], "polars.DataFrame.with_columns": [[210, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.last": [[219, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.arcsin": [[248, "polars-expr-arcsin"]], "polars.Expr.arg_sort": [[254, "polars-expr-arg-sort"]], "polars.Expr.arr.arg_max": [[257, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.median": [[222, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.head": [[218, "polars-internals-dataframe-groupby-groupby-head"]], "polars.DataFrame.upsample": [[205, "polars-dataframe-upsample"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[221, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.count": [[216, "polars-internals-dataframe-groupby-groupby-count"]], "Data types": [[236, "data-types"]], "Numeric": [[236, "numeric"]], "Date / Time": [[236, "date-time"]], "Nested": [[236, "nested"]], "Other": [[236, "other"]], "polars.DataFrame.with_column": [[209, "polars-dataframe-with-column"]], "polars.Expr.arr.arg_min": [[258, "polars-expr-arr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[226, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.abs": [[239, "polars-expr-abs"]], "polars.Expr.arctanh": [[251, "polars-expr-arctanh"]], "polars.internals.dataframe.groupby.GroupBy.min": [[223, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.arr.explode": [[263, "polars-expr-arr-explode"]], "polars.DataFrame.to_struct": [[200, "polars-dataframe-to-struct"]], "polars.Expr.apply": [[245, "polars-expr-apply"]], "polars.Expr.arg_min": [[253, "polars-expr-arg-min"]], "polars.Expr.arr.eval": [[262, "polars-expr-arr-eval"]], "polars.DataFrame.unique": [[202, "polars-dataframe-unique"]], "polars.DataFrame.var": [[206, "polars-dataframe-var"]], "polars.Expr.arctan": [[250, "polars-expr-arctan"]], "polars.Expr.any": [[243, "polars-expr-any"]], "polars.DataFrame.with_row_count": [[211, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[213, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.DataFrame.unnest": [[203, "polars-dataframe-unnest"]], "polars.Expr.arr.contains": [[260, "polars-expr-arr-contains"]], "polars.Expr.arr.diff": [[261, "polars-expr-arr-diff"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[225, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.width": [[208, "polars-dataframe-width"]], "polars.internals.dataframe.groupby.GroupBy.max": [[220, "polars-internals-dataframe-groupby-groupby-max"]], "polars.DataFrame.vstack": [[207, "polars-dataframe-vstack"]], "polars.DataFrame.transpose": [[201, "polars-dataframe-transpose"]], "polars.Expr.arccos": [[246, "polars-expr-arccos"]], "polars.DataFrame.unstack": [[204, "polars-dataframe-unstack"]], "polars.Expr.arr.concat": [[259, "polars-expr-arr-concat"]], "polars.Expr.arcsinh": [[249, "polars-expr-arcsinh"]], "polars.internals.dataframe.groupby.GroupBy.all": [[214, "polars-internals-dataframe-groupby-groupby-all"]], "polars.Expr.all": [[242, "polars-expr-all"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[212, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.Expr.arccosh": [[247, "polars-expr-arccosh"]], "polars.DataFrame.to_pandas": [[198, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_series": [[199, "polars-dataframe-to-series"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[224, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[227, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.append": [[244, "polars-expr-append"]], "DataFrame": [[233, "dataframe"]], "polars.Expr.arg_max": [[252, "polars-expr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.first": [[217, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[215, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.alias": [[241, "polars-expr-alias"]], "polars.Expr.argsort": [[256, "polars-expr-argsort"]], "polars.Expr.arg_unique": [[255, "polars-expr-arg-unique"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[26, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[27, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[28, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[29, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[30, "polars.DataType"]], "__init__() (polars.datatype method)": [[30, "polars.DataType.__init__"]], "date (class in polars)": [[31, "polars.Date"]], "__init__() (polars.date method)": [[31, "polars.Date.__init__"]], "datetime (class in polars)": [[32, "polars.Datetime"]], "__init__() (polars.datetime method)": [[32, "polars.Datetime.__init__"]], "duration (class in polars)": [[33, "polars.Duration"]], "__init__() (polars.duration method)": [[33, "polars.Duration.__init__"]], "float32 (class in polars)": [[34, "polars.Float32"]], "__init__() (polars.float32 method)": [[34, "polars.Float32.__init__"]], "float64 (class in polars)": [[35, "polars.Float64"]], "__init__() (polars.float64 method)": [[35, "polars.Float64.__init__"]], "int16 (class in polars)": [[36, "polars.Int16"]], "__init__() (polars.int16 method)": [[36, "polars.Int16.__init__"]], "int32 (class in polars)": [[37, "polars.Int32"]], "__init__() (polars.int32 method)": [[37, "polars.Int32.__init__"]], "int64 (class in polars)": [[38, "polars.Int64"]], "__init__() (polars.int64 method)": [[38, "polars.Int64.__init__"]], "int8 (class in polars)": [[39, "polars.Int8"]], "__init__() (polars.int8 method)": [[39, "polars.Int8.__init__"]], "list (class in polars)": [[40, "polars.List"]], "__init__() (polars.list method)": [[40, "polars.List.__init__"]], "null (class in polars)": [[41, "polars.Null"]], "__init__() (polars.null method)": [[41, "polars.Null.__init__"]], "object (class in polars)": [[42, "polars.Object"]], "__init__() (polars.object method)": [[42, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[43, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[44, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[45, "polars.SQLContext.register"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "struct (class in polars)": [[47, "polars.Struct"]], "__init__() (polars.struct method)": [[47, "polars.Struct.__init__"]], "time (class in polars)": [[48, "polars.Time"]], "__init__() (polars.time method)": [[48, "polars.Time.__init__"]], "uint16 (class in polars)": [[49, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[49, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[50, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[50, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[51, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[51, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[52, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[52, "polars.UInt8.__init__"]], "unknown (class in polars)": [[53, "polars.Unknown"]], "__init__() (polars.unknown method)": [[53, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[54, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[54, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[55, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[56, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[57, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[58, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[59, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[60, "polars.arg_where"]], "build_info() (in module polars)": [[61, "polars.build_info"]], "collect_all() (in module polars)": [[62, "polars.collect_all"]], "concat() (in module polars)": [[63, "polars.concat"]], "cut() (in module polars)": [[64, "polars.cut"]], "date_range() (in module polars)": [[65, "polars.date_range"]], "arrowerror": [[66, "polars.exceptions.ArrowError"]], "computeerror": [[67, "polars.exceptions.ComputeError"]], "duplicateerror": [[68, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[69, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[70, "polars.exceptions.NoDataError"]], "norowsreturned": [[71, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[72, "polars.exceptions.NotFoundError"]], "panicexception": [[73, "polars.exceptions.PanicException"]], "rowsexception": [[74, "polars.exceptions.RowsException"]], "schemaerror": [[75, "polars.exceptions.SchemaError"]], "shapeerror": [[76, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[77, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[78, "polars.from_arrow"]], "from_dict() (in module polars)": [[79, "polars.from_dict"]], "from_dicts() (in module polars)": [[80, "polars.from_dicts"]], "from_numpy() (in module polars)": [[81, "polars.from_numpy"]], "from_pandas() (in module polars)": [[82, "polars.from_pandas"]], "from_records() (in module polars)": [[83, "polars.from_records"]], "get_dummies() (in module polars)": [[84, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[85, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[86, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[87, "polars.ones"]], "read_avro() (in module polars)": [[88, "polars.read_avro"]], "read_csv() (in module polars)": [[89, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[90, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[91, "polars.read_delta"]], "read_excel() (in module polars)": [[92, "polars.read_excel"]], "read_ipc() (in module polars)": [[93, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[94, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[95, "polars.read_json"]], "read_ndjson() (in module polars)": [[96, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[97, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[98, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[99, "polars.read_sql"]], "scan_csv() (in module polars)": [[100, "polars.scan_csv"]], "scan_delta() (in module polars)": [[101, "polars.scan_delta"]], "scan_ds() (in module polars)": [[102, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[103, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[104, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[105, "polars.scan_parquet"]], "show_versions() (in module polars)": [[106, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[107, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[108, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[109, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[109, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[110, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[112, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[113, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[114, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[115, "polars.zeros"]], "apply() (polars.dataframe method)": [[118, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[119, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[120, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[121, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[122, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[123, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[124, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[125, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[126, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[127, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[128, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[129, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[130, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[131, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[132, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[133, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[134, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[135, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[136, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[137, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[138, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[139, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[140, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[141, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[142, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[143, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[144, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[145, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[146, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[147, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[148, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[149, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[150, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[151, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[152, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[153, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[154, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[155, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[156, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[157, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[158, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[159, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[160, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[161, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[162, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[163, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[164, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[165, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[166, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[167, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[168, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[169, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[170, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[171, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[172, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[173, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[174, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[175, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[176, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[177, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[178, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[179, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[180, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[181, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[182, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[183, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[184, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[185, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[186, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[187, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[188, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[189, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[190, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[191, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[192, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[193, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[194, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[195, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[196, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[197, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[198, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[199, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[200, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[201, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[202, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[203, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[204, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[205, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[206, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[207, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[208, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[209, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[210, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[211, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[239, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[240, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[241, "polars.Expr.alias"]], "all() (polars.expr method)": [[242, "polars.Expr.all"]], "any() (polars.expr method)": [[243, "polars.Expr.any"]], "append() (polars.expr method)": [[244, "polars.Expr.append"]], "apply() (polars.expr method)": [[245, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[246, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[247, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[248, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[249, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[250, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[251, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[252, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[253, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[254, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[255, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[256, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[257, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[258, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[259, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[260, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[261, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[262, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[263, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[264, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[265, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[266, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[267, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[268, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[269, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[270, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[271, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[272, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[273, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[274, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[275, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[276, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[277, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[278, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[279, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[280, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[281, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[282, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[283, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[284, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[285, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[286, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[287, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[288, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[289, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[290, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[291, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[292, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[293, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[294, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[295, "polars.Expr.cosh"]], "count() (polars.expr method)": [[296, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[297, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[298, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[299, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[300, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[301, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[302, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[303, "polars.Expr.diff"]], "dot() (polars.expr method)": [[304, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[305, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[306, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[307, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[308, "polars.Expr.dt.cast_time_zone"]], "combine() (polars.expr.dt method)": [[309, "polars.Expr.dt.combine"]], "day() (polars.expr.dt method)": [[310, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[311, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[312, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[313, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[314, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[315, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[316, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[317, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[318, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[319, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[320, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[321, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[322, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[323, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[324, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[325, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[326, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[327, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[328, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[329, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[330, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[331, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[332, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[333, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[334, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[335, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[336, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[337, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[338, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[339, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[340, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[341, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[342, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[343, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[344, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[345, "polars.Expr.exp"]], "explode() (polars.expr method)": [[346, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[347, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[348, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[349, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[350, "polars.Expr.filter"]], "first() (polars.expr method)": [[351, "polars.Expr.first"]], "flatten() (polars.expr method)": [[352, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[353, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[354, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[355, "polars.Expr.hash"]], "head() (polars.expr method)": [[356, "polars.Expr.head"]], "inspect() (polars.expr method)": [[357, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[358, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[359, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[360, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[361, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[362, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[363, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[364, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[365, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[366, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[367, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[368, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[369, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[370, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[371, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[372, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[373, "polars.Expr.last"]], "len() (polars.expr method)": [[374, "polars.Expr.len"]], "limit() (polars.expr method)": [[375, "polars.Expr.limit"]], "list() (polars.expr method)": [[376, "polars.Expr.list"]], "log() (polars.expr method)": [[377, "polars.Expr.log"]], "log10() (polars.expr method)": [[378, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[379, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[380, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[381, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[382, "polars.Expr.max"]], "mean() (polars.expr method)": [[383, "polars.Expr.mean"]], "median() (polars.expr method)": [[384, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[385, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[386, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[387, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[388, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[389, "polars.Expr.min"]], "mode() (polars.expr method)": [[390, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[391, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[392, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[393, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[394, "polars.Expr.null_count"]], "over() (polars.expr method)": [[395, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[396, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[397, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[398, "polars.Expr.prefix"]], "product() (polars.expr method)": [[399, "polars.Expr.product"]], "quantile() (polars.expr method)": [[400, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[401, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[402, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[403, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[404, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[405, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[406, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[407, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[408, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[409, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[410, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[411, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[412, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[413, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[414, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[415, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[416, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[417, "polars.Expr.round"]], "sample() (polars.expr method)": [[418, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[419, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[420, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[421, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[422, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[423, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[424, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[425, "polars.Expr.sign"]], "sin() (polars.expr method)": [[426, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[427, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[428, "polars.Expr.skew"]], "slice() (polars.expr method)": [[429, "polars.Expr.slice"]], "sort() (polars.expr method)": [[430, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[431, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[432, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[433, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[434, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[435, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[436, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[437, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[438, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[439, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[440, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[441, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[442, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[443, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[444, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[445, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[446, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[447, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[448, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[449, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[450, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[451, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[452, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[453, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[454, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[455, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[456, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[457, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[458, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[459, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[460, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[461, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[462, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[463, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[464, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[465, "polars.Expr.sum"]], "tail() (polars.expr method)": [[466, "polars.Expr.tail"]], "take() (polars.expr method)": [[467, "polars.Expr.take"]], "take_every() (polars.expr method)": [[468, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[469, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[470, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[471, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[472, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[473, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[474, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[475, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[476, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[477, "polars.Expr.var"]], "where() (polars.expr method)": [[478, "polars.Expr.where"]], "all() (in module polars)": [[479, "polars.all"]], "any() (in module polars)": [[480, "polars.any"]], "apply() (in module polars)": [[481, "polars.apply"]], "arange() (in module polars)": [[482, "polars.arange"]], "argsort_by() (in module polars)": [[483, "polars.argsort_by"]], "avg() (in module polars)": [[484, "polars.avg"]], "coalesce() (in module polars)": [[485, "polars.coalesce"]], "col() (in module polars)": [[486, "polars.col"]], "concat_list() (in module polars)": [[487, "polars.concat_list"]], "concat_str() (in module polars)": [[488, "polars.concat_str"]], "count() (in module polars)": [[489, "polars.count"]], "cov() (in module polars)": [[490, "polars.cov"]], "cumfold() (in module polars)": [[491, "polars.cumfold"]], "cumreduce() (in module polars)": [[492, "polars.cumreduce"]], "cumsum() (in module polars)": [[493, "polars.cumsum"]], "date() (in module polars)": [[494, "polars.date"]], "datetime() (in module polars)": [[495, "polars.datetime"]], "duration() (in module polars)": [[496, "polars.duration"]], "element() (in module polars)": [[497, "polars.element"]], "exclude() (in module polars)": [[498, "polars.exclude"]], "first() (in module polars)": [[499, "polars.first"]], "fold() (in module polars)": [[500, "polars.fold"]], "format() (in module polars)": [[501, "polars.format"]], "from_epoch() (in module polars)": [[502, "polars.from_epoch"]], "groups() (in module polars)": [[503, "polars.groups"]], "head() (in module polars)": [[504, "polars.head"]], "list() (in module polars)": [[505, "polars.list"]], "lit() (in module polars)": [[506, "polars.lit"]], "map() (in module polars)": [[507, "polars.map"]], "max() (in module polars)": [[508, "polars.max"]], "mean() (in module polars)": [[509, "polars.mean"]], "median() (in module polars)": [[510, "polars.median"]], "min() (in module polars)": [[511, "polars.min"]], "n_unique() (in module polars)": [[512, "polars.n_unique"]], "pearson_corr() (in module polars)": [[513, "polars.pearson_corr"]], "quantile() (in module polars)": [[514, "polars.quantile"]], "reduce() (in module polars)": [[515, "polars.reduce"]], "repeat() (in module polars)": [[516, "polars.repeat"]], "select() (in module polars)": [[517, "polars.select"]], "spearman_rank_corr() (in module polars)": [[518, "polars.spearman_rank_corr"]], "std() (in module polars)": [[519, "polars.std"]], "struct() (in module polars)": [[520, "polars.struct"]], "sum() (in module polars)": [[521, "polars.sum"]], "tail() (in module polars)": [[522, "polars.tail"]], "var() (in module polars)": [[523, "polars.var"]], "when() (in module polars)": [[524, "polars.when"]], "cache() (polars.lazyframe method)": [[544, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[545, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[546, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[547, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[548, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[549, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[550, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[551, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[552, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[553, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[554, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[555, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[556, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[557, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[558, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[559, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[560, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[561, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[562, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[563, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[564, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[565, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[566, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[567, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[568, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[569, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[570, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[571, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[572, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[573, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[574, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[575, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[576, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[577, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[578, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[579, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[580, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[581, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[582, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[583, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[584, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[585, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[586, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[587, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[588, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[589, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[590, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[591, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[592, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[593, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[594, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[595, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[596, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[597, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[598, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[599, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[600, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[601, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[602, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[603, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[604, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[605, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[606, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[607, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[608, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[609, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[610, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[618, "polars.Series.abs"]], "alias() (polars.series method)": [[619, "polars.Series.alias"]], "all() (polars.series method)": [[620, "polars.Series.all"]], "any() (polars.series method)": [[621, "polars.Series.any"]], "append() (polars.series method)": [[622, "polars.Series.append"]], "apply() (polars.series method)": [[623, "polars.Series.apply"]], "arccos() (polars.series method)": [[624, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[625, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[626, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[627, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[628, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[629, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[630, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[631, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[632, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[633, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[634, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[635, "polars.Series.argsort"]], "arr (polars.series attribute)": [[636, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[637, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[638, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[639, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[640, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[641, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[642, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[643, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[644, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[645, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[646, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[647, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[648, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[649, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[650, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[651, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[652, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[653, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[654, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[655, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[656, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[657, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[658, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[659, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[660, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[661, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[662, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[663, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[664, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[665, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[666, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[667, "polars.Series.cast"]], "cat (polars.series attribute)": [[668, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[669, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[670, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[671, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[672, "polars.Series.cleared"]], "clip() (polars.series method)": [[673, "polars.Series.clip"]], "clip_max() (polars.series method)": [[674, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[675, "polars.Series.clip_min"]], "clone() (polars.series method)": [[676, "polars.Series.clone"]], "cos() (polars.series method)": [[677, "polars.Series.cos"]], "cosh() (polars.series method)": [[678, "polars.Series.cosh"]], "cummax() (polars.series method)": [[679, "polars.Series.cummax"]], "cummin() (polars.series method)": [[680, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[681, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[682, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[683, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[684, "polars.Series.describe"]], "diff() (polars.series method)": [[685, "polars.Series.diff"]], "dot() (polars.series method)": [[686, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[687, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[688, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[689, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[690, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[691, "polars.Series.dt.cast_time_zone"]], "combine() (polars.series.dt method)": [[692, "polars.Series.dt.combine"]], "day() (polars.series.dt method)": [[693, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[694, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[695, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[696, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[697, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[698, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[699, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[700, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[701, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[702, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[703, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[704, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[705, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[706, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[707, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[708, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[709, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[710, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[711, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[712, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[713, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[714, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[715, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[716, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[717, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[718, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[719, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[720, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[721, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[722, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[723, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[724, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[725, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[726, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[727, "polars.Series.dtype"]], "entropy() (polars.series method)": [[728, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[729, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[730, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[731, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[732, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[733, "polars.Series.exp"]], "explode() (polars.series method)": [[734, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[735, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[736, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[737, "polars.Series.fill_null"]], "filter() (polars.series method)": [[738, "polars.Series.filter"]], "flags (polars.series attribute)": [[739, "polars.Series.flags"]], "floor() (polars.series method)": [[740, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[741, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[742, "polars.Series.has_validity"]], "hash() (polars.series method)": [[743, "polars.Series.hash"]], "head() (polars.series method)": [[744, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[745, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[746, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[747, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[748, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[749, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[750, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[751, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[752, "polars.Series.is_first"]], "is_float() (polars.series method)": [[753, "polars.Series.is_float"]], "is_in() (polars.series method)": [[754, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[755, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[756, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[757, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[758, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[759, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[760, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[761, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[762, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[763, "polars.Series.is_utf8"]], "item() (polars.series method)": [[764, "polars.Series.item"]], "kurtosis() (polars.series method)": [[765, "polars.Series.kurtosis"]], "len() (polars.series method)": [[766, "polars.Series.len"]], "limit() (polars.series method)": [[767, "polars.Series.limit"]], "log() (polars.series method)": [[768, "polars.Series.log"]], "log10() (polars.series method)": [[769, "polars.Series.log10"]], "max() (polars.series method)": [[770, "polars.Series.max"]], "mean() (polars.series method)": [[771, "polars.Series.mean"]], "median() (polars.series method)": [[772, "polars.Series.median"]], "min() (polars.series method)": [[773, "polars.Series.min"]], "mode() (polars.series method)": [[774, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[775, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[776, "polars.Series.n_unique"]], "name (polars.series attribute)": [[777, "polars.Series.name"]], "nan_max() (polars.series method)": [[778, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[779, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[780, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[781, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[782, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[783, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[784, "polars.Series.peak_min"]], "product() (polars.series method)": [[785, "polars.Series.product"]], "quantile() (polars.series method)": [[786, "polars.Series.quantile"]], "rank() (polars.series method)": [[787, "polars.Series.rank"]], "rechunk() (polars.series method)": [[788, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[789, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[790, "polars.Series.rename"]], "reshape() (polars.series method)": [[791, "polars.Series.reshape"]], "reverse() (polars.series method)": [[792, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[793, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[794, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[795, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[796, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[797, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[798, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[799, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[800, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[801, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[802, "polars.Series.rolling_var"]], "round() (polars.series method)": [[803, "polars.Series.round"]], "sample() (polars.series method)": [[804, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[805, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[806, "polars.Series.series_equal"]], "set() (polars.series method)": [[807, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[808, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[809, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[810, "polars.Series.shape"]], "shift() (polars.series method)": [[811, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[812, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[813, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[814, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[815, "polars.Series.shuffle"]], "sign() (polars.series method)": [[816, "polars.Series.sign"]], "sin() (polars.series method)": [[817, "polars.Series.sin"]], "sinh() (polars.series method)": [[818, "polars.Series.sinh"]], "skew() (polars.series method)": [[819, "polars.Series.skew"]], "slice() (polars.series method)": [[820, "polars.Series.slice"]], "sort() (polars.series method)": [[821, "polars.Series.sort"]], "sqrt() (polars.series method)": [[822, "polars.Series.sqrt"]], "std() (polars.series method)": [[823, "polars.Series.std"]], "str (polars.series attribute)": [[824, "polars.Series.str"]], "concat() (polars.series.str method)": [[825, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[826, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[827, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[828, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[829, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[830, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[831, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[832, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[833, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[834, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[835, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[836, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[837, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[838, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[839, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[840, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[841, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[842, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[843, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[844, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[845, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[846, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[847, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[848, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[849, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[850, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[851, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[852, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[853, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[854, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[855, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[856, "polars.Series.struct.to_frame"]], "unnest() (polars.series.struct method)": [[857, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[858, "polars.Series.sum"]], "tail() (polars.series method)": [[859, "polars.Series.tail"]], "take() (polars.series method)": [[860, "polars.Series.take"]], "take_every() (polars.series method)": [[861, "polars.Series.take_every"]], "tan() (polars.series method)": [[862, "polars.Series.tan"]], "tanh() (polars.series method)": [[863, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[864, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[865, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[866, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[867, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[868, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[869, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[870, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[871, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[872, "polars.Series.top_k"]], "unique() (polars.series method)": [[873, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[874, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[875, "polars.Series.value_counts"]], "var() (polars.series method)": [[876, "polars.Series.var"]], "view() (polars.series method)": [[877, "polars.Series.view"]], "zip_with() (polars.series method)": [[878, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[893, "polars.SQLContext"]]}})